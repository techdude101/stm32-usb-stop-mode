
USB_STOP_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa68  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800ab78  0800ab78  0001ab78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae68  0800ae68  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae68  0800ae68  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae68  0800ae68  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae68  0800ae68  0001ae68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae6c  0800ae6c  0001ae6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800ae70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  20000350  0800b1c0  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001714  0800b1c0  00021714  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d2c  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000356a  00000000  00000000  000380a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  0003b610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ff8  00000000  00000000  0003c778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005936  00000000  00000000  0003d770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e74  00000000  00000000  000430a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c773  00000000  00000000  00053f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e068d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee8  00000000  00000000  000e0708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ab60 	.word	0x0800ab60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800ab60 	.word	0x0800ab60

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4906      	ldr	r1, [pc, #24]	; (8000abc <__NVIC_EnableIRQ+0x34>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db10      	blt.n	8000af4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4909      	ldr	r1, [pc, #36]	; (8000b00 <__NVIC_DisableIRQ+0x40>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	3320      	adds	r3, #32
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000aec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000af0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b0a:	f000 fd0b 	bl	8001524 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b0e:	f000 f89f 	bl	8000c50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b12:	f000 f96f 	bl	8000df4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b16:	f000 f8fb 	bl	8000d10 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000b1a:	f000 f941 	bl	8000da0 <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 8000b1e:	f007 fdf3 	bl	8008708 <MX_USB_DEVICE_Init>
	MX_RTC_Init();
 8000b22:	f000 f923 	bl	8000d6c <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
//	configurePB14Interrupt();
	const uint16_t DELAY_TIME = 1000;
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	81fb      	strh	r3, [r7, #14]

	resetTime();
 8000b2c:	f000 fb36 	bl	800119c <resetTime>
	char msg[] = "Startup...\r\n";
 8000b30:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <main+0x12c>)
 8000b32:	463c      	mov	r4, r7
 8000b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b36:	c407      	stmia	r4!, {r0, r1, r2}
 8000b38:	7023      	strb	r3, [r4, #0]
	LED_ON();
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	483c      	ldr	r0, [pc, #240]	; (8000c34 <main+0x130>)
 8000b42:	f000 ffe9 	bl	8001b18 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), HAL_MAX_DELAY);
 8000b46:	4639      	mov	r1, r7
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	220d      	movs	r2, #13
 8000b4e:	483a      	ldr	r0, [pc, #232]	; (8000c38 <main+0x134>)
 8000b50:	f004 f847 	bl	8004be2 <HAL_UART_Transmit>
	CDC_Transmit_FS((uint8_t*) msg, strlen(msg));
 8000b54:	463b      	mov	r3, r7
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fafa 	bl	8000150 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	463b      	mov	r3, r7
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f007 feb9 	bl	80088dc <CDC_Transmit_FS>

	HAL_Delay(DELAY_TIME);
 8000b6a:	89fb      	ldrh	r3, [r7, #14]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fd3b 	bl	80015e8 <HAL_Delay>
	LED_OFF();
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b78:	482e      	ldr	r0, [pc, #184]	; (8000c34 <main+0x130>)
 8000b7a:	f000 ffcd 	bl	8001b18 <HAL_GPIO_WritePin>
	HAL_Delay(DELAY_TIME);
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fd31 	bl	80015e8 <HAL_Delay>
//		while(1);
//		sleepTest();
//		stopTest();
//		usb_connected = usbPowerDetected();

		if ((usb_cdc_open != -1) && alarm_flag)
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <main+0x138>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <main+0x9a>
 8000b92:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <main+0x13c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <main+0x9a>
		{
			serialMenuUSB();
 8000b9a:	f000 fa11 	bl	8000fc0 <serialMenuUSB>
		}

		usb_connected = isUSBConnected();
 8000b9e:	f000 f9fb 	bl	8000f98 <isUSBConnected>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <main+0x140>)
 8000ba8:	701a      	strb	r2, [r3, #0]
		sleep_enable = !usb_connected;
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <main+0x140>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf0c      	ite	eq
 8000bb4:	2301      	moveq	r3, #1
 8000bb6:	2300      	movne	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <main+0x144>)
 8000bbe:	701a      	strb	r2, [r3, #0]

		if (sleep_enable)
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <main+0x144>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d026      	beq.n	8000c18 <main+0x114>
		{
			usb_connected = 0;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <main+0x140>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <main+0x130>)
 8000bd8:	f000 ff9e 	bl	8001b18 <HAL_GPIO_WritePin>
			USBD_Stop(&hUsbDeviceFS);
 8000bdc:	481b      	ldr	r0, [pc, #108]	; (8000c4c <main+0x148>)
 8000bde:	f006 fd40 	bl	8007662 <USBD_Stop>
			configurePA11Interrupt();
 8000be2:	f000 f9ab 	bl	8000f3c <configurePA11Interrupt>
			enterStopMode();			// ~100uA
 8000be6:	f000 fa1d 	bl	8001024 <enterStopMode>
			// System clock set to HSI RC after waking from stop mode
			SystemClock_Config();
 8000bea:	f000 f831 	bl	8000c50 <SystemClock_Config>
			HAL_ResumeTick();
 8000bee:	f000 fd1d 	bl	800162c <HAL_ResumeTick>
			MX_USB_DEVICE_Init();
 8000bf2:	f007 fd89 	bl	8008708 <MX_USB_DEVICE_Init>
			LED_ON();
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <main+0x130>)
 8000bfe:	f000 ff8b 	bl	8001b18 <HAL_GPIO_WritePin>
			resetTime();
 8000c02:	f000 facb 	bl	800119c <resetTime>
			setAlarm();
 8000c06:	f000 faad 	bl	8001164 <setAlarm>
			alarm_flag = 0;
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <main+0x13c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c14:	f000 fce8 	bl	80015e8 <HAL_Delay>
		}

		if (alarm_flag)
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <main+0x13c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0b2      	beq.n	8000b86 <main+0x82>
		{
			resetTime();
 8000c20:	f000 fabc 	bl	800119c <resetTime>
			setAlarm();
 8000c24:	f000 fa9e 	bl	8001164 <setAlarm>
			alarm_flag = 0;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <main+0x13c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
		if ((usb_cdc_open != -1) && alarm_flag)
 8000c2e:	e7aa      	b.n	8000b86 <main+0x82>
 8000c30:	0800ab78 	.word	0x0800ab78
 8000c34:	40011000 	.word	0x40011000
 8000c38:	200008f8 	.word	0x200008f8
 8000c3c:	20000002 	.word	0x20000002
 8000c40:	20000001 	.word	0x20000001
 8000c44:	2000036c 	.word	0x2000036c
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	200005a0 	.word	0x200005a0

08000c50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5a:	2228      	movs	r2, #40	; 0x28
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f008 fa6b 	bl	800913a <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8000c80:	2305      	movs	r3, #5
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c92:	2301      	movs	r3, #1
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ca0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fc3a 	bl	8003524 <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x6a>
	{
		Error_Handler();
 8000cb6:	f000 fa8b 	bl	80011d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fea5 	bl	8003a24 <HAL_RCC_ClockConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000ce0:	f000 fa76 	bl	80011d0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USB;
 8000ce4:	2311      	movs	r3, #17
 8000ce6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cec:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cf2:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 f830 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 8000d02:	f000 fa65 	bl	80011d0 <Error_Handler>
	}
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	; 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d16:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <MX_I2C1_Init+0x58>)
 8000d18:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 10000;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d20:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d34:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d50:	f000 fefa 	bl	8001b48 <HAL_I2C_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 8000d5a:	f000 fa39 	bl	80011d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000864 	.word	0x20000864
 8000d68:	40005400 	.word	0x40005400

08000d6c <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_RTC_Init+0x2c>)
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <MX_RTC_Init+0x30>)
 8000d74:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_RTC_Init+0x2c>)
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_RTC_Init+0x2c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_RTC_Init+0x2c>)
 8000d86:	f003 f95b 	bl	8004040 <HAL_RTC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_RTC_Init+0x28>
	{
		Error_Handler();
 8000d90:	f000 fa1e 	bl	80011d0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000a38 	.word	0x20000a38
 8000d9c:	40002800 	.word	0x40002800

08000da0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <MX_USART1_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd8:	f003 feb6 	bl	8004b48 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000de2:	f000 f9f5 	bl	80011d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200008f8 	.word	0x200008f8
 8000df0:	40013800 	.word	0x40013800

08000df4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a33      	ldr	r2, [pc, #204]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e20:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a2d      	ldr	r2, [pc, #180]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e26:	f043 0320 	orr.w	r3, r3, #32
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0320 	and.w	r3, r3, #32
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a27      	ldr	r2, [pc, #156]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a21      	ldr	r2, [pc, #132]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_GPIO_Init+0xe8>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6e:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <MX_GPIO_Init+0xec>)
 8000e70:	f000 fe52 	bl	8001b18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2102      	movs	r1, #2
 8000e78:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <MX_GPIO_Init+0xf0>)
 8000e7a:	f000 fe4d 	bl	8001b18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_GPIO_Init+0xec>)
 8000e98:	f000 fce4 	bl	8001864 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_GPIO_Init+0xf0>)
 8000eb4:	f000 fcd6 	bl	8001864 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000eb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ebc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_GPIO_Init+0xf0>)
 8000ece:	f000 fcc9 	bl	8001864 <HAL_GPIO_Init>

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 4 */

void EXTI15_10_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	if ((EXTI->PR & EXTI_PR_PR14) != 0 || (EXTI->PR & EXTI_PR_PR11) != 0) /* Check line 11 has triggered the IT */
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <EXTI15_10_IRQHandler+0x4c>)
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d105      	bne.n	8000f04 <EXTI15_10_IRQHandler+0x1c>
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <EXTI15_10_IRQHandler+0x4c>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00e      	beq.n	8000f22 <EXTI15_10_IRQHandler+0x3a>
	{
//		usb_connected = usbPowerDetected();
		usb_connected = 1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <EXTI15_10_IRQHandler+0x50>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
		EXTI->PR |= EXTI_PR_PR14; /* Clear the pending bit */
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <EXTI15_10_IRQHandler+0x4c>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <EXTI15_10_IRQHandler+0x4c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6153      	str	r3, [r2, #20]
		EXTI->PR |= EXTI_PR_PR11; /* Clear the pending bit */
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <EXTI15_10_IRQHandler+0x4c>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <EXTI15_10_IRQHandler+0x4c>)
 8000f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f20:	6153      	str	r3, [r2, #20]
	}
	EXTI->PR |= 0U;
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <EXTI15_10_IRQHandler+0x4c>)
 8000f24:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <EXTI15_10_IRQHandler+0x4c>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	6153      	str	r3, [r2, #20]
	NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000f2a:	2028      	movs	r0, #40	; 0x28
 8000f2c:	f7ff fdc8 	bl	8000ac0 <__NVIC_DisableIRQ>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010400 	.word	0x40010400
 8000f38:	2000036c 	.word	0x2000036c

08000f3c <configurePA11Interrupt>:
	EXTI->IMR = EXTI_IMR_MR14;
	NVIC_EnableIRQ(EXTI15_10_IRQn);
}

static void configurePA11Interrupt(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000f42:	463b      	mov	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
	{ 0 };

	/*Configure GPIO pin : PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f52:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <configurePA11Interrupt+0x4c>)
 8000f56:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <configurePA11Interrupt+0x50>)
 8000f66:	f000 fc7d 	bl	8001864 <HAL_GPIO_Init>

	AFIO->EXTICR[3] = AFIO_EXTICR3_EXTI11_PA;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <configurePA11Interrupt+0x54>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]

	EXTI->IMR = EXTI_IMR_MR11;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <configurePA11Interrupt+0x58>)
 8000f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f76:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f78:	2028      	movs	r0, #40	; 0x28
 8000f7a:	f7ff fd85 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	10320000 	.word	0x10320000
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	40010000 	.word	0x40010000
 8000f94:	40010400 	.word	0x40010400

08000f98 <isUSBConnected>:

uint8_t isUSBConnected(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t connected = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <isUSBConnected+0x24>)
 8000fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d101      	bne.n	8000fb0 <isUSBConnected+0x18>
	{
		connected = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
	}
	return (connected);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	200005a0 	.word	0x200005a0

08000fc0 <serialMenuUSB>:
		HAL_UART_Transmit(&huart1, (char*) '\n', 1, HAL_MAX_DELAY);
	}
}

void serialMenuUSB()
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	size = sprintf(Data, "USB Connected\r\n");
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <serialMenuUSB+0x3c>)
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <serialMenuUSB+0x40>)
 8000fc8:	4614      	mov	r4, r2
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	6020      	str	r0, [r4, #0]
 8000fd0:	6061      	str	r1, [r4, #4]
 8000fd2:	60a2      	str	r2, [r4, #8]
 8000fd4:	60e3      	str	r3, [r4, #12]
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <serialMenuUSB+0x44>)
 8000fdc:	801a      	strh	r2, [r3, #0]
	while (CDC_Transmit_FS(Data, size) != USBD_OK)
 8000fde:	e002      	b.n	8000fe6 <serialMenuUSB+0x26>
	{
		HAL_Delay(10);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f000 fb01 	bl	80015e8 <HAL_Delay>
	while (CDC_Transmit_FS(Data, size) != USBD_OK)
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <serialMenuUSB+0x44>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <serialMenuUSB+0x3c>)
 8000fee:	f007 fc75 	bl	80088dc <CDC_Transmit_FS>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f3      	bne.n	8000fe0 <serialMenuUSB+0x20>
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffc:	20000938 	.word	0x20000938
 8001000:	0800abb0 	.word	0x0800abb0
 8001004:	20000a4c 	.word	0x20000a4c

08001008 <HAL_RTC_AlarmAEventCallback>:
		enterStopMode();
	}
}

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	alarm_flag = 1;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_RTC_AlarmAEventCallback+0x18>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	20000001 	.word	0x20000001

08001024 <enterStopMode>:
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFE);
}

void enterStopMode(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
	EXTI->EMR = EXTI_EMR_MR17;				// event unmask line 17 (RTC)
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <enterStopMode+0x12c>)
 800102a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800102e:	605a      	str	r2, [r3, #4]
	EXTI->RTSR = EXTI_RTSR_TR17;			// rising edge detection
 8001030:	4b47      	ldr	r3, [pc, #284]	; (8001150 <enterStopMode+0x12c>)
 8001032:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001036:	609a      	str	r2, [r3, #8]

	PWR->CR &= ~PWR_CR_PDDS;				// Enter stop mode when the CPU enters deepsleep.
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <enterStopMode+0x130>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <enterStopMode+0x130>)
 800103e:	f023 0302 	bic.w	r3, r3, #2
 8001042:	6013      	str	r3, [r2, #0]
	PWR->CR |= PWR_CR_LPDS; 				// Voltage regulator in low-power mode during Stop mode
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <enterStopMode+0x130>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a42      	ldr	r2, [pc, #264]	; (8001154 <enterStopMode+0x130>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;			// sleep mode
 8001050:	4b41      	ldr	r3, [pc, #260]	; (8001158 <enterStopMode+0x134>)
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	4a40      	ldr	r2, [pc, #256]	; (8001158 <enterStopMode+0x134>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6113      	str	r3, [r2, #16]

	RCC->APB1ENR |= (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN); //Enable the power and backup interface clocks
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <enterStopMode+0x138>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	4a3e      	ldr	r2, [pc, #248]	; (800115c <enterStopMode+0x138>)
 8001062:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8001066:	61d3      	str	r3, [r2, #28]
    RCC->BDCR |=  RCC_BDCR_BDRST;			// reset backup domain
 8001068:	4b3c      	ldr	r3, [pc, #240]	; (800115c <enterStopMode+0x138>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4a3b      	ldr	r2, [pc, #236]	; (800115c <enterStopMode+0x138>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001072:	6213      	str	r3, [r2, #32]
    RCC->BDCR &= ~RCC_BDCR_BDRST;			// reset backup domain
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <enterStopMode+0x138>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	4a38      	ldr	r2, [pc, #224]	; (800115c <enterStopMode+0x138>)
 800107a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107e:	6213      	str	r3, [r2, #32]

	PWR->CR |= PWR_CR_DBP;             	  	// enable access to the backup registers and the RTC.
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <enterStopMode+0x130>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a33      	ldr	r2, [pc, #204]	; (8001154 <enterStopMode+0x130>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108a:	6013      	str	r3, [r2, #0]
	 * are in the Backup domain. As a result, after Reset, these bits are write- protected and the DBP bit
	 * in the Power control register (PWR_CR) has to be set before these can be modified.
	 * These bits are only reset after a Backup domain Reset. Any internal or external Reset will not have
	 * any effect on these bits. */

	RCC->BDCR |= RCC_BDCR_LSEON;			// external low freq oscillator
 800108c:	4b33      	ldr	r3, [pc, #204]	; (800115c <enterStopMode+0x138>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a32      	ldr	r2, [pc, #200]	; (800115c <enterStopMode+0x138>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6213      	str	r3, [r2, #32]
	while(!(RCC->BDCR & RCC_BDCR_LSERDY)) asm("nop"); 	// Wait for LSE ready
 8001098:	e000      	b.n	800109c <enterStopMode+0x78>
 800109a:	bf00      	nop
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <enterStopMode+0x138>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f8      	beq.n	800109a <enterStopMode+0x76>

//	RCC->CSR |= RCC_CSR_LSION;				// internal low freq oscillator
//	while(!(RCC->CSR & RCC_CSR_LSIRDY)); 	// Wait for LSI ready

//	RCC->BDCR |= RCC_BDCR_RTCSEL_LSI;		// LSI source
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSE;		// LSE source
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <enterStopMode+0x138>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4a2b      	ldr	r2, [pc, #172]	; (800115c <enterStopMode+0x138>)
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;			// RTC on
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <enterStopMode+0x138>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4a28      	ldr	r2, [pc, #160]	; (800115c <enterStopMode+0x138>)
 80010ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010be:	6213      	str	r3, [r2, #32]

	RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;	// clear RSF flag
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <enterStopMode+0x13c>)
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4926      	ldr	r1, [pc, #152]	; (8001160 <enterStopMode+0x13c>)
 80010c6:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80010ca:	4013      	ands	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
	while (!(RTC->CRL & RTC_CRL_RSF));		// Wait for the RSF to be set by hardware
 80010ce:	bf00      	nop
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <enterStopMode+0x13c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f9      	beq.n	80010d0 <enterStopMode+0xac>

	// config mode to set prescaler and alarm setting
	while (!(RTC->CRL & RTC_CRL_RTOFF));			// wait until RTOFF = 1
 80010dc:	bf00      	nop
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <enterStopMode+0x13c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f9      	beq.n	80010de <enterStopMode+0xba>
	RTC->CRL |= RTC_CRL_CNF;						// enter configuration mode
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <enterStopMode+0x13c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <enterStopMode+0x13c>)
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	6053      	str	r3, [r2, #4]
	RTC->PRLH = (uint16_t)0;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <enterStopMode+0x13c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
	RTC->PRLL = (uint16_t)32767;					// RTC prescaler - RTCCLK = 32.768 kHz = 0x7FFF = 1 second
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <enterStopMode+0x13c>)
 80010fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001102:	60da      	str	r2, [r3, #12]
	RTC->ALRH = (uint16_t)0;
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <enterStopMode+0x13c>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
	RTC->ALRL = (uint16_t)SLEEP_TIME;						// alarm N seconds
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <enterStopMode+0x13c>)
 800110c:	2214      	movs	r2, #20
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); // exit configuration mode
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <enterStopMode+0x13c>)
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4912      	ldr	r1, [pc, #72]	; (8001160 <enterStopMode+0x13c>)
 8001116:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800111a:	4013      	ands	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
	while (!(RTC->CRL & RTC_CRL_RTOFF));			// wait until RTOFF = 1
 800111e:	bf00      	nop
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <enterStopMode+0x13c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f9      	beq.n	8001120 <enterStopMode+0xfc>

	EXTI->PR &= EXTI_PR_PR17;							// reset pending interrupts
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <enterStopMode+0x12c>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <enterStopMode+0x12c>)
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	6153      	str	r3, [r2, #20]
	RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_ALRF);	// clear alarm flag
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <enterStopMode+0x13c>)
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4908      	ldr	r1, [pc, #32]	; (8001160 <enterStopMode+0x13c>)
 800113e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8001142:	4013      	ands	r3, r2
 8001144:	604b      	str	r3, [r1, #4]

	__WFE();								// enter stop mode
 8001146:	bf20      	wfe
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	40010400 	.word	0x40010400
 8001154:	40007000 	.word	0x40007000
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	40021000 	.word	0x40021000
 8001160:	40002800 	.word	0x40002800

08001164 <setAlarm>:
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	HAL_PWR_EnterSTANDBYMode();
}

void setAlarm(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm;

	sAlarm.AlarmTime.Hours = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = SLEEP_TIME;
 8001172:	2314      	movs	r3, #20
 8001174:	70bb      	strb	r3, [r7, #2]
	sAlarm.Alarm = RTC_ALARM_A;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <setAlarm+0x34>)
 8001182:	f003 f963 	bl	800444c <HAL_RTC_SetAlarm_IT>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <setAlarm+0x2c>
	{
		Error_Handler();
 800118c:	f000 f820 	bl	80011d0 <Error_Handler>
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000a38 	.word	0x20000a38

0800119c <resetTime>:

void resetTime(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;

	sTime.Hours = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <resetTime+0x30>)
 80011b6:	f002 ffd9 	bl	800416c <HAL_RTC_SetTime>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <resetTime+0x28>
	{
		Error_Handler();
 80011c0:	f000 f806 	bl	80011d0 <Error_Handler>
	}
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000a38 	.word	0x20000a38

080011d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011d6:	e7fe      	b.n	80011d6 <Error_Handler+0x6>

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_MspInit+0x5c>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <HAL_MspInit+0x5c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_MspInit+0x5c>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x5c>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x5c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x5c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_MspInit+0x60>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_MspInit+0x60>)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_I2C_MspInit+0x90>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d132      	bne.n	80012c2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001274:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4812      	ldr	r0, [pc, #72]	; (80012d4 <HAL_I2C_MspInit+0x98>)
 800128a:	f000 faeb 	bl	8001864 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_I2C_MspInit+0x9c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_I2C_MspInit+0x9c>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 80012b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_I2C_MspInit+0x94>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40005400 	.word	0x40005400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010c00 	.word	0x40010c00
 80012d8:	40010000 	.word	0x40010000

080012dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <HAL_RTC_MspInit+0x4c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d118      	bne.n	8001320 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80012ee:	f002 f90d 	bl	800350c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_RTC_MspInit+0x50>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_RTC_MspInit+0x50>)
 80012f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_RTC_MspInit+0x50>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_RTC_MspInit+0x54>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2029      	movs	r0, #41	; 0x29
 8001316:	f000 fa6e 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800131a:	2029      	movs	r0, #41	; 0x29
 800131c:	f000 fa87 	bl	800182e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40002800 	.word	0x40002800
 800132c:	40021000 	.word	0x40021000
 8001330:	4242043c 	.word	0x4242043c

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_UART_MspInit+0xa4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d13d      	bne.n	80013d0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_UART_MspInit+0xa8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <HAL_UART_MspInit+0xa8>)
 800135a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_UART_MspInit+0xa8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_UART_MspInit+0xa8>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <HAL_UART_MspInit+0xa8>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_UART_MspInit+0xa8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001384:	2340      	movs	r3, #64	; 0x40
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <HAL_UART_MspInit+0xac>)
 8001398:	f000 fa64 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_UART_MspInit+0xac>)
 80013b0:	f000 fa58 	bl	8001864 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_UART_MspInit+0xb0>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_UART_MspInit+0xb0>)
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	40010000 	.word	0x40010000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142e:	f000 f8bf 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800143e:	f000 fe12 	bl	8002066 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20001424 	.word	0x20001424

0800144c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <RTC_Alarm_IRQHandler+0x10>)
 8001452:	f003 f8af 	bl	80045b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000a38 	.word	0x20000a38

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f007 fe1e 	bl	80090d0 <__errno>
 8001494:	4602      	mov	r2, r0
 8001496:	230c      	movs	r3, #12
 8001498:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20005000 	.word	0x20005000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	20000370 	.word	0x20000370
 80014c8:	20001718 	.word	0x20001718

080014cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014da:	e003      	b.n	80014e4 <LoopCopyDataInit>

080014dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014e2:	3104      	adds	r1, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014ec:	d3f6      	bcc.n	80014dc <CopyDataInit>
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014f0:	e002      	b.n	80014f8 <LoopFillZerobss>

080014f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014f4:	f842 3b04 	str.w	r3, [r2], #4

080014f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014fc:	d3f9      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014fe:	f7ff ffe5 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f007 fdeb 	bl	80090dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001506:	f7ff fafd 	bl	8000b04 <main>
  bx lr
 800150a:	4770      	bx	lr
  ldr r3, =_sidata
 800150c:	0800ae70 	.word	0x0800ae70
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001514:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 8001518:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 800151c:	20001714 	.word	0x20001714

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_Init+0x28>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_Init+0x28>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	2003      	movs	r0, #3
 8001536:	f000 f953 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153a:	2000      	movs	r0, #0
 800153c:	f000 f808 	bl	8001550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001540:	f7ff fe4a 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x54>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f96b 	bl	800184a <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e00e      	b.n	800159c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d80a      	bhi.n	800159a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001584:	2200      	movs	r2, #0
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f000 f933 	bl	80017f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <HAL_InitTick+0x5c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000004 	.word	0x20000004
 80015a8:	2000000c 	.word	0x2000000c
 80015ac:	20000008 	.word	0x20000008

080015b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x1c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_IncTick+0x20>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <HAL_IncTick+0x20>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	20000a50 	.word	0x20000a50

080015d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <HAL_GetTick+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000a50 	.word	0x20000a50

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_Delay+0x40>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffe0 	bl	80015d4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000000c 	.word	0x2000000c

0800162c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <HAL_ResumeTick+0x18>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a03      	ldr	r2, [pc, #12]	; (8001644 <HAL_ResumeTick+0x18>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	e000e010 	.word	0xe000e010

08001648 <__NVIC_SetPriorityGrouping>:
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167a:	4a04      	ldr	r2, [pc, #16]	; (800168c <__NVIC_SetPriorityGrouping+0x44>)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	60d3      	str	r3, [r2, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_GetPriorityGrouping>:
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	f003 0307 	and.w	r3, r3, #7
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_EnableIRQ>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db0b      	blt.n	80016d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	4906      	ldr	r1, [pc, #24]	; (80016e0 <__NVIC_EnableIRQ+0x34>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	2001      	movs	r0, #1
 80016ce:	fa00 f202 	lsl.w	r2, r0, r2
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ac:	d301      	bcc.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00f      	b.n	80017d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <SysTick_Config+0x40>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	210f      	movs	r1, #15
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f7ff ff90 	bl	80016e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SysTick_Config+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SysTick_Config+0x40>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff2d 	bl	8001648 <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001808:	f7ff ff42 	bl	8001690 <__NVIC_GetPriorityGrouping>
 800180c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	f7ff ff90 	bl	8001738 <NVIC_EncodePriority>
 8001818:	4602      	mov	r2, r0
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff5f 	bl	80016e4 <__NVIC_SetPriority>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff35 	bl	80016ac <__NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffa2 	bl	800179c <SysTick_Config>
 8001858:	4603      	mov	r3, r0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e127      	b.n	8001ac8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001878:	2201      	movs	r2, #1
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8116 	bne.w	8001ac2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b12      	cmp	r3, #18
 800189c:	d034      	beq.n	8001908 <HAL_GPIO_Init+0xa4>
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d80d      	bhi.n	80018be <HAL_GPIO_Init+0x5a>
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d02b      	beq.n	80018fe <HAL_GPIO_Init+0x9a>
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d804      	bhi.n	80018b4 <HAL_GPIO_Init+0x50>
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d031      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d01c      	beq.n	80018ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b2:	e048      	b.n	8001946 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d043      	beq.n	8001940 <HAL_GPIO_Init+0xdc>
 80018b8:	2b11      	cmp	r3, #17
 80018ba:	d01b      	beq.n	80018f4 <HAL_GPIO_Init+0x90>
          break;
 80018bc:	e043      	b.n	8001946 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018be:	4a89      	ldr	r2, [pc, #548]	; (8001ae4 <HAL_GPIO_Init+0x280>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d026      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018c4:	4a87      	ldr	r2, [pc, #540]	; (8001ae4 <HAL_GPIO_Init+0x280>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d806      	bhi.n	80018d8 <HAL_GPIO_Init+0x74>
 80018ca:	4a87      	ldr	r2, [pc, #540]	; (8001ae8 <HAL_GPIO_Init+0x284>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d020      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018d0:	4a86      	ldr	r2, [pc, #536]	; (8001aec <HAL_GPIO_Init+0x288>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d01d      	beq.n	8001912 <HAL_GPIO_Init+0xae>
          break;
 80018d6:	e036      	b.n	8001946 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018d8:	4a85      	ldr	r2, [pc, #532]	; (8001af0 <HAL_GPIO_Init+0x28c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d019      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018de:	4a85      	ldr	r2, [pc, #532]	; (8001af4 <HAL_GPIO_Init+0x290>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d016      	beq.n	8001912 <HAL_GPIO_Init+0xae>
 80018e4:	4a84      	ldr	r2, [pc, #528]	; (8001af8 <HAL_GPIO_Init+0x294>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0xae>
          break;
 80018ea:	e02c      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e028      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	3304      	adds	r3, #4
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e023      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	3308      	adds	r3, #8
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e01e      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	330c      	adds	r3, #12
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e019      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800191a:	2304      	movs	r3, #4
 800191c:	623b      	str	r3, [r7, #32]
          break;
 800191e:	e012      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001928:	2308      	movs	r3, #8
 800192a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	611a      	str	r2, [r3, #16]
          break;
 8001932:	e008      	b.n	8001946 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001934:	2308      	movs	r3, #8
 8001936:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	615a      	str	r2, [r3, #20]
          break;
 800193e:	e002      	b.n	8001946 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2bff      	cmp	r3, #255	; 0xff
 800194a:	d801      	bhi.n	8001950 <HAL_GPIO_Init+0xec>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	e001      	b.n	8001954 <HAL_GPIO_Init+0xf0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3304      	adds	r3, #4
 8001954:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2bff      	cmp	r3, #255	; 0xff
 800195a:	d802      	bhi.n	8001962 <HAL_GPIO_Init+0xfe>
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	e002      	b.n	8001968 <HAL_GPIO_Init+0x104>
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3b08      	subs	r3, #8
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	210f      	movs	r1, #15
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	401a      	ands	r2, r3
 800197a:	6a39      	ldr	r1, [r7, #32]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	431a      	orrs	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8096 	beq.w	8001ac2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001996:	4b59      	ldr	r3, [pc, #356]	; (8001afc <HAL_GPIO_Init+0x298>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_GPIO_Init+0x298>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <HAL_GPIO_Init+0x298>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ae:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <HAL_GPIO_Init+0x29c>)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_GPIO_Init+0x2a0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0x19e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_GPIO_Init+0x2a4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00d      	beq.n	80019fe <HAL_GPIO_Init+0x19a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <HAL_GPIO_Init+0x2a8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x196>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <HAL_GPIO_Init+0x2ac>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_GPIO_Init+0x192>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x1a0>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e004      	b.n	8001a04 <HAL_GPIO_Init+0x1a0>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_Init+0x1a0>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x1a0>
 8001a02:	2300      	movs	r3, #0
 8001a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a06:	f002 0203 	and.w	r2, r2, #3
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4093      	lsls	r3, r2
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a14:	493a      	ldr	r1, [pc, #232]	; (8001b00 <HAL_GPIO_Init+0x29c>)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4938      	ldr	r1, [pc, #224]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
 8001a3a:	e006      	b.n	8001a4a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4933      	ldr	r1, [pc, #204]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	492e      	ldr	r1, [pc, #184]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
 8001a62:	e006      	b.n	8001a72 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	4929      	ldr	r1, [pc, #164]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	4924      	ldr	r1, [pc, #144]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
 8001a8a:	e006      	b.n	8001a9a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	491f      	ldr	r1, [pc, #124]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d006      	beq.n	8001ab4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	491a      	ldr	r1, [pc, #104]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60cb      	str	r3, [r1, #12]
 8001ab2:	e006      	b.n	8001ac2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	4915      	ldr	r1, [pc, #84]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f aed0 	bne.w	8001878 <HAL_GPIO_Init+0x14>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	372c      	adds	r7, #44	; 0x2c
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	10210000 	.word	0x10210000
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10310000 	.word	0x10310000
 8001af4:	10320000 	.word	0x10320000
 8001af8:	10220000 	.word	0x10220000
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	40011400 	.word	0x40011400
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e11f      	b.n	8001d9a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fb64 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bac:	f002 f890 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8001bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a7b      	ldr	r2, [pc, #492]	; (8001da4 <HAL_I2C_Init+0x25c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d807      	bhi.n	8001bcc <HAL_I2C_Init+0x84>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_I2C_Init+0x260>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e006      	b.n	8001bda <HAL_I2C_Init+0x92>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_I2C_Init+0x264>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf94      	ite	ls
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	2300      	movhi	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0db      	b.n	8001d9a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4a72      	ldr	r2, [pc, #456]	; (8001db0 <HAL_I2C_Init+0x268>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0c9b      	lsrs	r3, r3, #18
 8001bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a64      	ldr	r2, [pc, #400]	; (8001da4 <HAL_I2C_Init+0x25c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d802      	bhi.n	8001c1c <HAL_I2C_Init+0xd4>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	e009      	b.n	8001c30 <HAL_I2C_Init+0xe8>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	4a63      	ldr	r2, [pc, #396]	; (8001db4 <HAL_I2C_Init+0x26c>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	3301      	adds	r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4956      	ldr	r1, [pc, #344]	; (8001da4 <HAL_I2C_Init+0x25c>)
 8001c4c:	428b      	cmp	r3, r1
 8001c4e:	d80d      	bhi.n	8001c6c <HAL_I2C_Init+0x124>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e59      	subs	r1, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	bf38      	it	cc
 8001c68:	2304      	movcc	r3, #4
 8001c6a:	e04f      	b.n	8001d0c <HAL_I2C_Init+0x1c4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d111      	bne.n	8001c98 <HAL_I2C_Init+0x150>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1e58      	subs	r0, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e012      	b.n	8001cbe <HAL_I2C_Init+0x176>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	0099      	lsls	r1, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_Init+0x17e>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e022      	b.n	8001d0c <HAL_I2C_Init+0x1c4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10e      	bne.n	8001cec <HAL_I2C_Init+0x1a4>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1e58      	subs	r0, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cea:	e00f      	b.n	8001d0c <HAL_I2C_Init+0x1c4>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	0099      	lsls	r1, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	6809      	ldr	r1, [r1, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6911      	ldr	r1, [r2, #16]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68d2      	ldr	r2, [r2, #12]
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	000186a0 	.word	0x000186a0
 8001da8:	001e847f 	.word	0x001e847f
 8001dac:	003d08ff 	.word	0x003d08ff
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	10624dd3 	.word	0x10624dd3

08001db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dba:	b08b      	sub	sp, #44	; 0x2c
 8001dbc:	af06      	add	r7, sp, #24
 8001dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0fd      	b.n	8001fc6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f006 feb0 	bl	8008b44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2203      	movs	r2, #3
 8001de8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 f887 	bl	8004f04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	687e      	ldr	r6, [r7, #4]
 8001dfe:	466d      	mov	r5, sp
 8001e00:	f106 0410 	add.w	r4, r6, #16
 8001e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	602b      	str	r3, [r5, #0]
 8001e0c:	1d33      	adds	r3, r6, #4
 8001e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e10:	6838      	ldr	r0, [r7, #0]
 8001e12:	f003 f851 	bl	8004eb8 <USB_CoreInit>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0ce      	b.n	8001fc6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 f882 	bl	8004f38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e04c      	b.n	8001ed4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	b298      	uxth	r0, r3
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	3336      	adds	r3, #54	; 0x36
 8001e78:	4602      	mov	r2, r0
 8001e7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3338      	adds	r3, #56	; 0x38
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	333c      	adds	r3, #60	; 0x3c
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3340      	adds	r3, #64	; 0x40
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d3ad      	bcc.n	8001e3a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	e044      	b.n	8001f6e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3b5      	bcc.n	8001ee4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	687e      	ldr	r6, [r7, #4]
 8001f80:	466d      	mov	r5, sp
 8001f82:	f106 0410 	add.w	r4, r6, #16
 8001f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	602b      	str	r3, [r5, #0]
 8001f8e:	1d33      	adds	r3, r6, #4
 8001f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f002 ffdc 	bl	8004f50 <USB_DevInit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00d      	b.n	8001fc6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 ff76 	bl	8006eb0 <USB_DevDisconnect>

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_Start+0x16>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e016      	b.n	8002012 <HAL_PCD_Start+0x44>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f002 ff71 	bl	8004ed8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f007 f832 	bl	8009062 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f004 ff4a 	bl	8006e9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_PCD_Stop+0x16>
 800202c:	2302      	movs	r3, #2
 800202e:	e016      	b.n	800205e <HAL_PCD_Stop+0x44>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f002 ff61 	bl	8004f04 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8002042:	2100      	movs	r1, #0
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f007 f80c 	bl	8009062 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f004 ff2e 	bl	8006eb0 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b088      	sub	sp, #32
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f004 ff26 	bl	8006ec4 <USB_ReadInterrupts>
 8002078:	4603      	mov	r3, r0
 800207a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800207e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002082:	d102      	bne.n	800208a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fb61 	bl	800274c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f004 ff18 	bl	8006ec4 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d112      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b2:	b292      	uxth	r2, r2
 80020b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f006 fdbe 	bl	8008c3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020be:	2100      	movs	r1, #0
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f925 	bl	8002310 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 fefa 	bl	8006ec4 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020da:	d10b      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020ee:	b292      	uxth	r2, r2
 80020f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f004 fee3 	bl	8006ec4 <USB_ReadInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002108:	d10b      	bne.n	8002122 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800211c:	b292      	uxth	r2, r2
 800211e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fecc 	bl	8006ec4 <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002136:	d126      	bne.n	8002186 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0204 	bic.w	r2, r2, #4
 800214a:	b292      	uxth	r2, r2
 800214c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0208 	bic.w	r2, r2, #8
 8002162:	b292      	uxth	r2, r2
 8002164:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f006 fd9f 	bl	8008cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002176:	b29a      	uxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002180:	b292      	uxth	r2, r2
 8002182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f004 fe9a 	bl	8006ec4 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800219a:	f040 8084 	bne.w	80022a6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	77fb      	strb	r3, [r7, #31]
 80021a2:	e011      	b.n	80021c8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	7ffb      	ldrb	r3, [r7, #31]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	441a      	add	r2, r3
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	8812      	ldrh	r2, [r2, #0]
 80021b4:	b292      	uxth	r2, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	f107 0120 	add.w	r1, r7, #32
 80021bc:	440b      	add	r3, r1
 80021be:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	3301      	adds	r3, #1
 80021c6:	77fb      	strb	r3, [r7, #31]
 80021c8:	7ffb      	ldrb	r3, [r7, #31]
 80021ca:	2b07      	cmp	r3, #7
 80021cc:	d9ea      	bls.n	80021a4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	b292      	uxth	r2, r2
 80021e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	b292      	uxth	r2, r2
 80021fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80021fe:	bf00      	nop
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002208:	b29b      	uxth	r3, r3
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f6      	beq.n	8002200 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002224:	b292      	uxth	r2, r2
 8002226:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	77fb      	strb	r3, [r7, #31]
 800222e:	e010      	b.n	8002252 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002230:	7ffb      	ldrb	r3, [r7, #31]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	4611      	mov	r1, r2
 8002238:	7ffa      	ldrb	r2, [r7, #31]
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	440a      	add	r2, r1
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	f107 0120 	add.w	r1, r7, #32
 8002244:	440b      	add	r3, r1
 8002246:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800224a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800224c:	7ffb      	ldrb	r3, [r7, #31]
 800224e:	3301      	adds	r3, #1
 8002250:	77fb      	strb	r3, [r7, #31]
 8002252:	7ffb      	ldrb	r3, [r7, #31]
 8002254:	2b07      	cmp	r3, #7
 8002256:	d9eb      	bls.n	8002230 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0208 	orr.w	r2, r2, #8
 800226a:	b292      	uxth	r2, r2
 800226c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002278:	b29a      	uxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002282:	b292      	uxth	r2, r2
 8002284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002290:	b29a      	uxth	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0204 	orr.w	r2, r2, #4
 800229a:	b292      	uxth	r2, r2
 800229c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f006 fce9 	bl	8008c78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 fe0a 	bl	8006ec4 <USB_ReadInterrupts>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ba:	d10e      	bne.n	80022da <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022ce:	b292      	uxth	r2, r2
 80022d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f006 fca2 	bl	8008c1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 fdf0 	bl	8006ec4 <USB_ReadInterrupts>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ee:	d10b      	bne.n	8002308 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002302:	b292      	uxth	r2, r2
 8002304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002308:	bf00      	nop
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_PCD_SetAddress+0x1a>
 8002326:	2302      	movs	r3, #2
 8002328:	e013      	b.n	8002352 <HAL_PCD_SetAddress+0x42>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f004 fd97 	bl	8006e76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	461a      	mov	r2, r3
 8002368:	4603      	mov	r3, r0
 800236a:	70fb      	strb	r3, [r7, #3]
 800236c:	460b      	mov	r3, r1
 800236e:	803b      	strh	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da0e      	bge.n	800239e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	705a      	strb	r2, [r3, #1]
 800239c:	e00e      	b.n	80023bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 0207 	and.w	r2, r3, #7
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023c8:	883a      	ldrh	r2, [r7, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	78ba      	ldrb	r2, [r7, #2]
 80023d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	785b      	ldrb	r3, [r3, #1]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023e6:	78bb      	ldrb	r3, [r7, #2]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d102      	bne.n	80023f2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_EP_Open+0xa6>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e00e      	b.n	800241e <HAL_PCD_EP_Open+0xc4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	4618      	mov	r0, r3
 8002410:	f002 fdbe 	bl	8004f90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800241c:	7afb      	ldrb	r3, [r7, #11]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da0e      	bge.n	8002458 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	705a      	strb	r2, [r3, #1]
 8002456:	e00e      	b.n	8002476 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 0207 	and.w	r2, r3, #7
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_EP_Close+0x6a>
 800248c:	2302      	movs	r3, #2
 800248e:	e00e      	b.n	80024ae <HAL_PCD_EP_Close+0x88>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 f8e0 	bl	8005664 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	460b      	mov	r3, r1
 80024c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	f003 0207 	and.w	r2, r3, #7
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2200      	movs	r2, #0
 80024f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6979      	ldr	r1, [r7, #20]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fa92 	bl	8005a3c <USB_EPStartXfer>
 8002518:	e005      	b.n	8002526 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6979      	ldr	r1, [r7, #20]
 8002520:	4618      	mov	r0, r3
 8002522:	f003 fa8b 	bl	8005a3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 0207 	and.w	r2, r3, #7
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	460b      	mov	r3, r1
 800256c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800256e:	7afb      	ldrb	r3, [r7, #11]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2200      	movs	r2, #0
 80025a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2201      	movs	r2, #1
 80025a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025b6:	7afb      	ldrb	r3, [r7, #11]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d106      	bne.n	80025ce <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6979      	ldr	r1, [r7, #20]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fa38 	bl	8005a3c <USB_EPStartXfer>
 80025cc:	e005      	b.n	80025da <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6979      	ldr	r1, [r7, #20]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 fa31 	bl	8005a3c <USB_EPStartXfer>
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 0207 	and.w	r2, r3, #7
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d901      	bls.n	8002602 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e04c      	b.n	800269c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002606:	2b00      	cmp	r3, #0
 8002608:	da0e      	bge.n	8002628 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	705a      	strb	r2, [r3, #1]
 8002626:	e00c      	b.n	8002642 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_PCD_EP_SetStall+0x7e>
 800265e:	2302      	movs	r3, #2
 8002660:	e01c      	b.n	800269c <HAL_PCD_EP_SetStall+0xb8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68f9      	ldr	r1, [r7, #12]
 8002670:	4618      	mov	r0, r3
 8002672:	f004 fb03 	bl	8006c7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	2b00      	cmp	r3, #0
 800267e:	d108      	bne.n	8002692 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f004 fc28 	bl	8006ee2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 020f 	and.w	r2, r3, #15
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d901      	bls.n	80026c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e040      	b.n	8002744 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da0e      	bge.n	80026e8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	705a      	strb	r2, [r3, #1]
 80026e6:	e00e      	b.n	8002706 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	f003 0207 	and.w	r2, r3, #7
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_PCD_EP_ClrStall+0x82>
 8002722:	2302      	movs	r3, #2
 8002724:	e00e      	b.n	8002744 <HAL_PCD_EP_ClrStall+0xa0>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68f9      	ldr	r1, [r7, #12]
 8002734:	4618      	mov	r0, r3
 8002736:	f004 faf1 	bl	8006d1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002754:	e2df      	b.n	8002d16 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800275e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002760:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800276c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 8158 	bne.w	8002a26 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002776:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	d152      	bne.n	8002826 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800278c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002790:	81fb      	strh	r3, [r7, #14]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	89fb      	ldrh	r3, [r7, #14]
 8002798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3328      	adds	r3, #40	; 0x28
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	3302      	adds	r3, #2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	441a      	add	r2, r3
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027e4:	2100      	movs	r1, #0
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f006 f9ff 	bl	8008bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 828e 	beq.w	8002d16 <PCD_EP_ISR_Handler+0x5ca>
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 8289 	bne.w	8002d16 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002810:	b2da      	uxtb	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b292      	uxth	r2, r2
 8002818:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002824:	e277      	b.n	8002d16 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002836:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283c:	2b00      	cmp	r3, #0
 800283e:	d034      	beq.n	80028aa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002848:	b29b      	uxth	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	3306      	adds	r3, #6
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800287e:	b29b      	uxth	r3, r3
 8002880:	f004 fb7e 	bl	8006f80 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29a      	uxth	r2, r3
 800288c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002890:	4013      	ands	r3, r2
 8002892:	823b      	strh	r3, [r7, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	8a3a      	ldrh	r2, [r7, #16]
 800289a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800289e:	b292      	uxth	r2, r2
 80028a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f006 f974 	bl	8008b90 <HAL_PCD_SetupStageCallback>
 80028a8:	e235      	b.n	8002d16 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028aa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f280 8231 	bge.w	8002d16 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028c0:	4013      	ands	r3, r2
 80028c2:	83bb      	strh	r3, [r7, #28]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	8bba      	ldrh	r2, [r7, #28]
 80028ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028ce:	b292      	uxth	r2, r2
 80028d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	3306      	adds	r3, #6
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d019      	beq.n	800293a <PCD_EP_ISR_Handler+0x1ee>
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d015      	beq.n	800293a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	6959      	ldr	r1, [r3, #20]
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800291e:	b29b      	uxth	r3, r3
 8002920:	f004 fb2e 	bl	8006f80 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	441a      	add	r2, r3
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002932:	2100      	movs	r1, #0
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f006 f93d 	bl	8008bb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d112      	bne.n	8002988 <PCD_EP_ISR_Handler+0x23c>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800296c:	b29a      	uxth	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002980:	b29a      	uxth	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	801a      	strh	r2, [r3, #0]
 8002986:	e02f      	b.n	80029e8 <PCD_EP_ISR_Handler+0x29c>
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b3e      	cmp	r3, #62	; 0x3e
 800298e:	d813      	bhi.n	80029b8 <PCD_EP_ISR_Handler+0x26c>
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <PCD_EP_ISR_Handler+0x25e>
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	3301      	adds	r3, #1
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	029b      	lsls	r3, r3, #10
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	801a      	strh	r2, [r3, #0]
 80029b6:	e017      	b.n	80029e8 <PCD_EP_ISR_Handler+0x29c>
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <PCD_EP_ISR_Handler+0x286>
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	3b01      	subs	r3, #1
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	029b      	lsls	r3, r3, #10
 80029d8:	b29b      	uxth	r3, r3
 80029da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f8:	827b      	strh	r3, [r7, #18]
 80029fa:	8a7b      	ldrh	r3, [r7, #18]
 80029fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a00:	827b      	strh	r3, [r7, #18]
 8002a02:	8a7b      	ldrh	r3, [r7, #18]
 8002a04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a08:	827b      	strh	r3, [r7, #18]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	8a7b      	ldrh	r3, [r7, #18]
 8002a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	8013      	strh	r3, [r2, #0]
 8002a24:	e177      	b.n	8002d16 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f280 80ea 	bge.w	8002c16 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a58:	4013      	ands	r3, r2
 8002a5a:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a70:	b292      	uxth	r2, r2
 8002a72:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a74:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	7b1b      	ldrb	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d122      	bne.n	8002ad8 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3306      	adds	r3, #6
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aba:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002abc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8087 	beq.w	8002bd2 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	6959      	ldr	r1, [r3, #20]
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	88da      	ldrh	r2, [r3, #6]
 8002ad0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ad2:	f004 fa55 	bl	8006f80 <USB_ReadPMA>
 8002ad6:	e07c      	b.n	8002bd2 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	78db      	ldrb	r3, [r3, #3]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d108      	bne.n	8002af2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ae0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f923 	bl	8002d32 <HAL_PCD_EP_DB_Receive>
 8002aec:	4603      	mov	r3, r0
 8002aee:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002af0:	e06f      	b.n	8002bd2 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	441a      	add	r2, r3
 8002b1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d021      	beq.n	8002b90 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3302      	adds	r3, #2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b74:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02a      	beq.n	8002bd2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	6959      	ldr	r1, [r3, #20]
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	891a      	ldrh	r2, [r3, #8]
 8002b88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b8a:	f004 f9f9 	bl	8006f80 <USB_ReadPMA>
 8002b8e:	e020      	b.n	8002bd2 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3306      	adds	r3, #6
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002bba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	6959      	ldr	r1, [r3, #20]
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	895a      	ldrh	r2, [r3, #10]
 8002bcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bce:	f004 f9d7 	bl	8006f80 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bd8:	441a      	add	r2, r3
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002be4:	441a      	add	r2, r3
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d004      	beq.n	8002bfc <PCD_EP_ISR_Handler+0x4b0>
 8002bf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d206      	bcs.n	8002c0a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f005 ffd6 	bl	8008bb4 <HAL_PCD_DataOutStageCallback>
 8002c08:	e005      	b.n	8002c16 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 ff13 	bl	8005a3c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d07a      	beq.n	8002d16 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	843b      	strh	r3, [r7, #32]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	441a      	add	r2, r3
 8002c5e:	8c3b      	ldrh	r3, [r7, #32]
 8002c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	78db      	ldrb	r3, [r3, #3]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d108      	bne.n	8002c86 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d146      	bne.n	8002d0a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d141      	bne.n	8002d0a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cae:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	8bfb      	ldrh	r3, [r7, #30]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d906      	bls.n	8002cc8 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	8bfb      	ldrh	r3, [r7, #30]
 8002cc0:	1ad2      	subs	r2, r2, r3
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	619a      	str	r2, [r3, #24]
 8002cc6:	e002      	b.n	8002cce <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f005 ff84 	bl	8008bea <HAL_PCD_DataInStageCallback>
 8002ce2:	e018      	b.n	8002d16 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	8bfb      	ldrh	r3, [r7, #30]
 8002cea:	441a      	add	r2, r3
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	8bfb      	ldrh	r3, [r7, #30]
 8002cf6:	441a      	add	r2, r3
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fe9a 	bl	8005a3c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002d08:	e005      	b.n	8002d16 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f91b 	bl	8002f4c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f6ff ad17 	blt.w	8002756 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3738      	adds	r7, #56	; 0x38
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b088      	sub	sp, #32
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d07e      	beq.n	8002e48 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	8b7b      	ldrh	r3, [r7, #26]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d306      	bcc.n	8002d8c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	8b7b      	ldrh	r3, [r7, #26]
 8002d84:	1ad2      	subs	r2, r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	619a      	str	r2, [r3, #24]
 8002d8a:	e002      	b.n	8002d92 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d123      	bne.n	8002de2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db4:	833b      	strh	r3, [r7, #24]
 8002db6:	8b3b      	ldrh	r3, [r7, #24]
 8002db8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dbc:	833b      	strh	r3, [r7, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	441a      	add	r2, r3
 8002dcc:	8b3b      	ldrh	r3, [r7, #24]
 8002dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01f      	beq.n	8002e2c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	82fb      	strh	r3, [r7, #22]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	8afb      	ldrh	r3, [r7, #22]
 8002e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e2c:	8b7b      	ldrh	r3, [r7, #26]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8087 	beq.w	8002f42 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	6959      	ldr	r1, [r3, #20]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	891a      	ldrh	r2, [r3, #8]
 8002e40:	8b7b      	ldrh	r3, [r7, #26]
 8002e42:	f004 f89d 	bl	8006f80 <USB_ReadPMA>
 8002e46:	e07c      	b.n	8002f42 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3306      	adds	r3, #6
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	8b7b      	ldrh	r3, [r7, #26]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d306      	bcc.n	8002e8a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	8b7b      	ldrh	r3, [r7, #26]
 8002e82:	1ad2      	subs	r2, r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	619a      	str	r2, [r3, #24]
 8002e88:	e002      	b.n	8002e90 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d123      	bne.n	8002ee0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	83fb      	strh	r3, [r7, #30]
 8002eb4:	8bfb      	ldrh	r3, [r7, #30]
 8002eb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eba:	83fb      	strh	r3, [r7, #30]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	8bfb      	ldrh	r3, [r7, #30]
 8002ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d11f      	bne.n	8002f2a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f04:	83bb      	strh	r3, [r7, #28]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	441a      	add	r2, r3
 8002f14:	8bbb      	ldrh	r3, [r7, #28]
 8002f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f2a:	8b7b      	ldrh	r3, [r7, #26]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6959      	ldr	r1, [r3, #20]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	895a      	ldrh	r2, [r3, #10]
 8002f3c:	8b7b      	ldrh	r3, [r7, #26]
 8002f3e:	f004 f81f 	bl	8006f80 <USB_ReadPMA>
    }
  }

  return count;
 8002f42:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b092      	sub	sp, #72	; 0x48
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8132 	beq.w	80031ca <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	699a      	ldr	r2, [r3, #24]
 8002f94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d906      	bls.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fa0:	1ad2      	subs	r2, r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	619a      	str	r2, [r3, #24]
 8002fa6:	e002      	b.n	8002fae <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2200      	movs	r2, #0
 8002fac:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d12c      	bne.n	8003010 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f005 fe14 	bl	8008bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 822f 	beq.w	800342c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe8:	827b      	strh	r3, [r7, #18]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	441a      	add	r2, r3
 8002ff8:	8a7b      	ldrh	r3, [r7, #18]
 8002ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300a:	b29b      	uxth	r3, r3
 800300c:	8013      	strh	r3, [r2, #0]
 800300e:	e20d      	b.n	800342c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01f      	beq.n	800305a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003034:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	441a      	add	r2, r3
 8003044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800304a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800304e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003056:	b29b      	uxth	r3, r3
 8003058:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003060:	2b01      	cmp	r3, #1
 8003062:	f040 81e3 	bne.w	800342c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800306c:	441a      	add	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003078:	441a      	add	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6a1a      	ldr	r2, [r3, #32]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	429a      	cmp	r2, r3
 8003088:	d309      	bcc.n	800309e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	621a      	str	r2, [r3, #32]
 800309c:	e014      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80030a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030a8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030b2:	e009      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2200      	movs	r2, #0
 80030c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d155      	bne.n	800317c <HAL_PCD_EP_DB_Transmit+0x230>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4413      	add	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	011a      	lsls	r2, r3, #4
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4413      	add	r3, r2
 80030f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d112      	bne.n	8003124 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003108:	b29a      	uxth	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311c:	b29a      	uxth	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	e047      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x268>
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	2b3e      	cmp	r3, #62	; 0x3e
 8003128:	d811      	bhi.n	800314e <HAL_PCD_EP_DB_Transmit+0x202>
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	3301      	adds	r3, #1
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	b29b      	uxth	r3, r3
 8003144:	029b      	lsls	r3, r3, #10
 8003146:	b29a      	uxth	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	801a      	strh	r2, [r3, #0]
 800314c:	e032      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x268>
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2b00      	cmp	r3, #0
 800315c:	d102      	bne.n	8003164 <HAL_PCD_EP_DB_Transmit+0x218>
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	b29b      	uxth	r3, r3
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	b29b      	uxth	r3, r3
 800316c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003174:	b29a      	uxth	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	e01b      	b.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x268>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	785b      	ldrb	r3, [r3, #1]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d117      	bne.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x268>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	4413      	add	r3, r2
 800319a:	623b      	str	r3, [r7, #32]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	011a      	lsls	r2, r3, #4
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	4413      	add	r3, r2
 80031a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6959      	ldr	r1, [r3, #20]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	891a      	ldrh	r2, [r3, #8]
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f003 fe98 	bl	8006ef8 <USB_WritePMA>
 80031c8:	e130      	b.n	800342c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	3306      	adds	r3, #6
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031f2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	699a      	ldr	r2, [r3, #24]
 80031f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d306      	bcc.n	800320c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003204:	1ad2      	subs	r2, r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	619a      	str	r2, [r3, #24]
 800320a:	e002      	b.n	8003212 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2200      	movs	r2, #0
 8003210:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d12c      	bne.n	8003274 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	4619      	mov	r1, r3
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f005 fce2 	bl	8008bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 80fd 	bne.w	800342c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	441a      	add	r2, r3
 800325c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800325e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800326a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326e:	b29b      	uxth	r3, r3
 8003270:	8013      	strh	r3, [r2, #0]
 8003272:	e0db      	b.n	800342c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11f      	bne.n	80032be <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003298:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 80b1 	bne.w	800342c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032d0:	441a      	add	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032dc:	441a      	add	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d309      	bcc.n	8003302 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fa:	1ad2      	subs	r2, r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	621a      	str	r2, [r3, #32]
 8003300:	e014      	b.n	800332c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800330a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800330c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003316:	e009      	b.n	800332c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2200      	movs	r2, #0
 8003322:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d155      	bne.n	80033e6 <HAL_PCD_EP_DB_Transmit+0x49a>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	647b      	str	r3, [r7, #68]	; 0x44
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003348:	b29b      	uxth	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334e:	4413      	add	r3, r2
 8003350:	647b      	str	r3, [r7, #68]	; 0x44
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	011a      	lsls	r2, r3, #4
 8003358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335a:	4413      	add	r3, r2
 800335c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	d112      	bne.n	800338e <HAL_PCD_EP_DB_Transmit+0x442>
 8003368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003372:	b29a      	uxth	r2, r3
 8003374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003386:	b29a      	uxth	r2, r3
 8003388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	e044      	b.n	8003418 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b3e      	cmp	r3, #62	; 0x3e
 8003392:	d811      	bhi.n	80033b8 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_PCD_EP_DB_Transmit+0x45e>
 80033a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a6:	3301      	adds	r3, #1
 80033a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	029b      	lsls	r3, r3, #10
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	e02f      	b.n	8003418 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_PCD_EP_DB_Transmit+0x482>
 80033c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ca:	3b01      	subs	r3, #1
 80033cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	029b      	lsls	r3, r3, #10
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033de:	b29a      	uxth	r2, r3
 80033e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e2:	801a      	strh	r2, [r3, #0]
 80033e4:	e018      	b.n	8003418 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	785b      	ldrb	r3, [r3, #1]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d114      	bne.n	8003418 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	4413      	add	r3, r2
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	011a      	lsls	r2, r3, #4
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003408:	4413      	add	r3, r2
 800340a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	b29a      	uxth	r2, r3
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	6959      	ldr	r1, [r3, #20]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	895a      	ldrh	r2, [r3, #10]
 8003424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003426:	b29b      	uxth	r3, r3
 8003428:	f003 fd66 	bl	8006ef8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003446:	823b      	strh	r3, [r7, #16]
 8003448:	8a3b      	ldrh	r3, [r7, #16]
 800344a:	f083 0310 	eor.w	r3, r3, #16
 800344e:	823b      	strh	r3, [r7, #16]
 8003450:	8a3b      	ldrh	r3, [r7, #16]
 8003452:	f083 0320 	eor.w	r3, r3, #32
 8003456:	823b      	strh	r3, [r7, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	441a      	add	r2, r3
 8003466:	8a3b      	ldrh	r3, [r7, #16]
 8003468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003478:	b29b      	uxth	r3, r3
 800347a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3748      	adds	r7, #72	; 0x48
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003486:	b480      	push	{r7}
 8003488:	b087      	sub	sp, #28
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	817b      	strh	r3, [r7, #10]
 8003494:	4613      	mov	r3, r2
 8003496:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003498:	897b      	ldrh	r3, [r7, #10]
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00b      	beq.n	80034bc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	897b      	ldrh	r3, [r7, #10]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e009      	b.n	80034d0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034bc:	897a      	ldrh	r2, [r7, #10]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034d0:	893b      	ldrh	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	80da      	strh	r2, [r3, #6]
 80034e4:	e00b      	b.n	80034fe <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2201      	movs	r2, #1
 80034ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	0c1b      	lsrs	r3, r3, #16
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
	...

0800350c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	420e0020 	.word	0x420e0020

08003524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e26c      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8087 	beq.w	8003652 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003544:	4b92      	ldr	r3, [pc, #584]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b04      	cmp	r3, #4
 800354e:	d00c      	beq.n	800356a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003550:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d112      	bne.n	8003582 <HAL_RCC_OscConfig+0x5e>
 800355c:	4b8c      	ldr	r3, [pc, #560]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d10b      	bne.n	8003582 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356a:	4b89      	ldr	r3, [pc, #548]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d06c      	beq.n	8003650 <HAL_RCC_OscConfig+0x12c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d168      	bne.n	8003650 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e246      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358a:	d106      	bne.n	800359a <HAL_RCC_OscConfig+0x76>
 800358c:	4b80      	ldr	r3, [pc, #512]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a7f      	ldr	r2, [pc, #508]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e02e      	b.n	80035f8 <HAL_RCC_OscConfig+0xd4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x98>
 80035a2:	4b7b      	ldr	r3, [pc, #492]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7a      	ldr	r2, [pc, #488]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b78      	ldr	r3, [pc, #480]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a77      	ldr	r2, [pc, #476]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e01d      	b.n	80035f8 <HAL_RCC_OscConfig+0xd4>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0xbc>
 80035c6:	4b72      	ldr	r3, [pc, #456]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a71      	ldr	r2, [pc, #452]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b6f      	ldr	r3, [pc, #444]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6e      	ldr	r2, [pc, #440]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0xd4>
 80035e0:	4b6b      	ldr	r3, [pc, #428]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6a      	ldr	r2, [pc, #424]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b68      	ldr	r3, [pc, #416]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a67      	ldr	r2, [pc, #412]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fd ffe8 	bl	80015d4 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003608:	f7fd ffe4 	bl	80015d4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1fa      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	4b5d      	ldr	r3, [pc, #372]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0xe4>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fd ffd4 	bl	80015d4 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7fd ffd0 	bl	80015d4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e1e6      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	4b53      	ldr	r3, [pc, #332]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x10c>
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d063      	beq.n	8003726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800365e:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800366a:	4b49      	ldr	r3, [pc, #292]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b08      	cmp	r3, #8
 8003674:	d11c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x18c>
 8003676:	4b46      	ldr	r3, [pc, #280]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d116      	bne.n	80036b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_RCC_OscConfig+0x176>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e1ba      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4939      	ldr	r1, [pc, #228]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	e03a      	b.n	8003726 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fd ff89 	bl	80015d4 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c6:	f7fd ff85 	bl	80015d4 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e19b      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	4b2d      	ldr	r3, [pc, #180]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4927      	ldr	r1, [pc, #156]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]
 80036f8:	e015      	b.n	8003726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fd ff68 	bl	80015d4 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003708:	f7fd ff64 	bl	80015d4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e17a      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d03a      	beq.n	80037a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d019      	beq.n	800376e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	4b17      	ldr	r3, [pc, #92]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fd ff48 	bl	80015d4 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003748:	f7fd ff44 	bl	80015d4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e15a      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003766:	2001      	movs	r0, #1
 8003768:	f000 fada 	bl	8003d20 <RCC_Delay>
 800376c:	e01c      	b.n	80037a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003774:	f7fd ff2e 	bl	80015d4 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377a:	e00f      	b.n	800379c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fd ff2a 	bl	80015d4 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d908      	bls.n	800379c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e140      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	42420000 	.word	0x42420000
 8003798:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	4b9e      	ldr	r3, [pc, #632]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e9      	bne.n	800377c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a6 	beq.w	8003902 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ba:	4b97      	ldr	r3, [pc, #604]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	4b94      	ldr	r3, [pc, #592]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	4a93      	ldr	r2, [pc, #588]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80037cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d0:	61d3      	str	r3, [r2, #28]
 80037d2:	4b91      	ldr	r3, [pc, #580]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e2:	4b8e      	ldr	r3, [pc, #568]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d118      	bne.n	8003820 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ee:	4b8b      	ldr	r3, [pc, #556]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a8a      	ldr	r2, [pc, #552]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fa:	f7fd feeb 	bl	80015d4 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003802:	f7fd fee7 	bl	80015d4 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b64      	cmp	r3, #100	; 0x64
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0fd      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003814:	4b81      	ldr	r3, [pc, #516]	; (8003a1c <HAL_RCC_OscConfig+0x4f8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d106      	bne.n	8003836 <HAL_RCC_OscConfig+0x312>
 8003828:	4b7b      	ldr	r3, [pc, #492]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4a7a      	ldr	r2, [pc, #488]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6213      	str	r3, [r2, #32]
 8003834:	e02d      	b.n	8003892 <HAL_RCC_OscConfig+0x36e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0x334>
 800383e:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4a75      	ldr	r2, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	6213      	str	r3, [r2, #32]
 800384a:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a72      	ldr	r2, [pc, #456]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	6213      	str	r3, [r2, #32]
 8003856:	e01c      	b.n	8003892 <HAL_RCC_OscConfig+0x36e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b05      	cmp	r3, #5
 800385e:	d10c      	bne.n	800387a <HAL_RCC_OscConfig+0x356>
 8003860:	4b6d      	ldr	r3, [pc, #436]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4a6c      	ldr	r2, [pc, #432]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	6213      	str	r3, [r2, #32]
 800386c:	4b6a      	ldr	r3, [pc, #424]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4a69      	ldr	r2, [pc, #420]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6213      	str	r3, [r2, #32]
 8003878:	e00b      	b.n	8003892 <HAL_RCC_OscConfig+0x36e>
 800387a:	4b67      	ldr	r3, [pc, #412]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a66      	ldr	r2, [pc, #408]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6213      	str	r3, [r2, #32]
 8003886:	4b64      	ldr	r3, [pc, #400]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a63      	ldr	r2, [pc, #396]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d015      	beq.n	80038c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389a:	f7fd fe9b 	bl	80015d4 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fd fe97 	bl	80015d4 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e0ab      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	4b57      	ldr	r3, [pc, #348]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ee      	beq.n	80038a2 <HAL_RCC_OscConfig+0x37e>
 80038c4:	e014      	b.n	80038f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fd fe85 	bl	80015d4 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fd fe81 	bl	80015d4 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e095      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e4:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ee      	bne.n	80038ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d105      	bne.n	8003902 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f6:	4b48      	ldr	r3, [pc, #288]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	4a47      	ldr	r2, [pc, #284]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003900:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8081 	beq.w	8003a0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800390c:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b08      	cmp	r3, #8
 8003916:	d061      	beq.n	80039dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d146      	bne.n	80039ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003920:	4b3f      	ldr	r3, [pc, #252]	; (8003a20 <HAL_RCC_OscConfig+0x4fc>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fd fe55 	bl	80015d4 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7fd fe51 	bl	80015d4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e067      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003940:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d108      	bne.n	8003968 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003956:	4b30      	ldr	r3, [pc, #192]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	492d      	ldr	r1, [pc, #180]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a19      	ldr	r1, [r3, #32]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	430b      	orrs	r3, r1
 800397a:	4927      	ldr	r1, [pc, #156]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_OscConfig+0x4fc>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003986:	f7fd fe25 	bl	80015d4 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fd fe21 	bl	80015d4 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e037      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x46a>
 80039ac:	e02f      	b.n	8003a0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <HAL_RCC_OscConfig+0x4fc>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fd fe0e 	bl	80015d4 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fe0a 	bl	80015d4 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e020      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x498>
 80039da:	e018      	b.n	8003a0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e013      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_OscConfig+0x4f4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42420060 	.word	0x42420060

08003a24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0d0      	b.n	8003bda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a38:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d910      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b67      	ldr	r3, [pc, #412]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 0207 	bic.w	r2, r3, #7
 8003a4e:	4965      	ldr	r1, [pc, #404]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b63      	ldr	r3, [pc, #396]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0b8      	b.n	8003bda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d020      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a58      	ldr	r2, [pc, #352]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a98:	4b53      	ldr	r3, [pc, #332]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a52      	ldr	r2, [pc, #328]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003aa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa4:	4b50      	ldr	r3, [pc, #320]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	494d      	ldr	r1, [pc, #308]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d040      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d107      	bne.n	8003ada <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d115      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e07f      	b.n	8003bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae2:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e073      	b.n	8003bda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af2:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e06b      	b.n	8003bda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b02:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f023 0203 	bic.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4936      	ldr	r1, [pc, #216]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b14:	f7fd fd5e 	bl	80015d4 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1c:	f7fd fd5a 	bl	80015d4 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e053      	b.n	8003bda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 020c 	and.w	r2, r3, #12
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d1eb      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b44:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d210      	bcs.n	8003b74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 0207 	bic.w	r2, r3, #7
 8003b5a:	4922      	ldr	r1, [pc, #136]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e032      	b.n	8003bda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4916      	ldr	r1, [pc, #88]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	490e      	ldr	r1, [pc, #56]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bb2:	f000 f821 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <HAL_RCC_ClockConfig+0x1c8>)
 8003bc4:	5cd3      	ldrb	r3, [r2, r3]
 8003bc6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bca:	4a09      	ldr	r2, [pc, #36]	; (8003bf0 <HAL_RCC_ClockConfig+0x1cc>)
 8003bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_RCC_ClockConfig+0x1d0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd fcbc 	bl	8001550 <HAL_InitTick>

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40022000 	.word	0x40022000
 8003be8:	40021000 	.word	0x40021000
 8003bec:	0800ac24 	.word	0x0800ac24
 8003bf0:	20000004 	.word	0x20000004
 8003bf4:	20000008 	.word	0x20000008

08003bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf8:	b490      	push	{r4, r7}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c00:	1d3c      	adds	r4, r7, #4
 8003c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c08:	4b28      	ldr	r3, [pc, #160]	; (8003cac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	2300      	movs	r3, #0
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c22:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d002      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x40>
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x46>
 8003c36:	e02d      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c3a:	623b      	str	r3, [r7, #32]
      break;
 8003c3c:	e02d      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	0c9b      	lsrs	r3, r3, #18
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	0c5b      	lsrs	r3, r3, #17
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4a0f      	ldr	r2, [pc, #60]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c76:	fb02 f203 	mul.w	r2, r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	e004      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c88:	fb02 f303 	mul.w	r3, r2, r3
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	623b      	str	r3, [r7, #32]
      break;
 8003c92:	e002      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c94:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c96:	623b      	str	r3, [r7, #32]
      break;
 8003c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3728      	adds	r7, #40	; 0x28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc90      	pop	{r4, r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	0800abc0 	.word	0x0800abc0
 8003cac:	0800abd0 	.word	0x0800abd0
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	007a1200 	.word	0x007a1200
 8003cb8:	003d0900 	.word	0x003d0900

08003cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc0:	4b02      	ldr	r3, [pc, #8]	; (8003ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	20000004 	.word	0x20000004

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd4:	f7ff fff2 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003cd8:	4601      	mov	r1, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4a03      	ldr	r2, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce6:	5cd3      	ldrb	r3, [r2, r3]
 8003ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	0800ac34 	.word	0x0800ac34

08003cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cfc:	f7ff ffde 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003d00:	4601      	mov	r1, r0
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	0adb      	lsrs	r3, r3, #11
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4a03      	ldr	r2, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0e:	5cd3      	ldrb	r3, [r2, r3]
 8003d10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	0800ac34 	.word	0x0800ac34

08003d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <RCC_Delay+0x34>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <RCC_Delay+0x38>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0a5b      	lsrs	r3, r3, #9
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d3c:	bf00      	nop
  }
  while (Delay --);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	60fa      	str	r2, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f9      	bne.n	8003d3c <RCC_Delay+0x1c>
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000004 	.word	0x20000004
 8003d58:	10624dd3 	.word	0x10624dd3

08003d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d07d      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7c:	4b4f      	ldr	r3, [pc, #316]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10d      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d88:	4b4c      	ldr	r3, [pc, #304]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	4a4b      	ldr	r2, [pc, #300]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d92:	61d3      	str	r3, [r2, #28]
 8003d94:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da0:	2301      	movs	r3, #1
 8003da2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d118      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db0:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbc:	f7fd fc0a 	bl	80015d4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc4:	f7fd fc06 	bl	80015d4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e06d      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd6:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d02e      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d027      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e00:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e10:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e16:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d014      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fd fbd5 	bl	80015d4 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fd fbd1 	bl	80015d4 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e036      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ee      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4917      	ldr	r1, [pc, #92]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d105      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	490b      	ldr	r1, [pc, #44]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4904      	ldr	r1, [pc, #16]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	42420440 	.word	0x42420440

08003ec8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b08d      	sub	sp, #52	; 0x34
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ed0:	4b55      	ldr	r3, [pc, #340]	; (8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003ed2:	f107 040c 	add.w	r4, r7, #12
 8003ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eea:	2300      	movs	r3, #0
 8003eec:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d07f      	beq.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d002      	beq.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d048      	beq.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003f04:	e08b      	b.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003f06:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003f0c:	4b48      	ldr	r3, [pc, #288]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d07f      	beq.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	0c9b      	lsrs	r3, r3, #18
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003f24:	4413      	add	r3, r2
 8003f26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f2a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d018      	beq.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f36:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	0c5b      	lsrs	r3, r3, #17
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003f44:	4413      	add	r3, r2
 8003f46:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f56:	4a37      	ldr	r2, [pc, #220]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f66:	e004      	b.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	4a33      	ldr	r2, [pc, #204]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f72:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7e:	d102      	bne.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f84:	e048      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4a2c      	ldr	r2, [pc, #176]	; (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f94:	e040      	b.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa6:	d108      	bne.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb8:	e01f      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc4:	d109      	bne.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003fd2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd8:	e00f      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe4:	d11a      	bne.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d014      	beq.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003ff2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ff8:	e010      	b.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003ffa:	e00f      	b.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ffc:	f7ff fe7c 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	0b9b      	lsrs	r3, r3, #14
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	3301      	adds	r3, #1
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004016:	e002      	b.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800401c:	bf00      	nop
    }
  }
  return (frequency);
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004020:	4618      	mov	r0, r3
 8004022:	3734      	adds	r7, #52	; 0x34
 8004024:	46bd      	mov	sp, r7
 8004026:	bd90      	pop	{r4, r7, pc}
 8004028:	0800abd4 	.word	0x0800abd4
 800402c:	0800abe4 	.word	0x0800abe4
 8004030:	40021000 	.word	0x40021000
 8004034:	007a1200 	.word	0x007a1200
 8004038:	003d0900 	.word	0x003d0900
 800403c:	aaaaaaab 	.word	0xaaaaaaab

08004040 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e084      	b.n	8004160 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	7c5b      	ldrb	r3, [r3, #17]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fd f938 	bl	80012dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fac6 	bl	8004604 <HAL_RTC_WaitForSynchro>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2204      	movs	r2, #4
 8004082:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e06b      	b.n	8004160 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fb7f 	bl	800478c <RTC_EnterInitMode>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2204      	movs	r2, #4
 8004098:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e060      	b.n	8004160 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0207 	bic.w	r2, r2, #7
 80040ac:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80040b6:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <HAL_RTC_Init+0x128>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a2b      	ldr	r2, [pc, #172]	; (8004168 <HAL_RTC_Init+0x128>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80040c2:	4b29      	ldr	r3, [pc, #164]	; (8004168 <HAL_RTC_Init+0x128>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	4926      	ldr	r1, [pc, #152]	; (8004168 <HAL_RTC_Init+0x128>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d003      	beq.n	80040e6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e00e      	b.n	8004104 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7ff feee 	bl	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq>
 80040ec:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2204      	movs	r2, #4
 80040f8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e030      	b.n	8004160 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3b01      	subs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 010f 	bic.w	r1, r3, #15
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	0c1a      	lsrs	r2, r3, #16
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	b291      	uxth	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	430b      	orrs	r3, r1
 800412e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fb53 	bl	80047dc <RTC_ExitInitMode>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2204      	movs	r2, #4
 8004140:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00c      	b.n	8004160 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40006c00 	.word	0x40006c00

0800416c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800416c:	b590      	push	{r4, r7, lr}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_RTC_SetTime+0x20>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e080      	b.n	8004292 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	7c1b      	ldrb	r3, [r3, #16]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_RTC_SetTime+0x30>
 8004198:	2302      	movs	r3, #2
 800419a:	e07a      	b.n	8004292 <HAL_RTC_SetTime+0x126>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2202      	movs	r2, #2
 80041a6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d113      	bne.n	80041d6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80041b8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	4619      	mov	r1, r3
 80041c2:	460b      	mov	r3, r1
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a5b      	subs	r3, r3, r1
 80041c8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80041ca:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80041d0:	4413      	add	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e01e      	b.n	8004214 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fb43 	bl	8004866 <RTC_Bcd2ToByte>
 80041e0:	4603      	mov	r3, r0
 80041e2:	461a      	mov	r2, r3
 80041e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80041e8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fb38 	bl	8004866 <RTC_Bcd2ToByte>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461a      	mov	r2, r3
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004202:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	789b      	ldrb	r3, [r3, #2]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fb2c 	bl	8004866 <RTC_Bcd2ToByte>
 800420e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004210:	4423      	add	r3, r4
 8004212:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004214:	6979      	ldr	r1, [r7, #20]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fa51 	bl	80046be <RTC_WriteTimeCounter>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2204      	movs	r2, #4
 8004226:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e02f      	b.n	8004292 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0205 	bic.w	r2, r2, #5
 8004240:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa62 	bl	800470c <RTC_ReadAlarmCounter>
 8004248:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d018      	beq.n	8004284 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	429a      	cmp	r2, r3
 8004258:	d214      	bcs.n	8004284 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004260:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004264:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004266:	6939      	ldr	r1, [r7, #16]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fa68 	bl	800473e <RTC_WriteAlarmCounter>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2204      	movs	r2, #4
 8004278:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e006      	b.n	8004292 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd90      	pop	{r4, r7, pc}
	...

0800429c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RTC_GetTime+0x28>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0b5      	b.n	8004434 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0ac      	b.n	8004434 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f9bf 	bl	800465e <RTC_ReadTimeCounter>
 80042e0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	4a55      	ldr	r2, [pc, #340]	; (800443c <HAL_RTC_GetTime+0x1a0>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	0adb      	lsrs	r3, r3, #11
 80042ec:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4b52      	ldr	r3, [pc, #328]	; (800443c <HAL_RTC_GetTime+0x1a0>)
 80042f2:	fba3 1302 	umull	r1, r3, r3, r2
 80042f6:	0adb      	lsrs	r3, r3, #11
 80042f8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	4a4f      	ldr	r2, [pc, #316]	; (8004440 <HAL_RTC_GetTime+0x1a4>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	4a4a      	ldr	r2, [pc, #296]	; (800443c <HAL_RTC_GetTime+0x1a0>)
 8004314:	fba2 1203 	umull	r1, r2, r2, r3
 8004318:	0ad2      	lsrs	r2, r2, #11
 800431a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800431e:	fb01 f202 	mul.w	r2, r1, r2
 8004322:	1a9a      	subs	r2, r3, r2
 8004324:	4b46      	ldr	r3, [pc, #280]	; (8004440 <HAL_RTC_GetTime+0x1a4>)
 8004326:	fba3 1302 	umull	r1, r3, r3, r2
 800432a:	0959      	lsrs	r1, r3, #5
 800432c:	460b      	mov	r3, r1
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a5b      	subs	r3, r3, r1
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	1ad1      	subs	r1, r2, r3
 8004336:	b2ca      	uxtb	r2, r1
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b17      	cmp	r3, #23
 8004340:	d955      	bls.n	80043ee <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4a3f      	ldr	r2, [pc, #252]	; (8004444 <HAL_RTC_GetTime+0x1a8>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800434e:	6939      	ldr	r1, [r7, #16]
 8004350:	4b3c      	ldr	r3, [pc, #240]	; (8004444 <HAL_RTC_GetTime+0x1a8>)
 8004352:	fba3 2301 	umull	r2, r3, r3, r1
 8004356:	091a      	lsrs	r2, r3, #4
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	1aca      	subs	r2, r1, r3
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f9cf 	bl	800470c <RTC_ReadAlarmCounter>
 800436e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d008      	beq.n	800438a <HAL_RTC_GetTime+0xee>
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	429a      	cmp	r2, r3
 800437e:	d904      	bls.n	800438a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	e002      	b.n	8004390 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
 800438e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <HAL_RTC_GetTime+0x1ac>)
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800439e:	69b9      	ldr	r1, [r7, #24]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f98c 	bl	80046be <RTC_WriteTimeCounter>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e041      	b.n	8004434 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d00c      	beq.n	80043d2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4413      	add	r3, r2
 80043be:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043c0:	69f9      	ldr	r1, [r7, #28]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f9bb 	bl	800473e <RTC_WriteAlarmCounter>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e030      	b.n	8004434 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043d2:	69f9      	ldr	r1, [r7, #28]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f9b2 	bl	800473e <RTC_WriteAlarmCounter>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e027      	b.n	8004434 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fa5a 	bl	80048a0 <RTC_DateUpdate>
 80043ec:	e003      	b.n	80043f6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01a      	beq.n	8004432 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fa13 	bl	800482c <RTC_ByteToBcd2>
 8004406:	4603      	mov	r3, r0
 8004408:	461a      	mov	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa0a 	bl	800482c <RTC_ByteToBcd2>
 8004418:	4603      	mov	r3, r0
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	789b      	ldrb	r3, [r3, #2]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fa01 	bl	800482c <RTC_ByteToBcd2>
 800442a:	4603      	mov	r3, r0
 800442c:	461a      	mov	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	91a2b3c5 	.word	0x91a2b3c5
 8004440:	88888889 	.word	0x88888889
 8004444:	aaaaaaab 	.word	0xaaaaaaab
 8004448:	00015180 	.word	0x00015180

0800444c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b089      	sub	sp, #36	; 0x24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800445c:	f107 0314 	add.w	r3, r7, #20
 8004460:	2100      	movs	r1, #0
 8004462:	460a      	mov	r2, r1
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	460a      	mov	r2, r1
 8004468:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_RTC_SetAlarm_IT+0x2a>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e096      	b.n	80045a8 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	7c1b      	ldrb	r3, [r3, #16]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_RTC_SetAlarm_IT+0x3a>
 8004482:	2302      	movs	r3, #2
 8004484:	e090      	b.n	80045a8 <HAL_RTC_SetAlarm_IT+0x15c>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2202      	movs	r2, #2
 8004490:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004492:	f107 0314 	add.w	r3, r7, #20
 8004496:	2200      	movs	r2, #0
 8004498:	4619      	mov	r1, r3
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff fefe 	bl	800429c <HAL_RTC_GetTime>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e07e      	b.n	80045a8 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80044aa:	7d3b      	ldrb	r3, [r7, #20]
 80044ac:	461a      	mov	r2, r3
 80044ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80044b2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80044b6:	7d7b      	ldrb	r3, [r7, #21]
 80044b8:	4619      	mov	r1, r3
 80044ba:	460b      	mov	r3, r1
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a5b      	subs	r3, r3, r1
 80044c0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80044c2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80044c4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80044c6:	4413      	add	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d113      	bne.n	80044f8 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80044da:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	4619      	mov	r1, r3
 80044e4:	460b      	mov	r3, r1
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a5b      	subs	r3, r3, r1
 80044ea:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80044ec:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80044f2:	4413      	add	r3, r2
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	e01e      	b.n	8004536 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 f9b2 	bl	8004866 <RTC_Bcd2ToByte>
 8004502:	4603      	mov	r3, r0
 8004504:	461a      	mov	r2, r3
 8004506:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800450a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f9a7 	bl	8004866 <RTC_Bcd2ToByte>
 8004518:	4603      	mov	r3, r0
 800451a:	461a      	mov	r2, r3
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004524:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	789b      	ldrb	r3, [r3, #2]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f99b 	bl	8004866 <RTC_Bcd2ToByte>
 8004530:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8004532:	4423      	add	r3, r4
 8004534:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	429a      	cmp	r2, r3
 800453c:	d205      	bcs.n	800454a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004544:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004548:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800454a:	69f9      	ldr	r1, [r7, #28]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f8f6 	bl	800473e <RTC_WriteAlarmCounter>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2204      	movs	r2, #4
 800455c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e01f      	b.n	80045a8 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0202 	mvn.w	r2, #2
 8004570:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0202 	orr.w	r2, r2, #2
 8004580:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RTC_SetAlarm_IT+0x164>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <HAL_RTC_SetAlarm_IT+0x164>)
 8004588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800458c:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800458e:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_RTC_SetAlarm_IT+0x164>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <HAL_RTC_SetAlarm_IT+0x164>)
 8004594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004598:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80045a6:	2300      	movs	r3, #0
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3724      	adds	r7, #36	; 0x24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd90      	pop	{r4, r7, pc}
 80045b0:	40010400 	.word	0x40010400

080045b4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00e      	beq.n	80045e8 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fc fd15 	bl	8001008 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f06f 0202 	mvn.w	r2, #2
 80045e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80045ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045ee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	745a      	strb	r2, [r3, #17]
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40010400 	.word	0x40010400

08004604 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e01d      	b.n	8004656 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0208 	bic.w	r2, r2, #8
 8004628:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800462a:	f7fc ffd3 	bl	80015d4 <HAL_GetTick>
 800462e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004630:	e009      	b.n	8004646 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004632:	f7fc ffcf 	bl	80015d4 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004640:	d901      	bls.n	8004646 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e007      	b.n	8004656 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ee      	beq.n	8004632 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800465e:	b480      	push	{r7}
 8004660:	b087      	sub	sp, #28
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	827b      	strh	r3, [r7, #18]
 800466a:	2300      	movs	r3, #0
 800466c:	823b      	strh	r3, [r7, #16]
 800466e:	2300      	movs	r3, #0
 8004670:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800468e:	8a7a      	ldrh	r2, [r7, #18]
 8004690:	8a3b      	ldrh	r3, [r7, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d008      	beq.n	80046a8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004696:	8a3b      	ldrh	r3, [r7, #16]
 8004698:	041a      	lsls	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e004      	b.n	80046b2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80046a8:	8a7b      	ldrh	r3, [r7, #18]
 80046aa:	041a      	lsls	r2, r3, #16
 80046ac:	89fb      	ldrh	r3, [r7, #14]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80046b2:	697b      	ldr	r3, [r7, #20]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f85d 	bl	800478c <RTC_EnterInitMode>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e011      	b.n	8004702 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	0c12      	lsrs	r2, r2, #16
 80046e6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b292      	uxth	r2, r2
 80046f0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f872 	bl	80047dc <RTC_ExitInitMode>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	81fb      	strh	r3, [r7, #14]
 8004718:	2300      	movs	r3, #0
 800471a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800472c:	89fb      	ldrh	r3, [r7, #14]
 800472e:	041a      	lsls	r2, r3, #16
 8004730:	89bb      	ldrh	r3, [r7, #12]
 8004732:	4313      	orrs	r3, r2
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f81d 	bl	800478c <RTC_EnterInitMode>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	e011      	b.n	8004782 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	0c12      	lsrs	r2, r2, #16
 8004766:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	b292      	uxth	r2, r2
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f832 	bl	80047dc <RTC_ExitInitMode>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004798:	f7fc ff1c 	bl	80015d4 <HAL_GetTick>
 800479c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800479e:	e009      	b.n	80047b4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80047a0:	f7fc ff18 	bl	80015d4 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ae:	d901      	bls.n	80047b4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e00f      	b.n	80047d4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ee      	beq.n	80047a0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0210 	orr.w	r2, r2, #16
 80047d0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0210 	bic.w	r2, r2, #16
 80047f6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80047f8:	f7fc feec 	bl	80015d4 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047fe:	e009      	b.n	8004814 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004800:	f7fc fee8 	bl	80015d4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800480e:	d901      	bls.n	8004814 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e007      	b.n	8004824 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0ee      	beq.n	8004800 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800483a:	e005      	b.n	8004848 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	3b0a      	subs	r3, #10
 8004846:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	2b09      	cmp	r3, #9
 800484c:	d8f6      	bhi.n	800483c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	b2da      	uxtb	r2, r3
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	4313      	orrs	r3, r2
 800485a:	b2db      	uxtb	r3, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	4603      	mov	r3, r0
 800486e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	b2da      	uxtb	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	4413      	add	r3, r2
 8004894:	b2db      	uxtb	r3, r3
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	2300      	movs	r3, #0
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	7bdb      	ldrb	r3, [r3, #15]
 80048be:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	7b5b      	ldrb	r3, [r3, #13]
 80048c4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	7b9b      	ldrb	r3, [r3, #14]
 80048ca:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	e06f      	b.n	80049b2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d011      	beq.n	80048fc <RTC_DateUpdate+0x5c>
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d00e      	beq.n	80048fc <RTC_DateUpdate+0x5c>
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b05      	cmp	r3, #5
 80048e2:	d00b      	beq.n	80048fc <RTC_DateUpdate+0x5c>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b07      	cmp	r3, #7
 80048e8:	d008      	beq.n	80048fc <RTC_DateUpdate+0x5c>
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d005      	beq.n	80048fc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b0a      	cmp	r3, #10
 80048f4:	d002      	beq.n	80048fc <RTC_DateUpdate+0x5c>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b0c      	cmp	r3, #12
 80048fa:	d117      	bne.n	800492c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b1e      	cmp	r3, #30
 8004900:	d803      	bhi.n	800490a <RTC_DateUpdate+0x6a>
      {
        day++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004908:	e050      	b.n	80049ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d005      	beq.n	800491c <RTC_DateUpdate+0x7c>
        {
          month++;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	3301      	adds	r3, #1
 8004914:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004916:	2301      	movs	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800491a:	e047      	b.n	80049ac <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800491c:	2301      	movs	r3, #1
 800491e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004920:	2301      	movs	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
          year++;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	3301      	adds	r3, #1
 8004928:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800492a:	e03f      	b.n	80049ac <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b04      	cmp	r3, #4
 8004930:	d008      	beq.n	8004944 <RTC_DateUpdate+0xa4>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b06      	cmp	r3, #6
 8004936:	d005      	beq.n	8004944 <RTC_DateUpdate+0xa4>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b09      	cmp	r3, #9
 800493c:	d002      	beq.n	8004944 <RTC_DateUpdate+0xa4>
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b0b      	cmp	r3, #11
 8004942:	d10c      	bne.n	800495e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b1d      	cmp	r3, #29
 8004948:	d803      	bhi.n	8004952 <RTC_DateUpdate+0xb2>
      {
        day++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004950:	e02c      	b.n	80049ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	3301      	adds	r3, #1
 8004956:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004958:	2301      	movs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800495c:	e026      	b.n	80049ac <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d123      	bne.n	80049ac <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b1b      	cmp	r3, #27
 8004968:	d803      	bhi.n	8004972 <RTC_DateUpdate+0xd2>
      {
        day++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e01c      	b.n	80049ac <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b1c      	cmp	r3, #28
 8004976:	d111      	bne.n	800499c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	b29b      	uxth	r3, r3
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f839 	bl	80049f4 <RTC_IsLeapYear>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e00d      	b.n	80049ac <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	3301      	adds	r3, #1
 8004994:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004996:	2301      	movs	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e007      	b.n	80049ac <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b1d      	cmp	r3, #29
 80049a0:	d104      	bne.n	80049ac <RTC_DateUpdate+0x10c>
      {
        month++;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3301      	adds	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80049a8:	2301      	movs	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d38b      	bcc.n	80048d2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	f000 f83b 	bl	8004a58 <RTC_WeekDayNum>
 80049e2:	4603      	mov	r3, r0
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	731a      	strb	r2, [r3, #12]
}
 80049ea:	bf00      	nop
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e01d      	b.n	8004a4a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <RTC_IsLeapYear+0x60>)
 8004a12:	fba2 1203 	umull	r1, r2, r2, r3
 8004a16:	0952      	lsrs	r2, r2, #5
 8004a18:	2164      	movs	r1, #100	; 0x64
 8004a1a:	fb01 f202 	mul.w	r2, r1, r2
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e00f      	b.n	8004a4a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <RTC_IsLeapYear+0x60>)
 8004a2e:	fba2 1203 	umull	r1, r2, r2, r3
 8004a32:	09d2      	lsrs	r2, r2, #7
 8004a34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004a38:	fb01 f202 	mul.w	r2, r1, r2
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004a48:	2300      	movs	r3, #0
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	51eb851f 	.word	0x51eb851f

08004a58 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
 8004a64:	4613      	mov	r3, r2
 8004a66:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004a76:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d82d      	bhi.n	8004ada <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004a7e:	78fa      	ldrb	r2, [r7, #3]
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	4a2c      	ldr	r2, [pc, #176]	; (8004b3c <RTC_WeekDayNum+0xe4>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	085a      	lsrs	r2, r3, #1
 8004a92:	78bb      	ldrb	r3, [r7, #2]
 8004a94:	441a      	add	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	441a      	add	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	089b      	lsrs	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	4926      	ldr	r1, [pc, #152]	; (8004b40 <RTC_WeekDayNum+0xe8>)
 8004aa8:	fba1 1303 	umull	r1, r3, r1, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	1ad2      	subs	r2, r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	4922      	ldr	r1, [pc, #136]	; (8004b40 <RTC_WeekDayNum+0xe8>)
 8004ab6:	fba1 1303 	umull	r1, r3, r1, r3
 8004aba:	09db      	lsrs	r3, r3, #7
 8004abc:	4413      	add	r3, r2
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <RTC_WeekDayNum+0xec>)
 8004ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac6:	1ad1      	subs	r1, r2, r3
 8004ac8:	0849      	lsrs	r1, r1, #1
 8004aca:	440b      	add	r3, r1
 8004acc:	0899      	lsrs	r1, r3, #2
 8004ace:	460b      	mov	r3, r1
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	1a5b      	subs	r3, r3, r1
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e029      	b.n	8004b2e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	4613      	mov	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4413      	add	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <RTC_WeekDayNum+0xe4>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	085a      	lsrs	r2, r3, #1
 8004aee:	78bb      	ldrb	r3, [r7, #2]
 8004af0:	441a      	add	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	441a      	add	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	441a      	add	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4910      	ldr	r1, [pc, #64]	; (8004b40 <RTC_WeekDayNum+0xe8>)
 8004b00:	fba1 1303 	umull	r1, r3, r1, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	1ad2      	subs	r2, r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	490d      	ldr	r1, [pc, #52]	; (8004b40 <RTC_WeekDayNum+0xe8>)
 8004b0c:	fba1 1303 	umull	r1, r3, r1, r3
 8004b10:	09db      	lsrs	r3, r3, #7
 8004b12:	4413      	add	r3, r2
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <RTC_WeekDayNum+0xec>)
 8004b18:	fba3 1302 	umull	r1, r3, r3, r2
 8004b1c:	1ad1      	subs	r1, r2, r3
 8004b1e:	0849      	lsrs	r1, r1, #1
 8004b20:	440b      	add	r3, r1
 8004b22:	0899      	lsrs	r1, r3, #2
 8004b24:	460b      	mov	r3, r1
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	1a5b      	subs	r3, r3, r1
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	b2db      	uxtb	r3, r3
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	38e38e39 	.word	0x38e38e39
 8004b40:	51eb851f 	.word	0x51eb851f
 8004b44:	24924925 	.word	0x24924925

08004b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e03f      	b.n	8004bda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fbe0 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	; 0x24
 8004b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f905 	bl	8004d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08a      	sub	sp, #40	; 0x28
 8004be6:	af02      	add	r7, sp, #8
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d17c      	bne.n	8004cfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_UART_Transmit+0x2c>
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e075      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_UART_Transmit+0x3e>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e06e      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2221      	movs	r2, #33	; 0x21
 8004c32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004c36:	f7fc fccd 	bl	80015d4 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c50:	d108      	bne.n	8004c64 <HAL_UART_Transmit+0x82>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e003      	b.n	8004c6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004c74:	e02a      	b.n	8004ccc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f840 	bl	8004d06 <UART_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e036      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	3302      	adds	r3, #2
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e007      	b.n	8004cbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1cf      	bne.n	8004c76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2140      	movs	r1, #64	; 0x40
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f810 	bl	8004d06 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d16:	e02c      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d028      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d26:	f7fc fc55 	bl	80015d4 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d21d      	bcs.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e00f      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d0c3      	beq.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004dd6:	f023 030c 	bic.w	r3, r3, #12
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	430b      	orrs	r3, r1
 8004de2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2c      	ldr	r2, [pc, #176]	; (8004eb0 <UART_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7fe ff78 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	e002      	b.n	8004e12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e0c:	f7fe ff60 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8004e10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	009a      	lsls	r2, r3, #2
 8004e1c:	441a      	add	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <UART_SetConfig+0x118>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	0119      	lsls	r1, r3, #4
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009a      	lsls	r2, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e48:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <UART_SetConfig+0x118>)
 8004e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2064      	movs	r0, #100	; 0x64
 8004e52:	fb00 f303 	mul.w	r3, r0, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	3332      	adds	r3, #50	; 0x32
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <UART_SetConfig+0x118>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e68:	4419      	add	r1, r3
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009a      	lsls	r2, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <UART_SetConfig+0x118>)
 8004e82:	fba3 0302 	umull	r0, r3, r3, r2
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2064      	movs	r0, #100	; 0x64
 8004e8a:	fb00 f303 	mul.w	r3, r0, r3
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	3332      	adds	r3, #50	; 0x32
 8004e94:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <UART_SetConfig+0x118>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	f003 020f 	and.w	r2, r3, #15
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40013800 	.word	0x40013800
 8004eb4:	51eb851f 	.word	0x51eb851f

08004eb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004eb8:	b084      	sub	sp, #16
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	f107 0014 	add.w	r0, r7, #20
 8004ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	b004      	add	sp, #16
 8004ed6:	4770      	bx	lr

08004ed8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ee8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004eec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr

08004f04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	4013      	ands	r3, r2
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f50:	b084      	sub	sp, #16
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	f107 0014 	add.w	r0, r7, #20
 8004f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	b004      	add	sp, #16
 8004f8e:	4770      	bx	lr

08004f90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b09b      	sub	sp, #108	; 0x6c
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	78db      	ldrb	r3, [r3, #3]
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d81f      	bhi.n	8005002 <USB_ActivateEndpoint+0x72>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <USB_ActivateEndpoint+0x38>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004fd9 	.word	0x08004fd9
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	0800500b 	.word	0x0800500b
 8004fd4:	08004fe7 	.word	0x08004fe7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004fd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fe0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004fe4:	e012      	b.n	800500c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004fe6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004fea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004fee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ff2:	e00b      	b.n	800500c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ff4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ffc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005000:	e004      	b.n	800500c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005008:	e000      	b.n	800500c <USB_ActivateEndpoint+0x7c>
      break;
 800500a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	b29a      	uxth	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	4313      	orrs	r3, r2
 800504e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	7b1b      	ldrb	r3, [r3, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f040 8149 	bne.w	8005310 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8084 	beq.w	8005190 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005092:	b29b      	uxth	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	4413      	add	r3, r2
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	011a      	lsls	r2, r3, #4
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	88db      	ldrh	r3, [r3, #6]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	81fb      	strh	r3, [r7, #14]
 80050ca:	89fb      	ldrh	r3, [r7, #14]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01b      	beq.n	800510c <USB_ActivateEndpoint+0x17c>
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	81bb      	strh	r3, [r7, #12]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	89bb      	ldrh	r3, [r7, #12]
 80050f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005104:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005108:	b29b      	uxth	r3, r3
 800510a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	78db      	ldrb	r3, [r3, #3]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d020      	beq.n	8005156 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512a:	813b      	strh	r3, [r7, #8]
 800512c:	893b      	ldrh	r3, [r7, #8]
 800512e:	f083 0320 	eor.w	r3, r3, #32
 8005132:	813b      	strh	r3, [r7, #8]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	441a      	add	r2, r3
 800513e:	893b      	ldrh	r3, [r7, #8]
 8005140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800514c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005150:	b29b      	uxth	r3, r3
 8005152:	8013      	strh	r3, [r2, #0]
 8005154:	e27f      	b.n	8005656 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516c:	817b      	strh	r3, [r7, #10]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	441a      	add	r2, r3
 8005178:	897b      	ldrh	r3, [r7, #10]
 800517a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518a:	b29b      	uxth	r3, r3
 800518c:	8013      	strh	r3, [r2, #0]
 800518e:	e262      	b.n	8005656 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	4413      	add	r3, r2
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	011a      	lsls	r2, r3, #4
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	88db      	ldrh	r3, [r3, #6]
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	4413      	add	r3, r2
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	011a      	lsls	r2, r3, #4
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	4413      	add	r3, r2
 80051e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051e6:	623b      	str	r3, [r7, #32]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d112      	bne.n	8005216 <USB_ActivateEndpoint+0x286>
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520e:	b29a      	uxth	r2, r3
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	e02f      	b.n	8005276 <USB_ActivateEndpoint+0x2e6>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b3e      	cmp	r3, #62	; 0x3e
 800521c:	d813      	bhi.n	8005246 <USB_ActivateEndpoint+0x2b6>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	663b      	str	r3, [r7, #96]	; 0x60
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <USB_ActivateEndpoint+0x2a8>
 8005232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005234:	3301      	adds	r3, #1
 8005236:	663b      	str	r3, [r7, #96]	; 0x60
 8005238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800523a:	b29b      	uxth	r3, r3
 800523c:	029b      	lsls	r3, r3, #10
 800523e:	b29a      	uxth	r2, r3
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	e017      	b.n	8005276 <USB_ActivateEndpoint+0x2e6>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	663b      	str	r3, [r7, #96]	; 0x60
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 031f 	and.w	r3, r3, #31
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <USB_ActivateEndpoint+0x2d0>
 800525a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800525c:	3b01      	subs	r3, #1
 800525e:	663b      	str	r3, [r7, #96]	; 0x60
 8005260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005262:	b29b      	uxth	r3, r3
 8005264:	029b      	lsls	r3, r3, #10
 8005266:	b29b      	uxth	r3, r3
 8005268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005270:	b29a      	uxth	r2, r3
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	83fb      	strh	r3, [r7, #30]
 8005284:	8bfb      	ldrh	r3, [r7, #30]
 8005286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01b      	beq.n	80052c6 <USB_ActivateEndpoint+0x336>
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	83bb      	strh	r3, [r7, #28]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	441a      	add	r2, r3
 80052b0:	8bbb      	ldrh	r3, [r7, #28]
 80052b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052dc:	837b      	strh	r3, [r7, #26]
 80052de:	8b7b      	ldrh	r3, [r7, #26]
 80052e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052e4:	837b      	strh	r3, [r7, #26]
 80052e6:	8b7b      	ldrh	r3, [r7, #26]
 80052e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052ec:	837b      	strh	r3, [r7, #26]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	8b7b      	ldrh	r3, [r7, #26]
 80052fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530a:	b29b      	uxth	r3, r3
 800530c:	8013      	strh	r3, [r2, #0]
 800530e:	e1a2      	b.n	8005656 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	441a      	add	r2, r3
 8005334:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005340:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005348:	b29b      	uxth	r3, r3
 800534a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005356:	b29b      	uxth	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800535c:	4413      	add	r3, r2
 800535e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	011a      	lsls	r2, r3, #4
 8005366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005368:	4413      	add	r3, r2
 800536a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800536e:	657b      	str	r3, [r7, #84]	; 0x54
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	891b      	ldrh	r3, [r3, #8]
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	653b      	str	r3, [r7, #80]	; 0x50
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538a:	b29b      	uxth	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005390:	4413      	add	r3, r2
 8005392:	653b      	str	r3, [r7, #80]	; 0x50
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	011a      	lsls	r2, r3, #4
 800539a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539c:	4413      	add	r3, r2
 800539e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	895b      	ldrh	r3, [r3, #10]
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f040 8091 	bne.w	80054e0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80053cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01b      	beq.n	800540e <USB_ActivateEndpoint+0x47e>
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ec:	877b      	strh	r3, [r7, #58]	; 0x3a
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80053fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540a:	b29b      	uxth	r3, r3
 800540c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	873b      	strh	r3, [r7, #56]	; 0x38
 800541c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01b      	beq.n	800545e <USB_ActivateEndpoint+0x4ce>
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800544a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005456:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800545a:	b29b      	uxth	r3, r3
 800545c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005474:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005476:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005478:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800547c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800547e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005480:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005484:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	441a      	add	r2, r3
 8005490:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054bc:	867b      	strh	r3, [r7, #50]	; 0x32
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	441a      	add	r2, r3
 80054c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80054ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]
 80054de:	e0ba      	b.n	8005656 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80054f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80054f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01d      	beq.n	8005538 <USB_ActivateEndpoint+0x5a8>
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29b      	uxth	r3, r3
 800550a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	441a      	add	r2, r3
 8005520:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005534:	b29b      	uxth	r3, r3
 8005536:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005548:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01d      	beq.n	8005590 <USB_ActivateEndpoint+0x600>
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	441a      	add	r2, r3
 8005578:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800557c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800558c:	b29b      	uxth	r3, r3
 800558e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	78db      	ldrb	r3, [r3, #3]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d024      	beq.n	80055e2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80055b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055b6:	f083 0320 	eor.w	r3, r3, #32
 80055ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	441a      	add	r2, r3
 80055c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055dc:	b29b      	uxth	r3, r3
 80055de:	8013      	strh	r3, [r2, #0]
 80055e0:	e01d      	b.n	800561e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800560a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800560e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561a:	b29b      	uxth	r3, r3
 800561c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005634:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005652:	b29b      	uxth	r3, r3
 8005654:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005656:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800565a:	4618      	mov	r0, r3
 800565c:	376c      	adds	r7, #108	; 0x6c
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005664:	b480      	push	{r7}
 8005666:	b08d      	sub	sp, #52	; 0x34
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	7b1b      	ldrb	r3, [r3, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 808e 	bne.w	8005794 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d044      	beq.n	800570a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	81bb      	strh	r3, [r7, #12]
 800568e:	89bb      	ldrh	r3, [r7, #12]
 8005690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01b      	beq.n	80056d0 <USB_DeactivateEndpoint+0x6c>
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	817b      	strh	r3, [r7, #10]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	441a      	add	r2, r3
 80056ba:	897b      	ldrh	r3, [r7, #10]
 80056bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e6:	813b      	strh	r3, [r7, #8]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	441a      	add	r2, r3
 80056f2:	893b      	ldrh	r3, [r7, #8]
 80056f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005704:	b29b      	uxth	r3, r3
 8005706:	8013      	strh	r3, [r2, #0]
 8005708:	e192      	b.n	8005a30 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	827b      	strh	r3, [r7, #18]
 8005718:	8a7b      	ldrh	r3, [r7, #18]
 800571a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d01b      	beq.n	800575a <USB_DeactivateEndpoint+0xf6>
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005738:	823b      	strh	r3, [r7, #16]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	441a      	add	r2, r3
 8005744:	8a3b      	ldrh	r3, [r7, #16]
 8005746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800574e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005756:	b29b      	uxth	r3, r3
 8005758:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800576c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005770:	81fb      	strh	r3, [r7, #14]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	441a      	add	r2, r3
 800577c:	89fb      	ldrh	r3, [r7, #14]
 800577e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578e:	b29b      	uxth	r3, r3
 8005790:	8013      	strh	r3, [r2, #0]
 8005792:	e14d      	b.n	8005a30 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f040 80a5 	bne.w	80058e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	843b      	strh	r3, [r7, #32]
 80057ac:	8c3b      	ldrh	r3, [r7, #32]
 80057ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01b      	beq.n	80057ee <USB_DeactivateEndpoint+0x18a>
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057cc:	83fb      	strh	r3, [r7, #30]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	441a      	add	r2, r3
 80057d8:	8bfb      	ldrh	r3, [r7, #30]
 80057da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	83bb      	strh	r3, [r7, #28]
 80057fc:	8bbb      	ldrh	r3, [r7, #28]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01b      	beq.n	800583e <USB_DeactivateEndpoint+0x1da>
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581c:	837b      	strh	r3, [r7, #26]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	441a      	add	r2, r3
 8005828:	8b7b      	ldrh	r3, [r7, #26]
 800582a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800582e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005836:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800583a:	b29b      	uxth	r3, r3
 800583c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005854:	833b      	strh	r3, [r7, #24]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	441a      	add	r2, r3
 8005860:	8b3b      	ldrh	r3, [r7, #24]
 8005862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005872:	b29b      	uxth	r3, r3
 8005874:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588c:	82fb      	strh	r3, [r7, #22]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	8afb      	ldrh	r3, [r7, #22]
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c4:	82bb      	strh	r3, [r7, #20]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	8abb      	ldrh	r3, [r7, #20]
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]
 80058e6:	e0a3      	b.n	8005a30 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80058f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <USB_DeactivateEndpoint+0x2d4>
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005934:	b29b      	uxth	r3, r3
 8005936:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005946:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01b      	beq.n	8005988 <USB_DeactivateEndpoint+0x324>
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	853b      	strh	r3, [r7, #40]	; 0x28
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	441a      	add	r2, r3
 8005972:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800597c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005984:	b29b      	uxth	r3, r3
 8005986:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059bc:	b29b      	uxth	r3, r3
 80059be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3734      	adds	r7, #52	; 0x34
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b0c4      	sub	sp, #272	; 0x110
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	6018      	str	r0, [r3, #0]
 8005a46:	463b      	mov	r3, r7
 8005a48:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	f040 8557 	bne.w	8006504 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a56:	463b      	mov	r3, r7
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	463b      	mov	r3, r7
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d905      	bls.n	8005a72 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005a66:	463b      	mov	r3, r7
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a70:	e004      	b.n	8005a7c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	7b1b      	ldrb	r3, [r3, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d12c      	bne.n	8005ae0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a86:	463b      	mov	r3, r7
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6959      	ldr	r1, [r3, #20]
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	88da      	ldrh	r2, [r3, #6]
 8005a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	1d38      	adds	r0, r7, #4
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	f001 fa2c 	bl	8006ef8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005aa0:	1d3b      	adds	r3, r7, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	1d3b      	adds	r3, r7, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	011a      	lsls	r2, r3, #4
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ac8:	f107 0310 	add.w	r3, r7, #16
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f107 0310 	add.w	r3, r7, #16
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	f000 bcdd 	b.w	800649a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	78db      	ldrb	r3, [r3, #3]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	f040 8347 	bne.w	800617a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005aec:	463b      	mov	r3, r7
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	463b      	mov	r3, r7
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	f240 82eb 	bls.w	80060d4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005afe:	1d3b      	adds	r3, r7, #4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b18:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005b1c:	1d3b      	adds	r3, r7, #4
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	463b      	mov	r3, r7
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b42:	463b      	mov	r3, r7
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6a1a      	ldr	r2, [r3, #32]
 8005b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b4c:	1ad2      	subs	r2, r2, r3
 8005b4e:	463b      	mov	r3, r7
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	463b      	mov	r3, r7
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8159 	beq.w	8005e22 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
 8005b76:	463b      	mov	r3, r7
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d164      	bne.n	8005c4a <USB_EPStartXfer+0x20e>
 8005b80:	1d3b      	adds	r3, r7, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	4413      	add	r3, r2
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	011a      	lsls	r2, r3, #4
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d112      	bne.n	8005bd8 <USB_EPStartXfer+0x19c>
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e054      	b.n	8005c82 <USB_EPStartXfer+0x246>
 8005bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bdc:	2b3e      	cmp	r3, #62	; 0x3e
 8005bde:	d817      	bhi.n	8005c10 <USB_EPStartXfer+0x1d4>
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <USB_EPStartXfer+0x1c4>
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	029b      	lsls	r3, r3, #10
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e038      	b.n	8005c82 <USB_EPStartXfer+0x246>
 8005c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <USB_EPStartXfer+0x1f4>
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	029b      	lsls	r3, r3, #10
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	e01b      	b.n	8005c82 <USB_EPStartXfer+0x246>
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d116      	bne.n	8005c82 <USB_EPStartXfer+0x246>
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	4413      	add	r3, r2
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	011a      	lsls	r2, r3, #4
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	4413      	add	r3, r2
 8005c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c76:	633b      	str	r3, [r7, #48]	; 0x30
 8005c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	895b      	ldrh	r3, [r3, #10]
 8005c88:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6959      	ldr	r1, [r3, #20]
 8005c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c9c:	1d38      	adds	r0, r7, #4
 8005c9e:	6800      	ldr	r0, [r0, #0]
 8005ca0:	f001 f92a 	bl	8006ef8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695a      	ldr	r2, [r3, #20]
 8005caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cae:	441a      	add	r2, r3
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a1a      	ldr	r2, [r3, #32]
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d909      	bls.n	8005cda <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6a1a      	ldr	r2, [r3, #32]
 8005ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd0:	1ad2      	subs	r2, r2, r3
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	621a      	str	r2, [r3, #32]
 8005cd8:	e008      	b.n	8005cec <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d164      	bne.n	8005dc0 <USB_EPStartXfer+0x384>
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	1d3b      	adds	r3, r7, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	463b      	mov	r3, r7
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	011a      	lsls	r2, r3, #4
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d112      	bne.n	8005d4e <USB_EPStartXfer+0x312>
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	e057      	b.n	8005dfe <USB_EPStartXfer+0x3c2>
 8005d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d52:	2b3e      	cmp	r3, #62	; 0x3e
 8005d54:	d817      	bhi.n	8005d86 <USB_EPStartXfer+0x34a>
 8005d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <USB_EPStartXfer+0x33a>
 8005d6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d70:	3301      	adds	r3, #1
 8005d72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	029b      	lsls	r3, r3, #10
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	e03b      	b.n	8005dfe <USB_EPStartXfer+0x3c2>
 8005d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <USB_EPStartXfer+0x36a>
 8005d9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005da0:	3b01      	subs	r3, #1
 8005da2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005da6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	029b      	lsls	r3, r3, #10
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e01e      	b.n	8005dfe <USB_EPStartXfer+0x3c2>
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d119      	bne.n	8005dfe <USB_EPStartXfer+0x3c2>
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd0:	1d3b      	adds	r3, r7, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	4413      	add	r3, r2
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
 8005de2:	463b      	mov	r3, r7
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	011a      	lsls	r2, r3, #4
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	4413      	add	r3, r2
 8005dee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005dfe:	463b      	mov	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	891b      	ldrh	r3, [r3, #8]
 8005e04:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e08:	463b      	mov	r3, r7
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6959      	ldr	r1, [r3, #20]
 8005e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005e18:	1d38      	adds	r0, r7, #4
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	f001 f86c 	bl	8006ef8 <USB_WritePMA>
 8005e20:	e33b      	b.n	800649a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e22:	463b      	mov	r3, r7
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d164      	bne.n	8005ef6 <USB_EPStartXfer+0x4ba>
 8005e2c:	1d3b      	adds	r3, r7, #4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e40:	4413      	add	r3, r2
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e44:	463b      	mov	r3, r7
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	011a      	lsls	r2, r3, #4
 8005e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4e:	4413      	add	r3, r2
 8005e50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d112      	bne.n	8005e84 <USB_EPStartXfer+0x448>
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e057      	b.n	8005f34 <USB_EPStartXfer+0x4f8>
 8005e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e88:	2b3e      	cmp	r3, #62	; 0x3e
 8005e8a:	d817      	bhi.n	8005ebc <USB_EPStartXfer+0x480>
 8005e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <USB_EPStartXfer+0x470>
 8005ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	029b      	lsls	r3, r3, #10
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	e03b      	b.n	8005f34 <USB_EPStartXfer+0x4f8>
 8005ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <USB_EPStartXfer+0x4a0>
 8005ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	029b      	lsls	r3, r3, #10
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	e01e      	b.n	8005f34 <USB_EPStartXfer+0x4f8>
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d119      	bne.n	8005f34 <USB_EPStartXfer+0x4f8>
 8005f00:	1d3b      	adds	r3, r7, #4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	657b      	str	r3, [r7, #84]	; 0x54
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f14:	4413      	add	r3, r2
 8005f16:	657b      	str	r3, [r7, #84]	; 0x54
 8005f18:	463b      	mov	r3, r7
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	011a      	lsls	r2, r3, #4
 8005f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f22:	4413      	add	r3, r2
 8005f24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f28:	653b      	str	r3, [r7, #80]	; 0x50
 8005f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	891b      	ldrh	r3, [r3, #8]
 8005f3a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6959      	ldr	r1, [r3, #20]
 8005f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005f4e:	1d38      	adds	r0, r7, #4
 8005f50:	6800      	ldr	r0, [r0, #0]
 8005f52:	f000 ffd1 	bl	8006ef8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f56:	463b      	mov	r3, r7
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695a      	ldr	r2, [r3, #20]
 8005f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f60:	441a      	add	r2, r3
 8005f62:	463b      	mov	r3, r7
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	463b      	mov	r3, r7
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d909      	bls.n	8005f8c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a1a      	ldr	r2, [r3, #32]
 8005f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	463b      	mov	r3, r7
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	621a      	str	r2, [r3, #32]
 8005f8a:	e008      	b.n	8005f9e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005f96:	463b      	mov	r3, r7
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d164      	bne.n	8006078 <USB_EPStartXfer+0x63c>
 8005fae:	1d3b      	adds	r3, r7, #4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb4:	1d3b      	adds	r3, r7, #4
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc2:	4413      	add	r3, r2
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d112      	bne.n	8006006 <USB_EPStartXfer+0x5ca>
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e054      	b.n	80060b0 <USB_EPStartXfer+0x674>
 8006006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600a:	2b3e      	cmp	r3, #62	; 0x3e
 800600c:	d817      	bhi.n	800603e <USB_EPStartXfer+0x602>
 800600e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <USB_EPStartXfer+0x5f2>
 8006024:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006028:	3301      	adds	r3, #1
 800602a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800602e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29a      	uxth	r2, r3
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	e038      	b.n	80060b0 <USB_EPStartXfer+0x674>
 800603e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <USB_EPStartXfer+0x622>
 8006054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006058:	3b01      	subs	r3, #1
 800605a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800605e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006062:	b29b      	uxth	r3, r3
 8006064:	029b      	lsls	r3, r3, #10
 8006066:	b29b      	uxth	r3, r3
 8006068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006070:	b29a      	uxth	r2, r3
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e01b      	b.n	80060b0 <USB_EPStartXfer+0x674>
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d116      	bne.n	80060b0 <USB_EPStartXfer+0x674>
 8006082:	1d3b      	adds	r3, r7, #4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608a:	b29b      	uxth	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006090:	4413      	add	r3, r2
 8006092:	647b      	str	r3, [r7, #68]	; 0x44
 8006094:	463b      	mov	r3, r7
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	011a      	lsls	r2, r3, #4
 800609c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800609e:	4413      	add	r3, r2
 80060a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060a4:	643b      	str	r3, [r7, #64]	; 0x40
 80060a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060b0:	463b      	mov	r3, r7
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	895b      	ldrh	r3, [r3, #10]
 80060b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ba:	463b      	mov	r3, r7
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6959      	ldr	r1, [r3, #20]
 80060c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80060ca:	1d38      	adds	r0, r7, #4
 80060cc:	6800      	ldr	r0, [r0, #0]
 80060ce:	f000 ff13 	bl	8006ef8 <USB_WritePMA>
 80060d2:	e1e2      	b.n	800649a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80060d4:	463b      	mov	r3, r7
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80060de:	1d3b      	adds	r3, r7, #4
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	463b      	mov	r3, r7
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80060fc:	1d3b      	adds	r3, r7, #4
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	463b      	mov	r3, r7
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	441a      	add	r2, r3
 800610a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006122:	1d3b      	adds	r3, r7, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	663b      	str	r3, [r7, #96]	; 0x60
 8006128:	1d3b      	adds	r3, r7, #4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006130:	b29b      	uxth	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006136:	4413      	add	r3, r2
 8006138:	663b      	str	r3, [r7, #96]	; 0x60
 800613a:	463b      	mov	r3, r7
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	011a      	lsls	r2, r3, #4
 8006142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006144:	4413      	add	r3, r2
 8006146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800614a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800614c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006150:	b29a      	uxth	r2, r3
 8006152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006154:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006156:	463b      	mov	r3, r7
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	891b      	ldrh	r3, [r3, #8]
 800615c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6959      	ldr	r1, [r3, #20]
 8006166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616a:	b29b      	uxth	r3, r3
 800616c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006170:	1d38      	adds	r0, r7, #4
 8006172:	6800      	ldr	r0, [r0, #0]
 8006174:	f000 fec0 	bl	8006ef8 <USB_WritePMA>
 8006178:	e18f      	b.n	800649a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	463b      	mov	r3, r7
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 808f 	beq.w	80062b4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	67bb      	str	r3, [r7, #120]	; 0x78
 800619c:	463b      	mov	r3, r7
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d164      	bne.n	8006270 <USB_EPStartXfer+0x834>
 80061a6:	1d3b      	adds	r3, r7, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	673b      	str	r3, [r7, #112]	; 0x70
 80061ac:	1d3b      	adds	r3, r7, #4
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ba:	4413      	add	r3, r2
 80061bc:	673b      	str	r3, [r7, #112]	; 0x70
 80061be:	463b      	mov	r3, r7
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	011a      	lsls	r2, r3, #4
 80061c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c8:	4413      	add	r3, r2
 80061ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d112      	bne.n	80061fe <USB_EPStartXfer+0x7c2>
 80061d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	e054      	b.n	80062a8 <USB_EPStartXfer+0x86c>
 80061fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006202:	2b3e      	cmp	r3, #62	; 0x3e
 8006204:	d817      	bhi.n	8006236 <USB_EPStartXfer+0x7fa>
 8006206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d004      	beq.n	8006226 <USB_EPStartXfer+0x7ea>
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006220:	3301      	adds	r3, #1
 8006222:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622a:	b29b      	uxth	r3, r3
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	b29a      	uxth	r2, r3
 8006230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e038      	b.n	80062a8 <USB_EPStartXfer+0x86c>
 8006236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <USB_EPStartXfer+0x81a>
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	3b01      	subs	r3, #1
 8006252:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	b29b      	uxth	r3, r3
 800625c:	029b      	lsls	r3, r3, #10
 800625e:	b29b      	uxth	r3, r3
 8006260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006268:	b29a      	uxth	r2, r3
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	801a      	strh	r2, [r3, #0]
 800626e:	e01b      	b.n	80062a8 <USB_EPStartXfer+0x86c>
 8006270:	463b      	mov	r3, r7
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	785b      	ldrb	r3, [r3, #1]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d116      	bne.n	80062a8 <USB_EPStartXfer+0x86c>
 800627a:	1d3b      	adds	r3, r7, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006282:	b29b      	uxth	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006288:	4413      	add	r3, r2
 800628a:	67bb      	str	r3, [r7, #120]	; 0x78
 800628c:	463b      	mov	r3, r7
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	011a      	lsls	r2, r3, #4
 8006294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006296:	4413      	add	r3, r2
 8006298:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800629c:	677b      	str	r3, [r7, #116]	; 0x74
 800629e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80062a8:	463b      	mov	r3, r7
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	895b      	ldrh	r3, [r3, #10]
 80062ae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80062b2:	e097      	b.n	80063e4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062b4:	463b      	mov	r3, r7
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d168      	bne.n	8006390 <USB_EPStartXfer+0x954>
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062c6:	1d3b      	adds	r3, r7, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062d6:	4413      	add	r3, r2
 80062d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	011a      	lsls	r2, r3, #4
 80062e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062e8:	4413      	add	r3, r2
 80062ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d112      	bne.n	800631e <USB_EPStartXfer+0x8e2>
 80062f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006302:	b29a      	uxth	r2, r3
 8006304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006316:	b29a      	uxth	r2, r3
 8006318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	e05d      	b.n	80063da <USB_EPStartXfer+0x99e>
 800631e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006322:	2b3e      	cmp	r3, #62	; 0x3e
 8006324:	d817      	bhi.n	8006356 <USB_EPStartXfer+0x91a>
 8006326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <USB_EPStartXfer+0x90a>
 800633c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006340:	3301      	adds	r3, #1
 8006342:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006346:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800634a:	b29b      	uxth	r3, r3
 800634c:	029b      	lsls	r3, r3, #10
 800634e:	b29a      	uxth	r2, r3
 8006350:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006352:	801a      	strh	r2, [r3, #0]
 8006354:	e041      	b.n	80063da <USB_EPStartXfer+0x99e>
 8006356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <USB_EPStartXfer+0x93a>
 800636c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006370:	3b01      	subs	r3, #1
 8006372:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006376:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800637a:	b29b      	uxth	r3, r3
 800637c:	029b      	lsls	r3, r3, #10
 800637e:	b29b      	uxth	r3, r3
 8006380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006388:	b29a      	uxth	r2, r3
 800638a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	e024      	b.n	80063da <USB_EPStartXfer+0x99e>
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d11f      	bne.n	80063da <USB_EPStartXfer+0x99e>
 800639a:	1d3b      	adds	r3, r7, #4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063a2:	1d3b      	adds	r3, r7, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063b2:	4413      	add	r3, r2
 80063b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063b8:	463b      	mov	r3, r7
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	011a      	lsls	r2, r3, #4
 80063c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063da:	463b      	mov	r3, r7
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	891b      	ldrh	r3, [r3, #8]
 80063e0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063e4:	463b      	mov	r3, r7
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6959      	ldr	r1, [r3, #20]
 80063ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80063f4:	1d38      	adds	r0, r7, #4
 80063f6:	6800      	ldr	r0, [r0, #0]
 80063f8:	f000 fd7e 	bl	8006ef8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80063fc:	463b      	mov	r3, r7
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d122      	bne.n	800644c <USB_EPStartXfer+0xa10>
 8006406:	1d3b      	adds	r3, r7, #4
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006420:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	441a      	add	r2, r3
 8006432:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006442:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006446:	b29b      	uxth	r3, r3
 8006448:	8013      	strh	r3, [r2, #0]
 800644a:	e026      	b.n	800649a <USB_EPStartXfer+0xa5e>
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d121      	bne.n	800649a <USB_EPStartXfer+0xa5e>
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	463b      	mov	r3, r7
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006470:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	463b      	mov	r3, r7
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	441a      	add	r2, r3
 8006482:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006496:	b29b      	uxth	r3, r3
 8006498:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800649a:	1d3b      	adds	r3, r7, #4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	463b      	mov	r3, r7
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f107 020e 	add.w	r2, r7, #14
 80064b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b8:	8013      	strh	r3, [r2, #0]
 80064ba:	f107 030e 	add.w	r3, r7, #14
 80064be:	f107 020e 	add.w	r2, r7, #14
 80064c2:	8812      	ldrh	r2, [r2, #0]
 80064c4:	f082 0210 	eor.w	r2, r2, #16
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	f107 030e 	add.w	r3, r7, #14
 80064ce:	f107 020e 	add.w	r2, r7, #14
 80064d2:	8812      	ldrh	r2, [r2, #0]
 80064d4:	f082 0220 	eor.w	r2, r2, #32
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	1d3b      	adds	r3, r7, #4
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	463b      	mov	r3, r7
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	441a      	add	r2, r3
 80064e8:	f107 030e 	add.w	r3, r7, #14
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fe:	b29b      	uxth	r3, r3
 8006500:	8013      	strh	r3, [r2, #0]
 8006502:	e3b5      	b.n	8006c70 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	7b1b      	ldrb	r3, [r3, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 8090 	bne.w	8006630 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	463b      	mov	r3, r7
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	429a      	cmp	r2, r3
 800651e:	d90e      	bls.n	800653e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006520:	463b      	mov	r3, r7
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800652a:	463b      	mov	r3, r7
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699a      	ldr	r2, [r3, #24]
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	463b      	mov	r3, r7
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	619a      	str	r2, [r3, #24]
 800653c:	e008      	b.n	8006550 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006548:	463b      	mov	r3, r7
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2200      	movs	r2, #0
 800654e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006550:	1d3b      	adds	r3, r7, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006560:	b29b      	uxth	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006568:	4413      	add	r3, r2
 800656a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800656e:	463b      	mov	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	011a      	lsls	r2, r3, #4
 8006576:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800657a:	4413      	add	r3, r2
 800657c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d116      	bne.n	80065ba <USB_EPStartXfer+0xb7e>
 800658c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006598:	b29a      	uxth	r2, r3
 800659a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	e32c      	b.n	8006c14 <USB_EPStartXfer+0x11d8>
 80065ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065be:	2b3e      	cmp	r3, #62	; 0x3e
 80065c0:	d818      	bhi.n	80065f4 <USB_EPStartXfer+0xbb8>
 80065c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <USB_EPStartXfer+0xba6>
 80065d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065dc:	3301      	adds	r3, #1
 80065de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	029b      	lsls	r3, r3, #10
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e30f      	b.n	8006c14 <USB_EPStartXfer+0x11d8>
 80065f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <USB_EPStartXfer+0xbd8>
 800660a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800660e:	3b01      	subs	r3, #1
 8006610:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006614:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006618:	b29b      	uxth	r3, r3
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	b29b      	uxth	r3, r3
 800661e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006626:	b29a      	uxth	r2, r3
 8006628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	e2f1      	b.n	8006c14 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006630:	463b      	mov	r3, r7
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	78db      	ldrb	r3, [r3, #3]
 8006636:	2b02      	cmp	r3, #2
 8006638:	f040 818f 	bne.w	800695a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800663c:	463b      	mov	r3, r7
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d175      	bne.n	8006732 <USB_EPStartXfer+0xcf6>
 8006646:	1d3b      	adds	r3, r7, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800664e:	1d3b      	adds	r3, r7, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006656:	b29b      	uxth	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800665e:	4413      	add	r3, r2
 8006660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006664:	463b      	mov	r3, r7
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	011a      	lsls	r2, r3, #4
 800666c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006670:	4413      	add	r3, r2
 8006672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800667a:	463b      	mov	r3, r7
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d116      	bne.n	80066b2 <USB_EPStartXfer+0xc76>
 8006684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006690:	b29a      	uxth	r2, r3
 8006692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	e065      	b.n	800677e <USB_EPStartXfer+0xd42>
 80066b2:	463b      	mov	r3, r7
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b3e      	cmp	r3, #62	; 0x3e
 80066ba:	d81a      	bhi.n	80066f2 <USB_EPStartXfer+0xcb6>
 80066bc:	463b      	mov	r3, r7
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066c8:	463b      	mov	r3, r7
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <USB_EPStartXfer+0xca4>
 80066d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066da:	3301      	adds	r3, #1
 80066dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	029b      	lsls	r3, r3, #10
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	e045      	b.n	800677e <USB_EPStartXfer+0xd42>
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <USB_EPStartXfer+0xcda>
 800670c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006710:	3b01      	subs	r3, #1
 8006712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006716:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800671a:	b29b      	uxth	r3, r3
 800671c:	029b      	lsls	r3, r3, #10
 800671e:	b29b      	uxth	r3, r3
 8006720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006728:	b29a      	uxth	r2, r3
 800672a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e025      	b.n	800677e <USB_EPStartXfer+0xd42>
 8006732:	463b      	mov	r3, r7
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d120      	bne.n	800677e <USB_EPStartXfer+0xd42>
 800673c:	1d3b      	adds	r3, r7, #4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674c:	b29b      	uxth	r3, r3
 800674e:	461a      	mov	r2, r3
 8006750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006754:	4413      	add	r3, r2
 8006756:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800675a:	463b      	mov	r3, r7
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	011a      	lsls	r2, r3, #4
 8006762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006766:	4413      	add	r3, r2
 8006768:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800676c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006770:	463b      	mov	r3, r7
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	b29a      	uxth	r2, r3
 8006778:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800677c:	801a      	strh	r2, [r3, #0]
 800677e:	1d3b      	adds	r3, r7, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	785b      	ldrb	r3, [r3, #1]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d175      	bne.n	800687c <USB_EPStartXfer+0xe40>
 8006790:	1d3b      	adds	r3, r7, #4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067a8:	4413      	add	r3, r2
 80067aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067ae:	463b      	mov	r3, r7
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	011a      	lsls	r2, r3, #4
 80067b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ba:	4413      	add	r3, r2
 80067bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067c4:	463b      	mov	r3, r7
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d116      	bne.n	80067fc <USB_EPStartXfer+0xdc0>
 80067ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067da:	b29a      	uxth	r2, r3
 80067dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e061      	b.n	80068c0 <USB_EPStartXfer+0xe84>
 80067fc:	463b      	mov	r3, r7
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b3e      	cmp	r3, #62	; 0x3e
 8006804:	d81a      	bhi.n	800683c <USB_EPStartXfer+0xe00>
 8006806:	463b      	mov	r3, r7
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006812:	463b      	mov	r3, r7
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <USB_EPStartXfer+0xdee>
 8006820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006824:	3301      	adds	r3, #1
 8006826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e041      	b.n	80068c0 <USB_EPStartXfer+0xe84>
 800683c:	463b      	mov	r3, r7
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <USB_EPStartXfer+0xe24>
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	3b01      	subs	r3, #1
 800685c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006864:	b29b      	uxth	r3, r3
 8006866:	029b      	lsls	r3, r3, #10
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006872:	b29a      	uxth	r2, r3
 8006874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	e021      	b.n	80068c0 <USB_EPStartXfer+0xe84>
 800687c:	463b      	mov	r3, r7
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d11c      	bne.n	80068c0 <USB_EPStartXfer+0xe84>
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006896:	4413      	add	r3, r2
 8006898:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800689c:	463b      	mov	r3, r7
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	011a      	lsls	r2, r3, #4
 80068a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068a8:	4413      	add	r3, r2
 80068aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068b2:	463b      	mov	r3, r7
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068be:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 81a4 	beq.w	8006c14 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068cc:	1d3b      	adds	r3, r7, #4
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80068e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <USB_EPStartXfer+0xebc>
 80068ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80068f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10d      	bne.n	8006914 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068f8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80068fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 8187 	bne.w	8006c14 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006906:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800690a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 8180 	bne.w	8006c14 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006914:	1d3b      	adds	r3, r7, #4
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	463b      	mov	r3, r7
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	463b      	mov	r3, r7
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	441a      	add	r2, r3
 8006940:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006950:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006954:	b29b      	uxth	r3, r3
 8006956:	8013      	strh	r3, [r2, #0]
 8006958:	e15c      	b.n	8006c14 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800695a:	463b      	mov	r3, r7
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	78db      	ldrb	r3, [r3, #3]
 8006960:	2b01      	cmp	r3, #1
 8006962:	f040 8155 	bne.w	8006c10 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006966:	463b      	mov	r3, r7
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	429a      	cmp	r2, r3
 8006974:	d90e      	bls.n	8006994 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006976:	463b      	mov	r3, r7
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006980:	463b      	mov	r3, r7
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800698a:	1ad2      	subs	r2, r2, r3
 800698c:	463b      	mov	r3, r7
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	619a      	str	r2, [r3, #24]
 8006992:	e008      	b.n	80069a6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006994:	463b      	mov	r3, r7
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80069a6:	463b      	mov	r3, r7
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	785b      	ldrb	r3, [r3, #1]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d16f      	bne.n	8006a90 <USB_EPStartXfer+0x1054>
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069b8:	1d3b      	adds	r3, r7, #4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	461a      	mov	r2, r3
 80069c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80069c8:	4413      	add	r3, r2
 80069ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ce:	463b      	mov	r3, r7
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	011a      	lsls	r2, r3, #4
 80069d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80069da:	4413      	add	r3, r2
 80069dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d116      	bne.n	8006a1a <USB_EPStartXfer+0xfde>
 80069ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069fe:	801a      	strh	r2, [r3, #0]
 8006a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e05f      	b.n	8006ada <USB_EPStartXfer+0x109e>
 8006a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a20:	d818      	bhi.n	8006a54 <USB_EPStartXfer+0x1018>
 8006a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <USB_EPStartXfer+0x1006>
 8006a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	029b      	lsls	r3, r3, #10
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	e042      	b.n	8006ada <USB_EPStartXfer+0x109e>
 8006a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a62:	f003 031f 	and.w	r3, r3, #31
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <USB_EPStartXfer+0x1038>
 8006a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	029b      	lsls	r3, r3, #10
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a8c:	801a      	strh	r2, [r3, #0]
 8006a8e:	e024      	b.n	8006ada <USB_EPStartXfer+0x109e>
 8006a90:	463b      	mov	r3, r7
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d11f      	bne.n	8006ada <USB_EPStartXfer+0x109e>
 8006a9a:	1d3b      	adds	r3, r7, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006aa2:	1d3b      	adds	r3, r7, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ab8:	463b      	mov	r3, r7
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	011a      	lsls	r2, r3, #4
 8006ac0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d16f      	bne.n	8006bcc <USB_EPStartXfer+0x1190>
 8006aec:	1d3b      	adds	r3, r7, #4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006af4:	1d3b      	adds	r3, r7, #4
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b04:	4413      	add	r3, r2
 8006b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	011a      	lsls	r2, r3, #4
 8006b12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b16:	4413      	add	r3, r2
 8006b18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d116      	bne.n	8006b56 <USB_EPStartXfer+0x111a>
 8006b28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e05e      	b.n	8006c14 <USB_EPStartXfer+0x11d8>
 8006b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b5c:	d818      	bhi.n	8006b90 <USB_EPStartXfer+0x1154>
 8006b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d004      	beq.n	8006b7e <USB_EPStartXfer+0x1142>
 8006b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b78:	3301      	adds	r3, #1
 8006b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	029b      	lsls	r3, r3, #10
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b8c:	801a      	strh	r2, [r3, #0]
 8006b8e:	e041      	b.n	8006c14 <USB_EPStartXfer+0x11d8>
 8006b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d104      	bne.n	8006bb0 <USB_EPStartXfer+0x1174>
 8006ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006baa:	3b01      	subs	r3, #1
 8006bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	029b      	lsls	r3, r3, #10
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	e023      	b.n	8006c14 <USB_EPStartXfer+0x11d8>
 8006bcc:	463b      	mov	r3, r7
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d11e      	bne.n	8006c14 <USB_EPStartXfer+0x11d8>
 8006bd6:	1d3b      	adds	r3, r7, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006be6:	4413      	add	r3, r2
 8006be8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bec:	463b      	mov	r3, r7
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	011a      	lsls	r2, r3, #4
 8006bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c0c:	801a      	strh	r2, [r3, #0]
 8006c0e:	e001      	b.n	8006c14 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e02e      	b.n	8006c72 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c14:	1d3b      	adds	r3, r7, #4
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	463b      	mov	r3, r7
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006c32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006c36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006c3e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006c42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c46:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006c4a:	1d3b      	adds	r3, r7, #4
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	463b      	mov	r3, r7
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	441a      	add	r2, r3
 8006c58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d020      	beq.n	8006cd0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca4:	81bb      	strh	r3, [r7, #12]
 8006ca6:	89bb      	ldrh	r3, [r7, #12]
 8006ca8:	f083 0310 	eor.w	r3, r3, #16
 8006cac:	81bb      	strh	r3, [r7, #12]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	441a      	add	r2, r3
 8006cb8:	89bb      	ldrh	r3, [r7, #12]
 8006cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]
 8006cce:	e01f      	b.n	8006d10 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	81fb      	strh	r3, [r7, #14]
 8006ce8:	89fb      	ldrh	r3, [r7, #14]
 8006cea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cee:	81fb      	strh	r3, [r7, #14]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	441a      	add	r2, r3
 8006cfa:	89fb      	ldrh	r3, [r7, #14]
 8006cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	7b1b      	ldrb	r3, [r3, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f040 809d 	bne.w	8006e6a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d04c      	beq.n	8006dd2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	823b      	strh	r3, [r7, #16]
 8006d46:	8a3b      	ldrh	r3, [r7, #16]
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01b      	beq.n	8006d88 <USB_EPClearStall+0x6c>
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	81fb      	strh	r3, [r7, #14]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	89fb      	ldrh	r3, [r7, #14]
 8006d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	78db      	ldrb	r3, [r3, #3]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d06c      	beq.n	8006e6a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da6:	81bb      	strh	r3, [r7, #12]
 8006da8:	89bb      	ldrh	r3, [r7, #12]
 8006daa:	f083 0320 	eor.w	r3, r3, #32
 8006dae:	81bb      	strh	r3, [r7, #12]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	89bb      	ldrh	r3, [r7, #12]
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
 8006dd0:	e04b      	b.n	8006e6a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	82fb      	strh	r3, [r7, #22]
 8006de0:	8afb      	ldrh	r3, [r7, #22]
 8006de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01b      	beq.n	8006e22 <USB_EPClearStall+0x106>
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e00:	82bb      	strh	r3, [r7, #20]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	441a      	add	r2, r3
 8006e0c:	8abb      	ldrh	r3, [r7, #20]
 8006e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e38:	827b      	strh	r3, [r7, #18]
 8006e3a:	8a7b      	ldrh	r3, [r7, #18]
 8006e3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e40:	827b      	strh	r3, [r7, #18]
 8006e42:	8a7b      	ldrh	r3, [r7, #18]
 8006e44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e48:	827b      	strh	r3, [r7, #18]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	8a7b      	ldrh	r3, [r7, #18]
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr

08006e76 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d103      	bne.n	8006e90 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2280      	movs	r2, #128	; 0x80
 8006e8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr

08006e9c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr

08006eb0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b08d      	sub	sp, #52	; 0x34
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	460b      	mov	r3, r1
 8006f08:	80fb      	strh	r3, [r7, #6]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f0e:	88bb      	ldrh	r3, [r7, #4]
 8006f10:	3301      	adds	r3, #1
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	005a      	lsls	r2, r3, #1
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f30:	e01e      	b.n	8006f70 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	3302      	adds	r3, #2
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	3301      	adds	r3, #1
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1dd      	bne.n	8006f32 <USB_WritePMA+0x3a>
  }
}
 8006f76:	bf00      	nop
 8006f78:	3734      	adds	r7, #52	; 0x34
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b08b      	sub	sp, #44	; 0x2c
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	460b      	mov	r3, r1
 8006f90:	80fb      	strh	r3, [r7, #6]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f96:	88bb      	ldrh	r3, [r7, #4]
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	005a      	lsls	r2, r3, #1
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fb2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb8:	e01b      	b.n	8006ff2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	3302      	adds	r3, #2
 8006fea:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e0      	bne.n	8006fba <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ff8:	88bb      	ldrh	r3, [r7, #4]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	b2da      	uxtb	r2, r3
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	701a      	strb	r2, [r3, #0]
  }
}
 8007014:	bf00      	nop
 8007016:	372c      	adds	r7, #44	; 0x2c
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr

0800701e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7c1b      	ldrb	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d115      	bne.n	8007062 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800703a:	2202      	movs	r2, #2
 800703c:	2181      	movs	r1, #129	; 0x81
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fed2 	bl	8008de8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800704a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800704e:	2202      	movs	r2, #2
 8007050:	2101      	movs	r1, #1
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 fec8 	bl	8008de8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007060:	e012      	b.n	8007088 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007062:	2340      	movs	r3, #64	; 0x40
 8007064:	2202      	movs	r2, #2
 8007066:	2181      	movs	r1, #129	; 0x81
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 febd 	bl	8008de8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007074:	2340      	movs	r3, #64	; 0x40
 8007076:	2202      	movs	r2, #2
 8007078:	2101      	movs	r1, #1
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 feb4 	bl	8008de8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007088:	2308      	movs	r3, #8
 800708a:	2203      	movs	r2, #3
 800708c:	2182      	movs	r1, #130	; 0x82
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 feaa 	bl	8008de8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800709a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800709e:	f001 ffcb 	bl	8009038 <USBD_static_malloc>
 80070a2:	4602      	mov	r2, r0
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d102      	bne.n	80070ba <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80070b4:	2301      	movs	r3, #1
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	e026      	b.n	8007108 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7c1b      	ldrb	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d109      	bne.n	80070f8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070ee:	2101      	movs	r1, #1
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 ff6a 	bl	8008fca <USBD_LL_PrepareReceive>
 80070f6:	e007      	b.n	8007108 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070fe:	2340      	movs	r3, #64	; 0x40
 8007100:	2101      	movs	r1, #1
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 ff61 	bl	8008fca <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007122:	2181      	movs	r1, #129	; 0x81
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 fe85 	bl	8008e34 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007130:	2101      	movs	r1, #1
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fe7e 	bl	8008e34 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007140:	2182      	movs	r1, #130	; 0x82
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 fe76 	bl	8008e34 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00e      	beq.n	8007176 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007168:	4618      	mov	r0, r3
 800716a:	f001 ff71 	bl	8009050 <USBD_static_free>
    pdev->pClassData = NULL;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007190:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d039      	beq.n	800721e <USBD_CDC_Setup+0x9e>
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d17c      	bne.n	80072a8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	88db      	ldrh	r3, [r3, #6]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d029      	beq.n	800720a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	b25b      	sxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	da11      	bge.n	80071e4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80071cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	88d2      	ldrh	r2, [r2, #6]
 80071d2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071d4:	6939      	ldr	r1, [r7, #16]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	88db      	ldrh	r3, [r3, #6]
 80071da:	461a      	mov	r2, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 fa0f 	bl	8008600 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80071e2:	e068      	b.n	80072b6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	785a      	ldrb	r2, [r3, #1]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	88db      	ldrh	r3, [r3, #6]
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071fa:	6939      	ldr	r1, [r7, #16]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	88db      	ldrh	r3, [r3, #6]
 8007200:	461a      	mov	r2, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 fa2a 	bl	800865c <USBD_CtlPrepareRx>
      break;
 8007208:	e055      	b.n	80072b6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	7850      	ldrb	r0, [r2, #1]
 8007216:	2200      	movs	r2, #0
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	4798      	blx	r3
      break;
 800721c:	e04b      	b.n	80072b6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	2b0a      	cmp	r3, #10
 8007224:	d017      	beq.n	8007256 <USBD_CDC_Setup+0xd6>
 8007226:	2b0b      	cmp	r3, #11
 8007228:	d029      	beq.n	800727e <USBD_CDC_Setup+0xfe>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d133      	bne.n	8007296 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007234:	2b03      	cmp	r3, #3
 8007236:	d107      	bne.n	8007248 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	2202      	movs	r2, #2
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f9dd 	bl	8008600 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007246:	e02e      	b.n	80072a6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 f96e 	bl	800852c <USBD_CtlError>
            ret = USBD_FAIL;
 8007250:	2302      	movs	r3, #2
 8007252:	75fb      	strb	r3, [r7, #23]
          break;
 8007254:	e027      	b.n	80072a6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725c:	2b03      	cmp	r3, #3
 800725e:	d107      	bne.n	8007270 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007260:	f107 030f 	add.w	r3, r7, #15
 8007264:	2201      	movs	r2, #1
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 f9c9 	bl	8008600 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800726e:	e01a      	b.n	80072a6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 f95a 	bl	800852c <USBD_CtlError>
            ret = USBD_FAIL;
 8007278:	2302      	movs	r3, #2
 800727a:	75fb      	strb	r3, [r7, #23]
          break;
 800727c:	e013      	b.n	80072a6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007284:	2b03      	cmp	r3, #3
 8007286:	d00d      	beq.n	80072a4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 f94e 	bl	800852c <USBD_CtlError>
            ret = USBD_FAIL;
 8007290:	2302      	movs	r3, #2
 8007292:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007294:	e006      	b.n	80072a4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f947 	bl	800852c <USBD_CtlError>
          ret = USBD_FAIL;
 800729e:	2302      	movs	r3, #2
 80072a0:	75fb      	strb	r3, [r7, #23]
          break;
 80072a2:	e000      	b.n	80072a6 <USBD_CDC_Setup+0x126>
          break;
 80072a4:	bf00      	nop
      }
      break;
 80072a6:	e006      	b.n	80072b6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 f93e 	bl	800852c <USBD_CtlError>
      ret = USBD_FAIL;
 80072b0:	2302      	movs	r3, #2
 80072b2:	75fb      	strb	r3, [r7, #23]
      break;
 80072b4:	bf00      	nop
  }

  return ret;
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072da:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d03a      	beq.n	800735c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072e6:	78fa      	ldrb	r2, [r7, #3]
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	331c      	adds	r3, #28
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d029      	beq.n	8007350 <USBD_CDC_DataIn+0x90>
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	331c      	adds	r3, #28
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	78f9      	ldrb	r1, [r7, #3]
 8007310:	68b8      	ldr	r0, [r7, #8]
 8007312:	460b      	mov	r3, r1
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	4403      	add	r3, r0
 800731c:	3338      	adds	r3, #56	; 0x38
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	fbb2 f1f3 	udiv	r1, r2, r3
 8007324:	fb03 f301 	mul.w	r3, r3, r1
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d110      	bne.n	8007350 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	331c      	adds	r3, #28
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007342:	78f9      	ldrb	r1, [r7, #3]
 8007344:	2300      	movs	r3, #0
 8007346:	2200      	movs	r2, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 fe1b 	bl	8008f84 <USBD_LL_Transmit>
 800734e:	e003      	b.n	8007358 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	e000      	b.n	800735e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800735c:	2302      	movs	r3, #2
  }
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007378:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fe46 	bl	8009010 <USBD_LL_GetRxDataSize>
 8007384:	4602      	mov	r2, r0
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00d      	beq.n	80073b2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073aa:	4611      	mov	r1, r2
 80073ac:	4798      	blx	r3

    return USBD_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	e000      	b.n	80073b4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80073b2:	2302      	movs	r3, #2
  }
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d015      	beq.n	8007402 <USBD_CDC_EP0_RxReady+0x46>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073dc:	2bff      	cmp	r3, #255	; 0xff
 80073de:	d010      	beq.n	8007402 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80073ee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073f6:	b292      	uxth	r2, r2
 80073f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	22ff      	movs	r2, #255	; 0xff
 80073fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2243      	movs	r2, #67	; 0x43
 8007418:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800741a:	4b03      	ldr	r3, [pc, #12]	; (8007428 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	bc80      	pop	{r7}
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20000098 	.word	0x20000098

0800742c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2243      	movs	r2, #67	; 0x43
 8007438:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800743a:	4b03      	ldr	r3, [pc, #12]	; (8007448 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	20000054 	.word	0x20000054

0800744c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2243      	movs	r2, #67	; 0x43
 8007458:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800745a:	4b03      	ldr	r3, [pc, #12]	; (8007468 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	200000dc 	.word	0x200000dc

0800746c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	220a      	movs	r2, #10
 8007478:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800747a:	4b03      	ldr	r3, [pc, #12]	; (8007488 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	bc80      	pop	{r7}
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000010 	.word	0x20000010

0800748c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007496:	2302      	movs	r3, #2
 8007498:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	371c      	adds	r7, #28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr

08007510 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01c      	beq.n	8007564 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007530:	2b00      	cmp	r3, #0
 8007532:	d115      	bne.n	8007560 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2201      	movs	r2, #1
 8007538:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007552:	b29b      	uxth	r3, r3
 8007554:	2181      	movs	r1, #129	; 0x81
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fd14 	bl	8008f84 <USBD_LL_Transmit>

      return USBD_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	e002      	b.n	8007566 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007564:	2302      	movs	r3, #2
  }
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b084      	sub	sp, #16
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d017      	beq.n	80075b8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	7c1b      	ldrb	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d109      	bne.n	80075a4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800759a:	2101      	movs	r1, #1
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fd14 	bl	8008fca <USBD_LL_PrepareReceive>
 80075a2:	e007      	b.n	80075b4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075aa:	2340      	movs	r3, #64	; 0x40
 80075ac:	2101      	movs	r1, #1
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 fd0b 	bl	8008fca <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	e000      	b.n	80075ba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80075b8:	2302      	movs	r3, #2
  }
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	4613      	mov	r3, r2
 80075ce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075d6:	2302      	movs	r3, #2
 80075d8:	e01a      	b.n	8007610 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	79fa      	ldrb	r2, [r7, #7]
 8007606:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f001 fb5d 	bl	8008cc8 <USBD_LL_Init>

  return USBD_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d006      	beq.n	800763a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]
 8007638:	e001      	b.n	800763e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800763a:	2302      	movs	r3, #2
 800763c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr

0800764a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 fb92 	bl	8008d7c <USBD_LL_Start>

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6852      	ldr	r2, [r2, #4]
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	4611      	mov	r1, r2
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 fb97 	bl	8008db2 <USBD_LL_Stop>

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr

080076a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076ae:	2302      	movs	r3, #2
 80076b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00c      	beq.n	80076d6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	4611      	mov	r1, r2
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	4798      	blx	r3
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	4611      	mov	r1, r2
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	4798      	blx	r3

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fecb 	bl	80084b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800772c:	461a      	mov	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800773a:	f003 031f 	and.w	r3, r3, #31
 800773e:	2b01      	cmp	r3, #1
 8007740:	d00c      	beq.n	800775c <USBD_LL_SetupStage+0x56>
 8007742:	2b01      	cmp	r3, #1
 8007744:	d302      	bcc.n	800774c <USBD_LL_SetupStage+0x46>
 8007746:	2b02      	cmp	r3, #2
 8007748:	d010      	beq.n	800776c <USBD_LL_SetupStage+0x66>
 800774a:	e017      	b.n	800777c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f9cb 	bl	8007af0 <USBD_StdDevReq>
      break;
 800775a:	e01a      	b.n	8007792 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fa2d 	bl	8007bc4 <USBD_StdItfReq>
      break;
 800776a:	e012      	b.n	8007792 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fa6b 	bl	8007c50 <USBD_StdEPReq>
      break;
 800777a:	e00a      	b.n	8007792 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007782:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007786:	b2db      	uxtb	r3, r3
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 fb71 	bl	8008e72 <USBD_LL_StallEP>
      break;
 8007790:	bf00      	nop
  }

  return USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	460b      	mov	r3, r1
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80077aa:	7afb      	ldrb	r3, [r7, #11]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d14b      	bne.n	8007848 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d134      	bne.n	800782c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d919      	bls.n	8007802 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	1ad2      	subs	r2, r2, r3
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d203      	bcs.n	80077f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	e002      	b.n	80077f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 ff4c 	bl	8008698 <USBD_CtlContinueRx>
 8007800:	e038      	b.n	8007874 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007814:	2b03      	cmp	r3, #3
 8007816:	d105      	bne.n	8007824 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 ff49 	bl	80086bc <USBD_CtlSendStatus>
 800782a:	e023      	b.n	8007874 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007832:	2b05      	cmp	r3, #5
 8007834:	d11e      	bne.n	8007874 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800783e:	2100      	movs	r1, #0
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f001 fb16 	bl	8008e72 <USBD_LL_StallEP>
 8007846:	e015      	b.n	8007874 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00d      	beq.n	8007870 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800785a:	2b03      	cmp	r3, #3
 800785c:	d108      	bne.n	8007870 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	7afa      	ldrb	r2, [r7, #11]
 8007868:	4611      	mov	r1, r2
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	4798      	blx	r3
 800786e:	e001      	b.n	8007874 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007870:	2302      	movs	r3, #2
 8007872:	e000      	b.n	8007876 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b086      	sub	sp, #24
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	460b      	mov	r3, r1
 8007888:	607a      	str	r2, [r7, #4]
 800788a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d17f      	bne.n	8007992 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3314      	adds	r3, #20
 8007896:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d15c      	bne.n	800795c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d915      	bls.n	80078da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	1ad2      	subs	r2, r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 feb6 	bl	8008638 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078cc:	2300      	movs	r3, #0
 80078ce:	2200      	movs	r2, #0
 80078d0:	2100      	movs	r1, #0
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f001 fb79 	bl	8008fca <USBD_LL_PrepareReceive>
 80078d8:	e04e      	b.n	8007978 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	6912      	ldr	r2, [r2, #16]
 80078e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80078e6:	fb02 f201 	mul.w	r2, r2, r1
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d11c      	bne.n	800792a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d316      	bcc.n	800792a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007906:	429a      	cmp	r2, r3
 8007908:	d20f      	bcs.n	800792a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800790a:	2200      	movs	r2, #0
 800790c:	2100      	movs	r1, #0
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fe92 	bl	8008638 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800791c:	2300      	movs	r3, #0
 800791e:	2200      	movs	r2, #0
 8007920:	2100      	movs	r1, #0
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f001 fb51 	bl	8008fca <USBD_LL_PrepareReceive>
 8007928:	e026      	b.n	8007978 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800793c:	2b03      	cmp	r3, #3
 800793e:	d105      	bne.n	800794c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800794c:	2180      	movs	r1, #128	; 0x80
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f001 fa8f 	bl	8008e72 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 fec4 	bl	80086e2 <USBD_CtlReceiveStatus>
 800795a:	e00d      	b.n	8007978 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007962:	2b04      	cmp	r3, #4
 8007964:	d004      	beq.n	8007970 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800796c:	2b00      	cmp	r3, #0
 800796e:	d103      	bne.n	8007978 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007970:	2180      	movs	r1, #128	; 0x80
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f001 fa7d 	bl	8008e72 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800797e:	2b01      	cmp	r3, #1
 8007980:	d11d      	bne.n	80079be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff fe83 	bl	800768e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007990:	e015      	b.n	80079be <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00d      	beq.n	80079ba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d108      	bne.n	80079ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	7afa      	ldrb	r2, [r7, #11]
 80079b2:	4611      	mov	r1, r2
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	4798      	blx	r3
 80079b8:	e001      	b.n	80079be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079ba:	2302      	movs	r3, #2
 80079bc:	e000      	b.n	80079c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079d0:	2340      	movs	r3, #64	; 0x40
 80079d2:	2200      	movs	r2, #0
 80079d4:	2100      	movs	r1, #0
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 fa06 	bl	8008de8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2240      	movs	r2, #64	; 0x40
 80079e8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079ec:	2340      	movs	r3, #64	; 0x40
 80079ee:	2200      	movs	r2, #0
 80079f0:	2180      	movs	r1, #128	; 0x80
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f9f8 	bl	8008de8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2240      	movs	r2, #64	; 0x40
 8007a02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d009      	beq.n	8007a40 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6852      	ldr	r2, [r2, #4]
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
  }

  return USBD_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bc80      	pop	{r7}
 8007a8e:	4770      	bx	lr

08007a90 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d105      	bne.n	8007aae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr

08007aba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d10b      	bne.n	8007ae4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	d004      	beq.n	8007b14 <USBD_StdDevReq+0x24>
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d002      	beq.n	8007b14 <USBD_StdDevReq+0x24>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d008      	beq.n	8007b24 <USBD_StdDevReq+0x34>
 8007b12:	e04c      	b.n	8007bae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
      break;
 8007b22:	e049      	b.n	8007bb8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	d83a      	bhi.n	8007ba2 <USBD_StdDevReq+0xb2>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <USBD_StdDevReq+0x44>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b85 	.word	0x08007b85
 8007b38:	08007b99 	.word	0x08007b99
 8007b3c:	08007ba3 	.word	0x08007ba3
 8007b40:	08007b8f 	.word	0x08007b8f
 8007b44:	08007ba3 	.word	0x08007ba3
 8007b48:	08007b67 	.word	0x08007b67
 8007b4c:	08007b5d 	.word	0x08007b5d
 8007b50:	08007ba3 	.word	0x08007ba3
 8007b54:	08007b7b 	.word	0x08007b7b
 8007b58:	08007b71 	.word	0x08007b71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f9d4 	bl	8007f0c <USBD_GetDescriptor>
          break;
 8007b64:	e022      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fb37 	bl	80081dc <USBD_SetAddress>
          break;
 8007b6e:	e01d      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fb74 	bl	8008260 <USBD_SetConfig>
          break;
 8007b78:	e018      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fbfd 	bl	800837c <USBD_GetConfig>
          break;
 8007b82:	e013      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fc2c 	bl	80083e4 <USBD_GetStatus>
          break;
 8007b8c:	e00e      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fc5a 	bl	800844a <USBD_SetFeature>
          break;
 8007b96:	e009      	b.n	8007bac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fc69 	bl	8008472 <USBD_ClrFeature>
          break;
 8007ba0:	e004      	b.n	8007bac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fcc1 	bl	800852c <USBD_CtlError>
          break;
 8007baa:	bf00      	nop
      }
      break;
 8007bac:	e004      	b.n	8007bb8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fcbb 	bl	800852c <USBD_CtlError>
      break;
 8007bb6:	bf00      	nop
  }

  return ret;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop

08007bc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d003      	beq.n	8007be6 <USBD_StdItfReq+0x22>
 8007bde:	2b40      	cmp	r3, #64	; 0x40
 8007be0:	d001      	beq.n	8007be6 <USBD_StdItfReq+0x22>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d12a      	bne.n	8007c3c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bec:	3b01      	subs	r3, #1
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d81d      	bhi.n	8007c2e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	889b      	ldrh	r3, [r3, #4]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d813      	bhi.n	8007c24 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	88db      	ldrh	r3, [r3, #6]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d110      	bne.n	8007c38 <USBD_StdItfReq+0x74>
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10d      	bne.n	8007c38 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fd4d 	bl	80086bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c22:	e009      	b.n	8007c38 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fc80 	bl	800852c <USBD_CtlError>
          break;
 8007c2c:	e004      	b.n	8007c38 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fc7b 	bl	800852c <USBD_CtlError>
          break;
 8007c36:	e000      	b.n	8007c3a <USBD_StdItfReq+0x76>
          break;
 8007c38:	bf00      	nop
      }
      break;
 8007c3a:	e004      	b.n	8007c46 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fc74 	bl	800852c <USBD_CtlError>
      break;
 8007c44:	bf00      	nop
  }

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	889b      	ldrh	r3, [r3, #4]
 8007c62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c6c:	2b20      	cmp	r3, #32
 8007c6e:	d004      	beq.n	8007c7a <USBD_StdEPReq+0x2a>
 8007c70:	2b40      	cmp	r3, #64	; 0x40
 8007c72:	d002      	beq.n	8007c7a <USBD_StdEPReq+0x2a>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d008      	beq.n	8007c8a <USBD_StdEPReq+0x3a>
 8007c78:	e13d      	b.n	8007ef6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	4798      	blx	r3
      break;
 8007c88:	e13a      	b.n	8007f00 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d10a      	bne.n	8007cac <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	e12a      	b.n	8007f02 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d03e      	beq.n	8007d32 <USBD_StdEPReq+0xe2>
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d002      	beq.n	8007cbe <USBD_StdEPReq+0x6e>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d070      	beq.n	8007d9e <USBD_StdEPReq+0x14e>
 8007cbc:	e115      	b.n	8007eea <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d002      	beq.n	8007cce <USBD_StdEPReq+0x7e>
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d015      	beq.n	8007cf8 <USBD_StdEPReq+0xa8>
 8007ccc:	e02b      	b.n	8007d26 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00c      	beq.n	8007cee <USBD_StdEPReq+0x9e>
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b80      	cmp	r3, #128	; 0x80
 8007cd8:	d009      	beq.n	8007cee <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 f8c7 	bl	8008e72 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ce4:	2180      	movs	r1, #128	; 0x80
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 f8c3 	bl	8008e72 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cec:	e020      	b.n	8007d30 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fc1b 	bl	800852c <USBD_CtlError>
              break;
 8007cf6:	e01b      	b.n	8007d30 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	885b      	ldrh	r3, [r3, #2]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10e      	bne.n	8007d1e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <USBD_StdEPReq+0xce>
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b80      	cmp	r3, #128	; 0x80
 8007d0a:	d008      	beq.n	8007d1e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	88db      	ldrh	r3, [r3, #6]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 f8aa 	bl	8008e72 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fccc 	bl	80086bc <USBD_CtlSendStatus>

              break;
 8007d24:	e004      	b.n	8007d30 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fbff 	bl	800852c <USBD_CtlError>
              break;
 8007d2e:	bf00      	nop
          }
          break;
 8007d30:	e0e0      	b.n	8007ef4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d002      	beq.n	8007d42 <USBD_StdEPReq+0xf2>
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d015      	beq.n	8007d6c <USBD_StdEPReq+0x11c>
 8007d40:	e026      	b.n	8007d90 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00c      	beq.n	8007d62 <USBD_StdEPReq+0x112>
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b80      	cmp	r3, #128	; 0x80
 8007d4c:	d009      	beq.n	8007d62 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 f88d 	bl	8008e72 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 f889 	bl	8008e72 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d60:	e01c      	b.n	8007d9c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fbe1 	bl	800852c <USBD_CtlError>
              break;
 8007d6a:	e017      	b.n	8007d9c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	885b      	ldrh	r3, [r3, #2]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d112      	bne.n	8007d9a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 f894 	bl	8008eb0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fc97 	bl	80086bc <USBD_CtlSendStatus>
              }
              break;
 8007d8e:	e004      	b.n	8007d9a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fbca 	bl	800852c <USBD_CtlError>
              break;
 8007d98:	e000      	b.n	8007d9c <USBD_StdEPReq+0x14c>
              break;
 8007d9a:	bf00      	nop
          }
          break;
 8007d9c:	e0aa      	b.n	8007ef4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d002      	beq.n	8007dae <USBD_StdEPReq+0x15e>
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d032      	beq.n	8007e12 <USBD_StdEPReq+0x1c2>
 8007dac:	e097      	b.n	8007ede <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d007      	beq.n	8007dc4 <USBD_StdEPReq+0x174>
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	2b80      	cmp	r3, #128	; 0x80
 8007db8:	d004      	beq.n	8007dc4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fbb5 	bl	800852c <USBD_CtlError>
                break;
 8007dc2:	e091      	b.n	8007ee8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	da0b      	bge.n	8007de4 <USBD_StdEPReq+0x194>
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	3310      	adds	r3, #16
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4413      	add	r3, r2
 8007de0:	3304      	adds	r3, #4
 8007de2:	e00b      	b.n	8007dfc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	4413      	add	r3, r2
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2202      	movs	r2, #2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fbf8 	bl	8008600 <USBD_CtlSendData>
              break;
 8007e10:	e06a      	b.n	8007ee8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da11      	bge.n	8007e3e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	f003 020f 	and.w	r2, r3, #15
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	3318      	adds	r3, #24
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d117      	bne.n	8007e64 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fb78 	bl	800852c <USBD_CtlError>
                  break;
 8007e3c:	e054      	b.n	8007ee8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	f003 020f 	and.w	r2, r3, #15
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d104      	bne.n	8007e64 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fb65 	bl	800852c <USBD_CtlError>
                  break;
 8007e62:	e041      	b.n	8007ee8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	da0b      	bge.n	8007e84 <USBD_StdEPReq+0x234>
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	3310      	adds	r3, #16
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	4413      	add	r3, r2
 8007e80:	3304      	adds	r3, #4
 8007e82:	e00b      	b.n	8007e9c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	4413      	add	r3, r2
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <USBD_StdEPReq+0x25a>
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b80      	cmp	r3, #128	; 0x80
 8007ea8:	d103      	bne.n	8007eb2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e00e      	b.n	8007ed0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 f819 	bl	8008eee <USBD_LL_IsStallEP>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	e002      	b.n	8007ed0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fb92 	bl	8008600 <USBD_CtlSendData>
              break;
 8007edc:	e004      	b.n	8007ee8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fb23 	bl	800852c <USBD_CtlError>
              break;
 8007ee6:	bf00      	nop
          }
          break;
 8007ee8:	e004      	b.n	8007ef4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fb1d 	bl	800852c <USBD_CtlError>
          break;
 8007ef2:	bf00      	nop
      }
      break;
 8007ef4:	e004      	b.n	8007f00 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fb17 	bl	800852c <USBD_CtlError>
      break;
 8007efe:	bf00      	nop
  }

  return ret;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	885b      	ldrh	r3, [r3, #2]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	2b06      	cmp	r3, #6
 8007f2e:	f200 8128 	bhi.w	8008182 <USBD_GetDescriptor+0x276>
 8007f32:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <USBD_GetDescriptor+0x2c>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f55 	.word	0x08007f55
 8007f3c:	08007f6d 	.word	0x08007f6d
 8007f40:	08007fad 	.word	0x08007fad
 8007f44:	08008183 	.word	0x08008183
 8007f48:	08008183 	.word	0x08008183
 8007f4c:	08008123 	.word	0x08008123
 8007f50:	0800814f 	.word	0x0800814f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	7c12      	ldrb	r2, [r2, #16]
 8007f60:	f107 0108 	add.w	r1, r7, #8
 8007f64:	4610      	mov	r0, r2
 8007f66:	4798      	blx	r3
 8007f68:	60f8      	str	r0, [r7, #12]
      break;
 8007f6a:	e112      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7c1b      	ldrb	r3, [r3, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10d      	bne.n	8007f90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7c:	f107 0208 	add.w	r2, r7, #8
 8007f80:	4610      	mov	r0, r2
 8007f82:	4798      	blx	r3
 8007f84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f8e:	e100      	b.n	8008192 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	f107 0208 	add.w	r2, r7, #8
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
 8007fa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	701a      	strb	r2, [r3, #0]
      break;
 8007faa:	e0f2      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	885b      	ldrh	r3, [r3, #2]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	f200 80ac 	bhi.w	8008110 <USBD_GetDescriptor+0x204>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <USBD_GetDescriptor+0xb4>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fd9 	.word	0x08007fd9
 8007fc4:	0800800d 	.word	0x0800800d
 8007fc8:	08008041 	.word	0x08008041
 8007fcc:	08008075 	.word	0x08008075
 8007fd0:	080080a9 	.word	0x080080a9
 8007fd4:	080080dd 	.word	0x080080dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	7c12      	ldrb	r2, [r2, #16]
 8007ff0:	f107 0108 	add.w	r1, r7, #8
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4798      	blx	r3
 8007ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ffa:	e091      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fa94 	bl	800852c <USBD_CtlError>
            err++;
 8008004:	7afb      	ldrb	r3, [r7, #11]
 8008006:	3301      	adds	r3, #1
 8008008:	72fb      	strb	r3, [r7, #11]
          break;
 800800a:	e089      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00b      	beq.n	8008030 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	7c12      	ldrb	r2, [r2, #16]
 8008024:	f107 0108 	add.w	r1, r7, #8
 8008028:	4610      	mov	r0, r2
 800802a:	4798      	blx	r3
 800802c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800802e:	e077      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fa7a 	bl	800852c <USBD_CtlError>
            err++;
 8008038:	7afb      	ldrb	r3, [r7, #11]
 800803a:	3301      	adds	r3, #1
 800803c:	72fb      	strb	r3, [r7, #11]
          break;
 800803e:	e06f      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	7c12      	ldrb	r2, [r2, #16]
 8008058:	f107 0108 	add.w	r1, r7, #8
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008062:	e05d      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa60 	bl	800852c <USBD_CtlError>
            err++;
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	3301      	adds	r3, #1
 8008070:	72fb      	strb	r3, [r7, #11]
          break;
 8008072:	e055      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	7c12      	ldrb	r2, [r2, #16]
 800808c:	f107 0108 	add.w	r1, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008096:	e043      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa46 	bl	800852c <USBD_CtlError>
            err++;
 80080a0:	7afb      	ldrb	r3, [r7, #11]
 80080a2:	3301      	adds	r3, #1
 80080a4:	72fb      	strb	r3, [r7, #11]
          break;
 80080a6:	e03b      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	7c12      	ldrb	r2, [r2, #16]
 80080c0:	f107 0108 	add.w	r1, r7, #8
 80080c4:	4610      	mov	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ca:	e029      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa2c 	bl	800852c <USBD_CtlError>
            err++;
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	3301      	adds	r3, #1
 80080d8:	72fb      	strb	r3, [r7, #11]
          break;
 80080da:	e021      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	7c12      	ldrb	r2, [r2, #16]
 80080f4:	f107 0108 	add.w	r1, r7, #8
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080fe:	e00f      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa12 	bl	800852c <USBD_CtlError>
            err++;
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	3301      	adds	r3, #1
 800810c:	72fb      	strb	r3, [r7, #11]
          break;
 800810e:	e007      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa0a 	bl	800852c <USBD_CtlError>
          err++;
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	3301      	adds	r3, #1
 800811c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800811e:	e038      	b.n	8008192 <USBD_GetDescriptor+0x286>
 8008120:	e037      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	7c1b      	ldrb	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008132:	f107 0208 	add.w	r2, r7, #8
 8008136:	4610      	mov	r0, r2
 8008138:	4798      	blx	r3
 800813a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800813c:	e029      	b.n	8008192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f9f3 	bl	800852c <USBD_CtlError>
        err++;
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	3301      	adds	r3, #1
 800814a:	72fb      	strb	r3, [r7, #11]
      break;
 800814c:	e021      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7c1b      	ldrb	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10d      	bne.n	8008172 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	f107 0208 	add.w	r2, r7, #8
 8008162:	4610      	mov	r0, r2
 8008164:	4798      	blx	r3
 8008166:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	2207      	movs	r2, #7
 800816e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008170:	e00f      	b.n	8008192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f9d9 	bl	800852c <USBD_CtlError>
        err++;
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	3301      	adds	r3, #1
 800817e:	72fb      	strb	r3, [r7, #11]
      break;
 8008180:	e007      	b.n	8008192 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f9d1 	bl	800852c <USBD_CtlError>
      err++;
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	3301      	adds	r3, #1
 800818e:	72fb      	strb	r3, [r7, #11]
      break;
 8008190:	bf00      	nop
  }

  if (err != 0U)
 8008192:	7afb      	ldrb	r3, [r7, #11]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d11c      	bne.n	80081d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008198:	893b      	ldrh	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d011      	beq.n	80081c2 <USBD_GetDescriptor+0x2b6>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	88db      	ldrh	r3, [r3, #6]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00d      	beq.n	80081c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88da      	ldrh	r2, [r3, #6]
 80081aa:	893b      	ldrh	r3, [r7, #8]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	bf28      	it	cs
 80081b0:	4613      	movcs	r3, r2
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081b6:	893b      	ldrh	r3, [r7, #8]
 80081b8:	461a      	mov	r2, r3
 80081ba:	68f9      	ldr	r1, [r7, #12]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fa1f 	bl	8008600 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	88db      	ldrh	r3, [r3, #6]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d104      	bne.n	80081d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa76 	bl	80086bc <USBD_CtlSendStatus>
 80081d0:	e000      	b.n	80081d4 <USBD_GetDescriptor+0x2c8>
    return;
 80081d2:	bf00      	nop
    }
  }
}
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop

080081dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	889b      	ldrh	r3, [r3, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d130      	bne.n	8008250 <USBD_SetAddress+0x74>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	88db      	ldrh	r3, [r3, #6]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d12c      	bne.n	8008250 <USBD_SetAddress+0x74>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	2b7f      	cmp	r3, #127	; 0x7f
 80081fc:	d828      	bhi.n	8008250 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	885b      	ldrh	r3, [r3, #2]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008208:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	2b03      	cmp	r3, #3
 8008212:	d104      	bne.n	800821e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f988 	bl	800852c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821c:	e01c      	b.n	8008258 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	7bfa      	ldrb	r2, [r7, #15]
 8008222:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fe8b 	bl	8008f46 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa43 	bl	80086bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d004      	beq.n	8008246 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008244:	e008      	b.n	8008258 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824e:	e003      	b.n	8008258 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f96a 	bl	800852c <USBD_CtlError>
  }
}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	885b      	ldrh	r3, [r3, #2]
 800826e:	b2da      	uxtb	r2, r3
 8008270:	4b41      	ldr	r3, [pc, #260]	; (8008378 <USBD_SetConfig+0x118>)
 8008272:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008274:	4b40      	ldr	r3, [pc, #256]	; (8008378 <USBD_SetConfig+0x118>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d904      	bls.n	8008286 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f954 	bl	800852c <USBD_CtlError>
 8008284:	e075      	b.n	8008372 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828c:	2b02      	cmp	r3, #2
 800828e:	d002      	beq.n	8008296 <USBD_SetConfig+0x36>
 8008290:	2b03      	cmp	r3, #3
 8008292:	d023      	beq.n	80082dc <USBD_SetConfig+0x7c>
 8008294:	e062      	b.n	800835c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008296:	4b38      	ldr	r3, [pc, #224]	; (8008378 <USBD_SetConfig+0x118>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d01a      	beq.n	80082d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800829e:	4b36      	ldr	r3, [pc, #216]	; (8008378 <USBD_SetConfig+0x118>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2203      	movs	r2, #3
 80082ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082b0:	4b31      	ldr	r3, [pc, #196]	; (8008378 <USBD_SetConfig+0x118>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff f9f3 	bl	80076a2 <USBD_SetClassConfig>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d104      	bne.n	80082cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f931 	bl	800852c <USBD_CtlError>
            return;
 80082ca:	e052      	b.n	8008372 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f9f5 	bl	80086bc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082d2:	e04e      	b.n	8008372 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f9f1 	bl	80086bc <USBD_CtlSendStatus>
        break;
 80082da:	e04a      	b.n	8008372 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80082dc:	4b26      	ldr	r3, [pc, #152]	; (8008378 <USBD_SetConfig+0x118>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d112      	bne.n	800830a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80082ec:	4b22      	ldr	r3, [pc, #136]	; (8008378 <USBD_SetConfig+0x118>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80082f6:	4b20      	ldr	r3, [pc, #128]	; (8008378 <USBD_SetConfig+0x118>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff f9ef 	bl	80076e0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f9da 	bl	80086bc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008308:	e033      	b.n	8008372 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800830a:	4b1b      	ldr	r3, [pc, #108]	; (8008378 <USBD_SetConfig+0x118>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d01d      	beq.n	8008354 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff f9dd 	bl	80076e0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008326:	4b14      	ldr	r3, [pc, #80]	; (8008378 <USBD_SetConfig+0x118>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008330:	4b11      	ldr	r3, [pc, #68]	; (8008378 <USBD_SetConfig+0x118>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7ff f9b3 	bl	80076a2 <USBD_SetClassConfig>
 800833c:	4603      	mov	r3, r0
 800833e:	2b02      	cmp	r3, #2
 8008340:	d104      	bne.n	800834c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f8f1 	bl	800852c <USBD_CtlError>
            return;
 800834a:	e012      	b.n	8008372 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f9b5 	bl	80086bc <USBD_CtlSendStatus>
        break;
 8008352:	e00e      	b.n	8008372 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f9b1 	bl	80086bc <USBD_CtlSendStatus>
        break;
 800835a:	e00a      	b.n	8008372 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f8e4 	bl	800852c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008364:	4b04      	ldr	r3, [pc, #16]	; (8008378 <USBD_SetConfig+0x118>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7ff f9b8 	bl	80076e0 <USBD_ClrClassConfig>
        break;
 8008370:	bf00      	nop
    }
  }
}
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20000374 	.word	0x20000374

0800837c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	88db      	ldrh	r3, [r3, #6]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d004      	beq.n	8008398 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f8cb 	bl	800852c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008396:	e021      	b.n	80083dc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839e:	2b01      	cmp	r3, #1
 80083a0:	db17      	blt.n	80083d2 <USBD_GetConfig+0x56>
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	dd02      	ble.n	80083ac <USBD_GetConfig+0x30>
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d00b      	beq.n	80083c2 <USBD_GetConfig+0x46>
 80083aa:	e012      	b.n	80083d2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3308      	adds	r3, #8
 80083b6:	2201      	movs	r2, #1
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f920 	bl	8008600 <USBD_CtlSendData>
        break;
 80083c0:	e00c      	b.n	80083dc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3304      	adds	r3, #4
 80083c6:	2201      	movs	r2, #1
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f918 	bl	8008600 <USBD_CtlSendData>
        break;
 80083d0:	e004      	b.n	80083dc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f8a9 	bl	800852c <USBD_CtlError>
        break;
 80083da:	bf00      	nop
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f4:	3b01      	subs	r3, #1
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d81e      	bhi.n	8008438 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	88db      	ldrh	r3, [r3, #6]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d004      	beq.n	800840c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f891 	bl	800852c <USBD_CtlError>
        break;
 800840a:	e01a      	b.n	8008442 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f043 0202 	orr.w	r2, r3, #2
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	330c      	adds	r3, #12
 800842c:	2202      	movs	r2, #2
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f8e5 	bl	8008600 <USBD_CtlSendData>
      break;
 8008436:	e004      	b.n	8008442 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f876 	bl	800852c <USBD_CtlError>
      break;
 8008440:	bf00      	nop
  }
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	885b      	ldrh	r3, [r3, #2]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d106      	bne.n	800846a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f929 	bl	80086bc <USBD_CtlSendStatus>
  }
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008482:	3b01      	subs	r3, #1
 8008484:	2b02      	cmp	r3, #2
 8008486:	d80b      	bhi.n	80084a0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	885b      	ldrh	r3, [r3, #2]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d10c      	bne.n	80084aa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f90f 	bl	80086bc <USBD_CtlSendStatus>
      }
      break;
 800849e:	e004      	b.n	80084aa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f842 	bl	800852c <USBD_CtlError>
      break;
 80084a8:	e000      	b.n	80084ac <USBD_ClrFeature+0x3a>
      break;
 80084aa:	bf00      	nop
  }
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	785a      	ldrb	r2, [r3, #1]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	3302      	adds	r3, #2
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	3303      	adds	r3, #3
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	4413      	add	r3, r2
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	3304      	adds	r3, #4
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	3305      	adds	r3, #5
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	021b      	lsls	r3, r3, #8
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	4413      	add	r3, r2
 8008500:	b29a      	uxth	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	3306      	adds	r3, #6
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b29a      	uxth	r2, r3
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	3307      	adds	r3, #7
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	b29b      	uxth	r3, r3
 8008516:	021b      	lsls	r3, r3, #8
 8008518:	b29b      	uxth	r3, r3
 800851a:	4413      	add	r3, r2
 800851c:	b29a      	uxth	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	80da      	strh	r2, [r3, #6]

}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fc9a 	bl	8008e72 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800853e:	2100      	movs	r1, #0
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fc96 	bl	8008e72 <USBD_LL_StallEP>
}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b086      	sub	sp, #24
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d032      	beq.n	80085ca <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 f834 	bl	80085d2 <USBD_GetLen>
 800856a:	4603      	mov	r3, r0
 800856c:	3301      	adds	r3, #1
 800856e:	b29b      	uxth	r3, r3
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	75fa      	strb	r2, [r7, #23]
 800857e:	461a      	mov	r2, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4413      	add	r3, r2
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	7812      	ldrb	r2, [r2, #0]
 8008588:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	75fa      	strb	r2, [r7, #23]
 8008590:	461a      	mov	r2, r3
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4413      	add	r3, r2
 8008596:	2203      	movs	r2, #3
 8008598:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800859a:	e012      	b.n	80085c2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	60fa      	str	r2, [r7, #12]
 80085a2:	7dfa      	ldrb	r2, [r7, #23]
 80085a4:	1c51      	adds	r1, r2, #1
 80085a6:	75f9      	strb	r1, [r7, #23]
 80085a8:	4611      	mov	r1, r2
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	440a      	add	r2, r1
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	75fa      	strb	r2, [r7, #23]
 80085b8:	461a      	mov	r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4413      	add	r3, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e8      	bne.n	800859c <USBD_GetString+0x4e>
    }
  }
}
 80085ca:	bf00      	nop
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b085      	sub	sp, #20
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80085de:	e005      	b.n	80085ec <USBD_GetLen+0x1a>
  {
    len++;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	3301      	adds	r3, #1
 80085e4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3301      	adds	r3, #1
 80085ea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1f5      	bne.n	80085e0 <USBD_GetLen+0xe>
  }

  return len;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc80      	pop	{r7}
 80085fe:	4770      	bx	lr

08008600 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2202      	movs	r2, #2
 8008612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008616:	88fa      	ldrh	r2, [r7, #6]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800861c:	88fa      	ldrh	r2, [r7, #6]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	2100      	movs	r1, #0
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fcab 	bl	8008f84 <USBD_LL_Transmit>

  return USBD_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008646:	88fb      	ldrh	r3, [r7, #6]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	2100      	movs	r1, #0
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 fc99 	bl	8008f84 <USBD_LL_Transmit>

  return USBD_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2203      	movs	r2, #3
 800866e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008672:	88fa      	ldrh	r2, [r7, #6]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800867a:	88fa      	ldrh	r2, [r7, #6]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008682:	88fb      	ldrh	r3, [r7, #6]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	2100      	movs	r1, #0
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fc9e 	bl	8008fca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086a6:	88fb      	ldrh	r3, [r7, #6]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	2100      	movs	r1, #0
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 fc8c 	bl	8008fca <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2204      	movs	r2, #4
 80086c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086cc:	2300      	movs	r3, #0
 80086ce:	2200      	movs	r2, #0
 80086d0:	2100      	movs	r1, #0
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fc56 	bl	8008f84 <USBD_LL_Transmit>

  return USBD_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2205      	movs	r2, #5
 80086ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086f2:	2300      	movs	r3, #0
 80086f4:	2200      	movs	r2, #0
 80086f6:	2100      	movs	r1, #0
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fc66 	bl	8008fca <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800870c:	2200      	movs	r2, #0
 800870e:	4912      	ldr	r1, [pc, #72]	; (8008758 <MX_USB_DEVICE_Init+0x50>)
 8008710:	4812      	ldr	r0, [pc, #72]	; (800875c <MX_USB_DEVICE_Init+0x54>)
 8008712:	f7fe ff56 	bl	80075c2 <USBD_Init>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800871c:	f7f8 fd58 	bl	80011d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008720:	490f      	ldr	r1, [pc, #60]	; (8008760 <MX_USB_DEVICE_Init+0x58>)
 8008722:	480e      	ldr	r0, [pc, #56]	; (800875c <MX_USB_DEVICE_Init+0x54>)
 8008724:	f7fe ff78 	bl	8007618 <USBD_RegisterClass>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800872e:	f7f8 fd4f 	bl	80011d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008732:	490c      	ldr	r1, [pc, #48]	; (8008764 <MX_USB_DEVICE_Init+0x5c>)
 8008734:	4809      	ldr	r0, [pc, #36]	; (800875c <MX_USB_DEVICE_Init+0x54>)
 8008736:	f7fe fea9 	bl	800748c <USBD_CDC_RegisterInterface>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008740:	f7f8 fd46 	bl	80011d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008744:	4805      	ldr	r0, [pc, #20]	; (800875c <MX_USB_DEVICE_Init+0x54>)
 8008746:	f7fe ff80 	bl	800764a <USBD_Start>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008750:	f7f8 fd3e 	bl	80011d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008754:	bf00      	nop
 8008756:	bd80      	pop	{r7, pc}
 8008758:	20000130 	.word	0x20000130
 800875c:	200005a0 	.word	0x200005a0
 8008760:	2000001c 	.word	0x2000001c
 8008764:	20000120 	.word	0x20000120

08008768 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800876c:	2200      	movs	r2, #0
 800876e:	4907      	ldr	r1, [pc, #28]	; (800878c <CDC_Init_FS+0x24>)
 8008770:	4807      	ldr	r0, [pc, #28]	; (8008790 <CDC_Init_FS+0x28>)
 8008772:	f7fe fea1 	bl	80074b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008776:	4907      	ldr	r1, [pc, #28]	; (8008794 <CDC_Init_FS+0x2c>)
 8008778:	4805      	ldr	r0, [pc, #20]	; (8008790 <CDC_Init_FS+0x28>)
 800877a:	f7fe feb6 	bl	80074ea <USBD_CDC_SetRxBuffer>
  sleep_enable = 0;
 800877e:	4b06      	ldr	r3, [pc, #24]	; (8008798 <CDC_Init_FS+0x30>)
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8008784:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008786:	4618      	mov	r0, r3
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000e3c 	.word	0x20000e3c
 8008790:	200005a0 	.word	0x200005a0
 8008794:	20000a54 	.word	0x20000a54
 8008798:	20000000 	.word	0x20000000

0800879c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800879c:	b480      	push	{r7}
 800879e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	4770      	bx	lr
	...

080087ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	71fb      	strb	r3, [r7, #7]
 80087b8:	4613      	mov	r3, r2
 80087ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	2b23      	cmp	r3, #35	; 0x23
 80087c0:	d856      	bhi.n	8008870 <CDC_Control_FS+0xc4>
 80087c2:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <CDC_Control_FS+0x1c>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	08008871 	.word	0x08008871
 80087cc:	08008871 	.word	0x08008871
 80087d0:	08008871 	.word	0x08008871
 80087d4:	08008871 	.word	0x08008871
 80087d8:	08008871 	.word	0x08008871
 80087dc:	08008871 	.word	0x08008871
 80087e0:	08008871 	.word	0x08008871
 80087e4:	08008871 	.word	0x08008871
 80087e8:	08008871 	.word	0x08008871
 80087ec:	08008871 	.word	0x08008871
 80087f0:	08008871 	.word	0x08008871
 80087f4:	08008871 	.word	0x08008871
 80087f8:	08008871 	.word	0x08008871
 80087fc:	08008871 	.word	0x08008871
 8008800:	08008871 	.word	0x08008871
 8008804:	08008871 	.word	0x08008871
 8008808:	08008871 	.word	0x08008871
 800880c:	08008871 	.word	0x08008871
 8008810:	08008871 	.word	0x08008871
 8008814:	08008871 	.word	0x08008871
 8008818:	08008871 	.word	0x08008871
 800881c:	08008871 	.word	0x08008871
 8008820:	08008871 	.word	0x08008871
 8008824:	08008871 	.word	0x08008871
 8008828:	08008871 	.word	0x08008871
 800882c:	08008871 	.word	0x08008871
 8008830:	08008871 	.word	0x08008871
 8008834:	08008871 	.word	0x08008871
 8008838:	08008871 	.word	0x08008871
 800883c:	08008871 	.word	0x08008871
 8008840:	08008871 	.word	0x08008871
 8008844:	08008871 	.word	0x08008871
 8008848:	08008871 	.word	0x08008871
 800884c:	08008871 	.word	0x08008871
 8008850:	08008859 	.word	0x08008859
 8008854:	08008871 	.word	0x08008871

    break;

    case CDC_SET_CONTROL_LINE_STATE:
    {
        USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	60fb      	str	r3, [r7, #12]

        if(req->wValue & 0x0001 != 0)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	885b      	ldrh	r3, [r3, #2]
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <CDC_Control_FS+0xc8>
        {
            // DTR is set...
//        	char* msg = "Connected: \r\n";
//        	CDC_Transmit_FS(msg, strlen(msg));
        	usb_cdc_open = 1;
 8008868:	4b06      	ldr	r3, [pc, #24]	; (8008884 <CDC_Control_FS+0xd8>)
 800886a:	2201      	movs	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
        }
    }
    break;
 800886e:	e001      	b.n	8008874 <CDC_Control_FS+0xc8>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008870:	bf00      	nop
 8008872:	e000      	b.n	8008876 <CDC_Control_FS+0xca>
    break;
 8008874:	bf00      	nop
  }

  return (USBD_OK);
 8008876:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	bc80      	pop	{r7}
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	20000002 	.word	0x20000002

08008888 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	480f      	ldr	r0, [pc, #60]	; (80088d4 <CDC_Receive_FS+0x4c>)
 8008896:	f7fe fe28 	bl	80074ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800889a:	480e      	ldr	r0, [pc, #56]	; (80088d4 <CDC_Receive_FS+0x4c>)
 800889c:	f7fe fe67 	bl	800756e <USBD_CDC_ReceivePacket>

  memset(usb_buffer, '\0', 64);  // clear the buffer
 80088a0:	2240      	movs	r2, #64	; 0x40
 80088a2:	2100      	movs	r1, #0
 80088a4:	480c      	ldr	r0, [pc, #48]	; (80088d8 <CDC_Receive_FS+0x50>)
 80088a6:	f000 fc48 	bl	800913a <memset>
  uint16_t len = *Len;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	81fb      	strh	r3, [r7, #14]
  memcpy(usb_buffer, Buf, len);  // copy the data to the buffer
 80088b0:	89fb      	ldrh	r3, [r7, #14]
 80088b2:	461a      	mov	r2, r3
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	4808      	ldr	r0, [pc, #32]	; (80088d8 <CDC_Receive_FS+0x50>)
 80088b8:	f000 fc34 	bl	8009124 <memcpy>
//  CDC_Transmit_FS(Buf, len);
  memset(Buf, '\0', len);   // clear the Buf also
 80088bc:	89fb      	ldrh	r3, [r7, #14]
 80088be:	461a      	mov	r2, r3
 80088c0:	2100      	movs	r1, #0
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fc39 	bl	800913a <memset>

  return (USBD_OK);
 80088c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	200005a0 	.word	0x200005a0
 80088d8:	200008b8 	.word	0x200008b8

080088dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80088ec:	4b0d      	ldr	r3, [pc, #52]	; (8008924 <CDC_Transmit_FS+0x48>)
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80088fe:	2301      	movs	r3, #1
 8008900:	e00b      	b.n	800891a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008902:	887b      	ldrh	r3, [r7, #2]
 8008904:	461a      	mov	r2, r3
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	4806      	ldr	r0, [pc, #24]	; (8008924 <CDC_Transmit_FS+0x48>)
 800890a:	f7fe fdd5 	bl	80074b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800890e:	4805      	ldr	r0, [pc, #20]	; (8008924 <CDC_Transmit_FS+0x48>)
 8008910:	f7fe fdfe 	bl	8007510 <USBD_CDC_TransmitPacket>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	200005a0 	.word	0x200005a0

08008928 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	6039      	str	r1, [r7, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2212      	movs	r2, #18
 8008938:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800893a:	4b03      	ldr	r3, [pc, #12]	; (8008948 <USBD_FS_DeviceDescriptor+0x20>)
}
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	2000014c 	.word	0x2000014c

0800894c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	6039      	str	r1, [r7, #0]
 8008956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2204      	movs	r2, #4
 800895c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800895e:	4b03      	ldr	r3, [pc, #12]	; (800896c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	bc80      	pop	{r7}
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	20000160 	.word	0x20000160

08008970 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	6039      	str	r1, [r7, #0]
 800897a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	4907      	ldr	r1, [pc, #28]	; (80089a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008986:	4808      	ldr	r0, [pc, #32]	; (80089a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008988:	f7ff fde1 	bl	800854e <USBD_GetString>
 800898c:	e004      	b.n	8008998 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	4904      	ldr	r1, [pc, #16]	; (80089a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008992:	4805      	ldr	r0, [pc, #20]	; (80089a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008994:	f7ff fddb 	bl	800854e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008998:	4b02      	ldr	r3, [pc, #8]	; (80089a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20001224 	.word	0x20001224
 80089a8:	0800abe8 	.word	0x0800abe8

080089ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	6039      	str	r1, [r7, #0]
 80089b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	4904      	ldr	r1, [pc, #16]	; (80089cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089bc:	4804      	ldr	r0, [pc, #16]	; (80089d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089be:	f7ff fdc6 	bl	800854e <USBD_GetString>
  return USBD_StrDesc;
 80089c2:	4b02      	ldr	r3, [pc, #8]	; (80089cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	20001224 	.word	0x20001224
 80089d0:	0800abf4 	.word	0x0800abf4

080089d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	221a      	movs	r2, #26
 80089e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089e6:	f000 f843 	bl	8008a70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089ea:	4b02      	ldr	r3, [pc, #8]	; (80089f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20000164 	.word	0x20000164

080089f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	6039      	str	r1, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d105      	bne.n	8008a16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	4907      	ldr	r1, [pc, #28]	; (8008a2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a0e:	4808      	ldr	r0, [pc, #32]	; (8008a30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a10:	f7ff fd9d 	bl	800854e <USBD_GetString>
 8008a14:	e004      	b.n	8008a20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	4904      	ldr	r1, [pc, #16]	; (8008a2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a1a:	4805      	ldr	r0, [pc, #20]	; (8008a30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a1c:	f7ff fd97 	bl	800854e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a20:	4b02      	ldr	r3, [pc, #8]	; (8008a2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20001224 	.word	0x20001224
 8008a30:	0800ac08 	.word	0x0800ac08

08008a34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	6039      	str	r1, [r7, #0]
 8008a3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d105      	bne.n	8008a52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	4907      	ldr	r1, [pc, #28]	; (8008a68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a4a:	4808      	ldr	r0, [pc, #32]	; (8008a6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a4c:	f7ff fd7f 	bl	800854e <USBD_GetString>
 8008a50:	e004      	b.n	8008a5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	4904      	ldr	r1, [pc, #16]	; (8008a68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a56:	4805      	ldr	r0, [pc, #20]	; (8008a6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a58:	f7ff fd79 	bl	800854e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20001224 	.word	0x20001224
 8008a6c:	0800ac14 	.word	0x0800ac14

08008a70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a76:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <Get_SerialNum+0x44>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a7c:	4b0e      	ldr	r3, [pc, #56]	; (8008ab8 <Get_SerialNum+0x48>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a82:	4b0e      	ldr	r3, [pc, #56]	; (8008abc <Get_SerialNum+0x4c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d009      	beq.n	8008aaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a96:	2208      	movs	r2, #8
 8008a98:	4909      	ldr	r1, [pc, #36]	; (8008ac0 <Get_SerialNum+0x50>)
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 f814 	bl	8008ac8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008aa0:	2204      	movs	r2, #4
 8008aa2:	4908      	ldr	r1, [pc, #32]	; (8008ac4 <Get_SerialNum+0x54>)
 8008aa4:	68b8      	ldr	r0, [r7, #8]
 8008aa6:	f000 f80f 	bl	8008ac8 <IntToUnicode>
  }
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	1ffff7e8 	.word	0x1ffff7e8
 8008ab8:	1ffff7ec 	.word	0x1ffff7ec
 8008abc:	1ffff7f0 	.word	0x1ffff7f0
 8008ac0:	20000166 	.word	0x20000166
 8008ac4:	20000176 	.word	0x20000176

08008ac8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]
 8008ade:	e027      	b.n	8008b30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	0f1b      	lsrs	r3, r3, #28
 8008ae4:	2b09      	cmp	r3, #9
 8008ae6:	d80b      	bhi.n	8008b00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	0f1b      	lsrs	r3, r3, #28
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	4619      	mov	r1, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	440b      	add	r3, r1
 8008af8:	3230      	adds	r2, #48	; 0x30
 8008afa:	b2d2      	uxtb	r2, r2
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e00a      	b.n	8008b16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	0f1b      	lsrs	r3, r3, #28
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	440b      	add	r3, r1
 8008b10:	3237      	adds	r2, #55	; 0x37
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	011b      	lsls	r3, r3, #4
 8008b1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	3301      	adds	r3, #1
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	4413      	add	r3, r2
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	75fb      	strb	r3, [r7, #23]
 8008b30:	7dfa      	ldrb	r2, [r7, #23]
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d3d3      	bcc.n	8008ae0 <IntToUnicode+0x18>
  }
}
 8008b38:	bf00      	nop
 8008b3a:	371c      	adds	r7, #28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr
	...

08008b44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a0d      	ldr	r2, [pc, #52]	; (8008b88 <HAL_PCD_MspInit+0x44>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d113      	bne.n	8008b7e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008b56:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <HAL_PCD_MspInit+0x48>)
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	4a0c      	ldr	r2, [pc, #48]	; (8008b8c <HAL_PCD_MspInit+0x48>)
 8008b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b60:	61d3      	str	r3, [r2, #28]
 8008b62:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <HAL_PCD_MspInit+0x48>)
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2100      	movs	r1, #0
 8008b72:	2014      	movs	r0, #20
 8008b74:	f7f8 fe3f 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008b78:	2014      	movs	r0, #20
 8008b7a:	f7f8 fe58 	bl	800182e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40005c00 	.word	0x40005c00
 8008b8c:	40021000 	.word	0x40021000

08008b90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	f7fe fdad 	bl	8007706 <USBD_LL_SetupStage>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	440b      	add	r3, r1
 8008bd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	f7fe fddd 	bl	800779c <USBD_LL_DataOutStage>
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008bfc:	78fa      	ldrb	r2, [r7, #3]
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	4613      	mov	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	440b      	add	r3, r1
 8008c0a:	333c      	adds	r3, #60	; 0x3c
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	78fb      	ldrb	r3, [r7, #3]
 8008c10:	4619      	mov	r1, r3
 8008c12:	f7fe fe34 	bl	800787e <USBD_LL_DataInStage>
}
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fe ff44 	bl	8007aba <USBD_LL_SOF>
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c42:	2301      	movs	r3, #1
 8008c44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d001      	beq.n	8008c52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c4e:	f7f8 fabf 	bl	80011d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c58:	7bfa      	ldrb	r2, [r7, #15]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fe fef4 	bl	8007a4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe fead 	bl	80079c8 <USBD_LL_Reset>
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe feee 	bl	8007a68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <HAL_PCD_SuspendCallback+0x30>)
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	4a03      	ldr	r2, [pc, #12]	; (8008ca8 <HAL_PCD_SuspendCallback+0x30>)
 8008c9a:	f043 0306 	orr.w	r3, r3, #6
 8008c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	e000ed00 	.word	0xe000ed00

08008cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe fee8 	bl	8007a90 <USBD_LL_Resume>
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008cd0:	4a28      	ldr	r2, [pc, #160]	; (8008d74 <USBD_LL_Init+0xac>)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a26      	ldr	r2, [pc, #152]	; (8008d74 <USBD_LL_Init+0xac>)
 8008cdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ce0:	4b24      	ldr	r3, [pc, #144]	; (8008d74 <USBD_LL_Init+0xac>)
 8008ce2:	4a25      	ldr	r2, [pc, #148]	; (8008d78 <USBD_LL_Init+0xb0>)
 8008ce4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ce6:	4b23      	ldr	r3, [pc, #140]	; (8008d74 <USBD_LL_Init+0xac>)
 8008ce8:	2208      	movs	r2, #8
 8008cea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008cec:	4b21      	ldr	r3, [pc, #132]	; (8008d74 <USBD_LL_Init+0xac>)
 8008cee:	2202      	movs	r2, #2
 8008cf0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008cf2:	4b20      	ldr	r3, [pc, #128]	; (8008d74 <USBD_LL_Init+0xac>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008cf8:	4b1e      	ldr	r3, [pc, #120]	; (8008d74 <USBD_LL_Init+0xac>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008cfe:	4b1d      	ldr	r3, [pc, #116]	; (8008d74 <USBD_LL_Init+0xac>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008d04:	481b      	ldr	r0, [pc, #108]	; (8008d74 <USBD_LL_Init+0xac>)
 8008d06:	f7f9 f857 	bl	8001db8 <HAL_PCD_Init>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008d10:	f7f8 fa5e 	bl	80011d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d1a:	2318      	movs	r3, #24
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2100      	movs	r1, #0
 8008d20:	f7fa fbb1 	bl	8003486 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d2a:	2358      	movs	r3, #88	; 0x58
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2180      	movs	r1, #128	; 0x80
 8008d30:	f7fa fba9 	bl	8003486 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d3a:	23c0      	movs	r3, #192	; 0xc0
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	2181      	movs	r1, #129	; 0x81
 8008d40:	f7fa fba1 	bl	8003486 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008d4e:	2200      	movs	r2, #0
 8008d50:	2101      	movs	r1, #1
 8008d52:	f7fa fb98 	bl	8003486 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d60:	2200      	movs	r2, #0
 8008d62:	2182      	movs	r1, #130	; 0x82
 8008d64:	f7fa fb8f 	bl	8003486 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	20001424 	.word	0x20001424
 8008d78:	40005c00 	.word	0x40005c00

08008d7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7f9 f91b 	bl	8001fce <HAL_PCD_Start>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f96a 	bl	8009078 <USBD_Get_USB_Status>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7f9 f926 	bl	800201a <HAL_PCD_Stop>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 f94f 	bl	8009078 <USBD_Get_USB_Status>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	4608      	mov	r0, r1
 8008df2:	4611      	mov	r1, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	70fb      	strb	r3, [r7, #3]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70bb      	strb	r3, [r7, #2]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e10:	78bb      	ldrb	r3, [r7, #2]
 8008e12:	883a      	ldrh	r2, [r7, #0]
 8008e14:	78f9      	ldrb	r1, [r7, #3]
 8008e16:	f7f9 faa0 	bl	800235a <HAL_PCD_EP_Open>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 f929 	bl	8009078 <USBD_Get_USB_Status>
 8008e26:	4603      	mov	r3, r0
 8008e28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7f9 fae7 	bl	8002426 <HAL_PCD_EP_Close>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f90a 	bl	8009078 <USBD_Get_USB_Status>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e8c:	78fa      	ldrb	r2, [r7, #3]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7f9 fba7 	bl	80025e4 <HAL_PCD_EP_SetStall>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 f8eb 	bl	8009078 <USBD_Get_USB_Status>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eca:	78fa      	ldrb	r2, [r7, #3]
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f9 fbe8 	bl	80026a4 <HAL_PCD_EP_ClrStall>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 f8cc 	bl	8009078 <USBD_Get_USB_Status>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f00:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da0c      	bge.n	8008f24 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f10:	68f9      	ldr	r1, [r7, #12]
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	00db      	lsls	r3, r3, #3
 8008f1c:	440b      	add	r3, r1
 8008f1e:	3302      	adds	r3, #2
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	e00b      	b.n	8008f3c <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	440b      	add	r3, r1
 8008f36:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008f3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr

08008f46 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	4611      	mov	r1, r2
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7f9 f9d3 	bl	8002310 <HAL_PCD_SetAddress>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f881 	bl	8009078 <USBD_Get_USB_Status>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	607a      	str	r2, [r7, #4]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	460b      	mov	r3, r1
 8008f92:	72fb      	strb	r3, [r7, #11]
 8008f94:	4613      	mov	r3, r2
 8008f96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fa6:	893b      	ldrh	r3, [r7, #8]
 8008fa8:	7af9      	ldrb	r1, [r7, #11]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	f7f9 fad7 	bl	800255e <HAL_PCD_EP_Transmit>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f85e 	bl	8009078 <USBD_Get_USB_Status>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b086      	sub	sp, #24
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	72fb      	strb	r3, [r7, #11]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fec:	893b      	ldrh	r3, [r7, #8]
 8008fee:	7af9      	ldrb	r1, [r7, #11]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	f7f9 fa60 	bl	80024b6 <HAL_PCD_EP_Receive>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 f83b 	bl	8009078 <USBD_Get_USB_Status>
 8009002:	4603      	mov	r3, r0
 8009004:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009006:	7dbb      	ldrb	r3, [r7, #22]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009022:	78fa      	ldrb	r2, [r7, #3]
 8009024:	4611      	mov	r1, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f7f9 fa82 	bl	8002530 <HAL_PCD_EP_GetRxCount>
 800902c:	4603      	mov	r3, r0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009040:	4b02      	ldr	r3, [pc, #8]	; (800904c <USBD_static_malloc+0x14>)
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr
 800904c:	20000378 	.word	0x20000378

08009050 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]

}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	bc80      	pop	{r7}
 8009060:	4770      	bx	lr

08009062 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	460b      	mov	r3, r1
 800906c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr

08009078 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	2b03      	cmp	r3, #3
 800908a:	d817      	bhi.n	80090bc <USBD_Get_USB_Status+0x44>
 800908c:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <USBD_Get_USB_Status+0x1c>)
 800908e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009092:	bf00      	nop
 8009094:	080090a5 	.word	0x080090a5
 8009098:	080090ab 	.word	0x080090ab
 800909c:	080090b1 	.word	0x080090b1
 80090a0:	080090b7 	.word	0x080090b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	73fb      	strb	r3, [r7, #15]
    break;
 80090a8:	e00b      	b.n	80090c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090aa:	2302      	movs	r3, #2
 80090ac:	73fb      	strb	r3, [r7, #15]
    break;
 80090ae:	e008      	b.n	80090c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090b0:	2301      	movs	r3, #1
 80090b2:	73fb      	strb	r3, [r7, #15]
    break;
 80090b4:	e005      	b.n	80090c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090b6:	2302      	movs	r3, #2
 80090b8:	73fb      	strb	r3, [r7, #15]
    break;
 80090ba:	e002      	b.n	80090c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090bc:	2302      	movs	r3, #2
 80090be:	73fb      	strb	r3, [r7, #15]
    break;
 80090c0:	bf00      	nop
  }
  return usb_status;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop

080090d0 <__errno>:
 80090d0:	4b01      	ldr	r3, [pc, #4]	; (80090d8 <__errno+0x8>)
 80090d2:	6818      	ldr	r0, [r3, #0]
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20000180 	.word	0x20000180

080090dc <__libc_init_array>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	2500      	movs	r5, #0
 80090e0:	4e0c      	ldr	r6, [pc, #48]	; (8009114 <__libc_init_array+0x38>)
 80090e2:	4c0d      	ldr	r4, [pc, #52]	; (8009118 <__libc_init_array+0x3c>)
 80090e4:	1ba4      	subs	r4, r4, r6
 80090e6:	10a4      	asrs	r4, r4, #2
 80090e8:	42a5      	cmp	r5, r4
 80090ea:	d109      	bne.n	8009100 <__libc_init_array+0x24>
 80090ec:	f001 fd38 	bl	800ab60 <_init>
 80090f0:	2500      	movs	r5, #0
 80090f2:	4e0a      	ldr	r6, [pc, #40]	; (800911c <__libc_init_array+0x40>)
 80090f4:	4c0a      	ldr	r4, [pc, #40]	; (8009120 <__libc_init_array+0x44>)
 80090f6:	1ba4      	subs	r4, r4, r6
 80090f8:	10a4      	asrs	r4, r4, #2
 80090fa:	42a5      	cmp	r5, r4
 80090fc:	d105      	bne.n	800910a <__libc_init_array+0x2e>
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009104:	4798      	blx	r3
 8009106:	3501      	adds	r5, #1
 8009108:	e7ee      	b.n	80090e8 <__libc_init_array+0xc>
 800910a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800910e:	4798      	blx	r3
 8009110:	3501      	adds	r5, #1
 8009112:	e7f2      	b.n	80090fa <__libc_init_array+0x1e>
 8009114:	0800ae68 	.word	0x0800ae68
 8009118:	0800ae68 	.word	0x0800ae68
 800911c:	0800ae68 	.word	0x0800ae68
 8009120:	0800ae6c 	.word	0x0800ae6c

08009124 <memcpy>:
 8009124:	b510      	push	{r4, lr}
 8009126:	1e43      	subs	r3, r0, #1
 8009128:	440a      	add	r2, r1
 800912a:	4291      	cmp	r1, r2
 800912c:	d100      	bne.n	8009130 <memcpy+0xc>
 800912e:	bd10      	pop	{r4, pc}
 8009130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009138:	e7f7      	b.n	800912a <memcpy+0x6>

0800913a <memset>:
 800913a:	4603      	mov	r3, r0
 800913c:	4402      	add	r2, r0
 800913e:	4293      	cmp	r3, r2
 8009140:	d100      	bne.n	8009144 <memset+0xa>
 8009142:	4770      	bx	lr
 8009144:	f803 1b01 	strb.w	r1, [r3], #1
 8009148:	e7f9      	b.n	800913e <memset+0x4>

0800914a <__cvt>:
 800914a:	2b00      	cmp	r3, #0
 800914c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009150:	461e      	mov	r6, r3
 8009152:	bfbb      	ittet	lt
 8009154:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009158:	461e      	movlt	r6, r3
 800915a:	2300      	movge	r3, #0
 800915c:	232d      	movlt	r3, #45	; 0x2d
 800915e:	b088      	sub	sp, #32
 8009160:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009162:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009166:	f027 0720 	bic.w	r7, r7, #32
 800916a:	2f46      	cmp	r7, #70	; 0x46
 800916c:	4614      	mov	r4, r2
 800916e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009170:	700b      	strb	r3, [r1, #0]
 8009172:	d004      	beq.n	800917e <__cvt+0x34>
 8009174:	2f45      	cmp	r7, #69	; 0x45
 8009176:	d100      	bne.n	800917a <__cvt+0x30>
 8009178:	3501      	adds	r5, #1
 800917a:	2302      	movs	r3, #2
 800917c:	e000      	b.n	8009180 <__cvt+0x36>
 800917e:	2303      	movs	r3, #3
 8009180:	aa07      	add	r2, sp, #28
 8009182:	9204      	str	r2, [sp, #16]
 8009184:	aa06      	add	r2, sp, #24
 8009186:	e9cd a202 	strd	sl, r2, [sp, #8]
 800918a:	e9cd 3500 	strd	r3, r5, [sp]
 800918e:	4622      	mov	r2, r4
 8009190:	4633      	mov	r3, r6
 8009192:	f000 fba5 	bl	80098e0 <_dtoa_r>
 8009196:	2f47      	cmp	r7, #71	; 0x47
 8009198:	4680      	mov	r8, r0
 800919a:	d102      	bne.n	80091a2 <__cvt+0x58>
 800919c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800919e:	07db      	lsls	r3, r3, #31
 80091a0:	d526      	bpl.n	80091f0 <__cvt+0xa6>
 80091a2:	2f46      	cmp	r7, #70	; 0x46
 80091a4:	eb08 0905 	add.w	r9, r8, r5
 80091a8:	d111      	bne.n	80091ce <__cvt+0x84>
 80091aa:	f898 3000 	ldrb.w	r3, [r8]
 80091ae:	2b30      	cmp	r3, #48	; 0x30
 80091b0:	d10a      	bne.n	80091c8 <__cvt+0x7e>
 80091b2:	2200      	movs	r2, #0
 80091b4:	2300      	movs	r3, #0
 80091b6:	4620      	mov	r0, r4
 80091b8:	4631      	mov	r1, r6
 80091ba:	f7f7 fbf5 	bl	80009a8 <__aeabi_dcmpeq>
 80091be:	b918      	cbnz	r0, 80091c8 <__cvt+0x7e>
 80091c0:	f1c5 0501 	rsb	r5, r5, #1
 80091c4:	f8ca 5000 	str.w	r5, [sl]
 80091c8:	f8da 3000 	ldr.w	r3, [sl]
 80091cc:	4499      	add	r9, r3
 80091ce:	2200      	movs	r2, #0
 80091d0:	2300      	movs	r3, #0
 80091d2:	4620      	mov	r0, r4
 80091d4:	4631      	mov	r1, r6
 80091d6:	f7f7 fbe7 	bl	80009a8 <__aeabi_dcmpeq>
 80091da:	b938      	cbnz	r0, 80091ec <__cvt+0xa2>
 80091dc:	2230      	movs	r2, #48	; 0x30
 80091de:	9b07      	ldr	r3, [sp, #28]
 80091e0:	454b      	cmp	r3, r9
 80091e2:	d205      	bcs.n	80091f0 <__cvt+0xa6>
 80091e4:	1c59      	adds	r1, r3, #1
 80091e6:	9107      	str	r1, [sp, #28]
 80091e8:	701a      	strb	r2, [r3, #0]
 80091ea:	e7f8      	b.n	80091de <__cvt+0x94>
 80091ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80091f0:	4640      	mov	r0, r8
 80091f2:	9b07      	ldr	r3, [sp, #28]
 80091f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091f6:	eba3 0308 	sub.w	r3, r3, r8
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	b008      	add	sp, #32
 80091fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009202 <__exponent>:
 8009202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009204:	2900      	cmp	r1, #0
 8009206:	bfb4      	ite	lt
 8009208:	232d      	movlt	r3, #45	; 0x2d
 800920a:	232b      	movge	r3, #43	; 0x2b
 800920c:	4604      	mov	r4, r0
 800920e:	bfb8      	it	lt
 8009210:	4249      	neglt	r1, r1
 8009212:	2909      	cmp	r1, #9
 8009214:	f804 2b02 	strb.w	r2, [r4], #2
 8009218:	7043      	strb	r3, [r0, #1]
 800921a:	dd21      	ble.n	8009260 <__exponent+0x5e>
 800921c:	f10d 0307 	add.w	r3, sp, #7
 8009220:	461f      	mov	r7, r3
 8009222:	260a      	movs	r6, #10
 8009224:	fb91 f5f6 	sdiv	r5, r1, r6
 8009228:	fb06 1115 	mls	r1, r6, r5, r1
 800922c:	2d09      	cmp	r5, #9
 800922e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009232:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009236:	f103 32ff 	add.w	r2, r3, #4294967295
 800923a:	4629      	mov	r1, r5
 800923c:	dc09      	bgt.n	8009252 <__exponent+0x50>
 800923e:	3130      	adds	r1, #48	; 0x30
 8009240:	3b02      	subs	r3, #2
 8009242:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009246:	42bb      	cmp	r3, r7
 8009248:	4622      	mov	r2, r4
 800924a:	d304      	bcc.n	8009256 <__exponent+0x54>
 800924c:	1a10      	subs	r0, r2, r0
 800924e:	b003      	add	sp, #12
 8009250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009252:	4613      	mov	r3, r2
 8009254:	e7e6      	b.n	8009224 <__exponent+0x22>
 8009256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800925a:	f804 2b01 	strb.w	r2, [r4], #1
 800925e:	e7f2      	b.n	8009246 <__exponent+0x44>
 8009260:	2330      	movs	r3, #48	; 0x30
 8009262:	4419      	add	r1, r3
 8009264:	7083      	strb	r3, [r0, #2]
 8009266:	1d02      	adds	r2, r0, #4
 8009268:	70c1      	strb	r1, [r0, #3]
 800926a:	e7ef      	b.n	800924c <__exponent+0x4a>

0800926c <_printf_float>:
 800926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009270:	b091      	sub	sp, #68	; 0x44
 8009272:	460c      	mov	r4, r1
 8009274:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009276:	4693      	mov	fp, r2
 8009278:	461e      	mov	r6, r3
 800927a:	4605      	mov	r5, r0
 800927c:	f001 f8e4 	bl	800a448 <_localeconv_r>
 8009280:	6803      	ldr	r3, [r0, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	9309      	str	r3, [sp, #36]	; 0x24
 8009286:	f7f6 ff63 	bl	8000150 <strlen>
 800928a:	2300      	movs	r3, #0
 800928c:	930e      	str	r3, [sp, #56]	; 0x38
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	900a      	str	r0, [sp, #40]	; 0x28
 8009292:	3307      	adds	r3, #7
 8009294:	f023 0307 	bic.w	r3, r3, #7
 8009298:	f103 0208 	add.w	r2, r3, #8
 800929c:	f894 8018 	ldrb.w	r8, [r4, #24]
 80092a0:	f8d4 a000 	ldr.w	sl, [r4]
 80092a4:	603a      	str	r2, [r7, #0]
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80092ae:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80092b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80092b8:	f04f 32ff 	mov.w	r2, #4294967295
 80092bc:	4ba6      	ldr	r3, [pc, #664]	; (8009558 <_printf_float+0x2ec>)
 80092be:	4638      	mov	r0, r7
 80092c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092c2:	f7f7 fba3 	bl	8000a0c <__aeabi_dcmpun>
 80092c6:	bb68      	cbnz	r0, 8009324 <_printf_float+0xb8>
 80092c8:	f04f 32ff 	mov.w	r2, #4294967295
 80092cc:	4ba2      	ldr	r3, [pc, #648]	; (8009558 <_printf_float+0x2ec>)
 80092ce:	4638      	mov	r0, r7
 80092d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092d2:	f7f7 fb7d 	bl	80009d0 <__aeabi_dcmple>
 80092d6:	bb28      	cbnz	r0, 8009324 <_printf_float+0xb8>
 80092d8:	2200      	movs	r2, #0
 80092da:	2300      	movs	r3, #0
 80092dc:	4638      	mov	r0, r7
 80092de:	4649      	mov	r1, r9
 80092e0:	f7f7 fb6c 	bl	80009bc <__aeabi_dcmplt>
 80092e4:	b110      	cbz	r0, 80092ec <_printf_float+0x80>
 80092e6:	232d      	movs	r3, #45	; 0x2d
 80092e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ec:	4f9b      	ldr	r7, [pc, #620]	; (800955c <_printf_float+0x2f0>)
 80092ee:	4b9c      	ldr	r3, [pc, #624]	; (8009560 <_printf_float+0x2f4>)
 80092f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092f4:	bf98      	it	ls
 80092f6:	461f      	movls	r7, r3
 80092f8:	2303      	movs	r3, #3
 80092fa:	f04f 0900 	mov.w	r9, #0
 80092fe:	6123      	str	r3, [r4, #16]
 8009300:	f02a 0304 	bic.w	r3, sl, #4
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	9600      	str	r6, [sp, #0]
 8009308:	465b      	mov	r3, fp
 800930a:	aa0f      	add	r2, sp, #60	; 0x3c
 800930c:	4621      	mov	r1, r4
 800930e:	4628      	mov	r0, r5
 8009310:	f000 f9e2 	bl	80096d8 <_printf_common>
 8009314:	3001      	adds	r0, #1
 8009316:	f040 8090 	bne.w	800943a <_printf_float+0x1ce>
 800931a:	f04f 30ff 	mov.w	r0, #4294967295
 800931e:	b011      	add	sp, #68	; 0x44
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	463a      	mov	r2, r7
 8009326:	464b      	mov	r3, r9
 8009328:	4638      	mov	r0, r7
 800932a:	4649      	mov	r1, r9
 800932c:	f7f7 fb6e 	bl	8000a0c <__aeabi_dcmpun>
 8009330:	b110      	cbz	r0, 8009338 <_printf_float+0xcc>
 8009332:	4f8c      	ldr	r7, [pc, #560]	; (8009564 <_printf_float+0x2f8>)
 8009334:	4b8c      	ldr	r3, [pc, #560]	; (8009568 <_printf_float+0x2fc>)
 8009336:	e7db      	b.n	80092f0 <_printf_float+0x84>
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800933e:	1c59      	adds	r1, r3, #1
 8009340:	a80d      	add	r0, sp, #52	; 0x34
 8009342:	a90e      	add	r1, sp, #56	; 0x38
 8009344:	d140      	bne.n	80093c8 <_printf_float+0x15c>
 8009346:	2306      	movs	r3, #6
 8009348:	6063      	str	r3, [r4, #4]
 800934a:	f04f 0c00 	mov.w	ip, #0
 800934e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009352:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009356:	6863      	ldr	r3, [r4, #4]
 8009358:	6022      	str	r2, [r4, #0]
 800935a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	463a      	mov	r2, r7
 8009362:	464b      	mov	r3, r9
 8009364:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009368:	4628      	mov	r0, r5
 800936a:	f7ff feee 	bl	800914a <__cvt>
 800936e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009372:	2b47      	cmp	r3, #71	; 0x47
 8009374:	4607      	mov	r7, r0
 8009376:	d109      	bne.n	800938c <_printf_float+0x120>
 8009378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800937a:	1cd8      	adds	r0, r3, #3
 800937c:	db02      	blt.n	8009384 <_printf_float+0x118>
 800937e:	6862      	ldr	r2, [r4, #4]
 8009380:	4293      	cmp	r3, r2
 8009382:	dd47      	ble.n	8009414 <_printf_float+0x1a8>
 8009384:	f1a8 0802 	sub.w	r8, r8, #2
 8009388:	fa5f f888 	uxtb.w	r8, r8
 800938c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009390:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009392:	d824      	bhi.n	80093de <_printf_float+0x172>
 8009394:	3901      	subs	r1, #1
 8009396:	4642      	mov	r2, r8
 8009398:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800939c:	910d      	str	r1, [sp, #52]	; 0x34
 800939e:	f7ff ff30 	bl	8009202 <__exponent>
 80093a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093a4:	4681      	mov	r9, r0
 80093a6:	1813      	adds	r3, r2, r0
 80093a8:	2a01      	cmp	r2, #1
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	dc02      	bgt.n	80093b4 <_printf_float+0x148>
 80093ae:	6822      	ldr	r2, [r4, #0]
 80093b0:	07d1      	lsls	r1, r2, #31
 80093b2:	d501      	bpl.n	80093b8 <_printf_float+0x14c>
 80093b4:	3301      	adds	r3, #1
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0a2      	beq.n	8009306 <_printf_float+0x9a>
 80093c0:	232d      	movs	r3, #45	; 0x2d
 80093c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c6:	e79e      	b.n	8009306 <_printf_float+0x9a>
 80093c8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80093cc:	f000 816e 	beq.w	80096ac <_printf_float+0x440>
 80093d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80093d4:	d1b9      	bne.n	800934a <_printf_float+0xde>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1b7      	bne.n	800934a <_printf_float+0xde>
 80093da:	2301      	movs	r3, #1
 80093dc:	e7b4      	b.n	8009348 <_printf_float+0xdc>
 80093de:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80093e2:	d119      	bne.n	8009418 <_printf_float+0x1ac>
 80093e4:	2900      	cmp	r1, #0
 80093e6:	6863      	ldr	r3, [r4, #4]
 80093e8:	dd0c      	ble.n	8009404 <_printf_float+0x198>
 80093ea:	6121      	str	r1, [r4, #16]
 80093ec:	b913      	cbnz	r3, 80093f4 <_printf_float+0x188>
 80093ee:	6822      	ldr	r2, [r4, #0]
 80093f0:	07d2      	lsls	r2, r2, #31
 80093f2:	d502      	bpl.n	80093fa <_printf_float+0x18e>
 80093f4:	3301      	adds	r3, #1
 80093f6:	440b      	add	r3, r1
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093fc:	f04f 0900 	mov.w	r9, #0
 8009400:	65a3      	str	r3, [r4, #88]	; 0x58
 8009402:	e7d9      	b.n	80093b8 <_printf_float+0x14c>
 8009404:	b913      	cbnz	r3, 800940c <_printf_float+0x1a0>
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	07d0      	lsls	r0, r2, #31
 800940a:	d501      	bpl.n	8009410 <_printf_float+0x1a4>
 800940c:	3302      	adds	r3, #2
 800940e:	e7f3      	b.n	80093f8 <_printf_float+0x18c>
 8009410:	2301      	movs	r3, #1
 8009412:	e7f1      	b.n	80093f8 <_printf_float+0x18c>
 8009414:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009418:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800941c:	4293      	cmp	r3, r2
 800941e:	db05      	blt.n	800942c <_printf_float+0x1c0>
 8009420:	6822      	ldr	r2, [r4, #0]
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	07d1      	lsls	r1, r2, #31
 8009426:	d5e8      	bpl.n	80093fa <_printf_float+0x18e>
 8009428:	3301      	adds	r3, #1
 800942a:	e7e5      	b.n	80093f8 <_printf_float+0x18c>
 800942c:	2b00      	cmp	r3, #0
 800942e:	bfcc      	ite	gt
 8009430:	2301      	movgt	r3, #1
 8009432:	f1c3 0302 	rsble	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	e7de      	b.n	80093f8 <_printf_float+0x18c>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	055a      	lsls	r2, r3, #21
 800943e:	d407      	bmi.n	8009450 <_printf_float+0x1e4>
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	463a      	mov	r2, r7
 8009444:	4659      	mov	r1, fp
 8009446:	4628      	mov	r0, r5
 8009448:	47b0      	blx	r6
 800944a:	3001      	adds	r0, #1
 800944c:	d129      	bne.n	80094a2 <_printf_float+0x236>
 800944e:	e764      	b.n	800931a <_printf_float+0xae>
 8009450:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009454:	f240 80d7 	bls.w	8009606 <_printf_float+0x39a>
 8009458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800945c:	2200      	movs	r2, #0
 800945e:	2300      	movs	r3, #0
 8009460:	f7f7 faa2 	bl	80009a8 <__aeabi_dcmpeq>
 8009464:	b388      	cbz	r0, 80094ca <_printf_float+0x25e>
 8009466:	2301      	movs	r3, #1
 8009468:	4a40      	ldr	r2, [pc, #256]	; (800956c <_printf_float+0x300>)
 800946a:	4659      	mov	r1, fp
 800946c:	4628      	mov	r0, r5
 800946e:	47b0      	blx	r6
 8009470:	3001      	adds	r0, #1
 8009472:	f43f af52 	beq.w	800931a <_printf_float+0xae>
 8009476:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800947a:	429a      	cmp	r2, r3
 800947c:	db02      	blt.n	8009484 <_printf_float+0x218>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	07d8      	lsls	r0, r3, #31
 8009482:	d50e      	bpl.n	80094a2 <_printf_float+0x236>
 8009484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009488:	4659      	mov	r1, fp
 800948a:	4628      	mov	r0, r5
 800948c:	47b0      	blx	r6
 800948e:	3001      	adds	r0, #1
 8009490:	f43f af43 	beq.w	800931a <_printf_float+0xae>
 8009494:	2700      	movs	r7, #0
 8009496:	f104 081a 	add.w	r8, r4, #26
 800949a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800949c:	3b01      	subs	r3, #1
 800949e:	42bb      	cmp	r3, r7
 80094a0:	dc09      	bgt.n	80094b6 <_printf_float+0x24a>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	079f      	lsls	r7, r3, #30
 80094a6:	f100 80fd 	bmi.w	80096a4 <_printf_float+0x438>
 80094aa:	68e0      	ldr	r0, [r4, #12]
 80094ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094ae:	4298      	cmp	r0, r3
 80094b0:	bfb8      	it	lt
 80094b2:	4618      	movlt	r0, r3
 80094b4:	e733      	b.n	800931e <_printf_float+0xb2>
 80094b6:	2301      	movs	r3, #1
 80094b8:	4642      	mov	r2, r8
 80094ba:	4659      	mov	r1, fp
 80094bc:	4628      	mov	r0, r5
 80094be:	47b0      	blx	r6
 80094c0:	3001      	adds	r0, #1
 80094c2:	f43f af2a 	beq.w	800931a <_printf_float+0xae>
 80094c6:	3701      	adds	r7, #1
 80094c8:	e7e7      	b.n	800949a <_printf_float+0x22e>
 80094ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dc2b      	bgt.n	8009528 <_printf_float+0x2bc>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4a26      	ldr	r2, [pc, #152]	; (800956c <_printf_float+0x300>)
 80094d4:	4659      	mov	r1, fp
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b0      	blx	r6
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f af1d 	beq.w	800931a <_printf_float+0xae>
 80094e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e2:	b923      	cbnz	r3, 80094ee <_printf_float+0x282>
 80094e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094e6:	b913      	cbnz	r3, 80094ee <_printf_float+0x282>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	07d9      	lsls	r1, r3, #31
 80094ec:	d5d9      	bpl.n	80094a2 <_printf_float+0x236>
 80094ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094f2:	4659      	mov	r1, fp
 80094f4:	4628      	mov	r0, r5
 80094f6:	47b0      	blx	r6
 80094f8:	3001      	adds	r0, #1
 80094fa:	f43f af0e 	beq.w	800931a <_printf_float+0xae>
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	f104 091a 	add.w	r9, r4, #26
 8009506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009508:	425b      	negs	r3, r3
 800950a:	4543      	cmp	r3, r8
 800950c:	dc01      	bgt.n	8009512 <_printf_float+0x2a6>
 800950e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009510:	e797      	b.n	8009442 <_printf_float+0x1d6>
 8009512:	2301      	movs	r3, #1
 8009514:	464a      	mov	r2, r9
 8009516:	4659      	mov	r1, fp
 8009518:	4628      	mov	r0, r5
 800951a:	47b0      	blx	r6
 800951c:	3001      	adds	r0, #1
 800951e:	f43f aefc 	beq.w	800931a <_printf_float+0xae>
 8009522:	f108 0801 	add.w	r8, r8, #1
 8009526:	e7ee      	b.n	8009506 <_printf_float+0x29a>
 8009528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800952a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800952c:	429a      	cmp	r2, r3
 800952e:	bfa8      	it	ge
 8009530:	461a      	movge	r2, r3
 8009532:	2a00      	cmp	r2, #0
 8009534:	4690      	mov	r8, r2
 8009536:	dd07      	ble.n	8009548 <_printf_float+0x2dc>
 8009538:	4613      	mov	r3, r2
 800953a:	4659      	mov	r1, fp
 800953c:	463a      	mov	r2, r7
 800953e:	4628      	mov	r0, r5
 8009540:	47b0      	blx	r6
 8009542:	3001      	adds	r0, #1
 8009544:	f43f aee9 	beq.w	800931a <_printf_float+0xae>
 8009548:	f104 031a 	add.w	r3, r4, #26
 800954c:	f04f 0a00 	mov.w	sl, #0
 8009550:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009554:	930b      	str	r3, [sp, #44]	; 0x2c
 8009556:	e015      	b.n	8009584 <_printf_float+0x318>
 8009558:	7fefffff 	.word	0x7fefffff
 800955c:	0800ac40 	.word	0x0800ac40
 8009560:	0800ac3c 	.word	0x0800ac3c
 8009564:	0800ac48 	.word	0x0800ac48
 8009568:	0800ac44 	.word	0x0800ac44
 800956c:	0800ac4c 	.word	0x0800ac4c
 8009570:	2301      	movs	r3, #1
 8009572:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009574:	4659      	mov	r1, fp
 8009576:	4628      	mov	r0, r5
 8009578:	47b0      	blx	r6
 800957a:	3001      	adds	r0, #1
 800957c:	f43f aecd 	beq.w	800931a <_printf_float+0xae>
 8009580:	f10a 0a01 	add.w	sl, sl, #1
 8009584:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009588:	eba9 0308 	sub.w	r3, r9, r8
 800958c:	4553      	cmp	r3, sl
 800958e:	dcef      	bgt.n	8009570 <_printf_float+0x304>
 8009590:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009594:	429a      	cmp	r2, r3
 8009596:	444f      	add	r7, r9
 8009598:	db14      	blt.n	80095c4 <_printf_float+0x358>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	07da      	lsls	r2, r3, #31
 800959e:	d411      	bmi.n	80095c4 <_printf_float+0x358>
 80095a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80095a4:	eba3 0209 	sub.w	r2, r3, r9
 80095a8:	eba3 0901 	sub.w	r9, r3, r1
 80095ac:	4591      	cmp	r9, r2
 80095ae:	bfa8      	it	ge
 80095b0:	4691      	movge	r9, r2
 80095b2:	f1b9 0f00 	cmp.w	r9, #0
 80095b6:	dc0d      	bgt.n	80095d4 <_printf_float+0x368>
 80095b8:	2700      	movs	r7, #0
 80095ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095be:	f104 081a 	add.w	r8, r4, #26
 80095c2:	e018      	b.n	80095f6 <_printf_float+0x38a>
 80095c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095c8:	4659      	mov	r1, fp
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b0      	blx	r6
 80095ce:	3001      	adds	r0, #1
 80095d0:	d1e6      	bne.n	80095a0 <_printf_float+0x334>
 80095d2:	e6a2      	b.n	800931a <_printf_float+0xae>
 80095d4:	464b      	mov	r3, r9
 80095d6:	463a      	mov	r2, r7
 80095d8:	4659      	mov	r1, fp
 80095da:	4628      	mov	r0, r5
 80095dc:	47b0      	blx	r6
 80095de:	3001      	adds	r0, #1
 80095e0:	d1ea      	bne.n	80095b8 <_printf_float+0x34c>
 80095e2:	e69a      	b.n	800931a <_printf_float+0xae>
 80095e4:	2301      	movs	r3, #1
 80095e6:	4642      	mov	r2, r8
 80095e8:	4659      	mov	r1, fp
 80095ea:	4628      	mov	r0, r5
 80095ec:	47b0      	blx	r6
 80095ee:	3001      	adds	r0, #1
 80095f0:	f43f ae93 	beq.w	800931a <_printf_float+0xae>
 80095f4:	3701      	adds	r7, #1
 80095f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	eba3 0309 	sub.w	r3, r3, r9
 8009600:	42bb      	cmp	r3, r7
 8009602:	dcef      	bgt.n	80095e4 <_printf_float+0x378>
 8009604:	e74d      	b.n	80094a2 <_printf_float+0x236>
 8009606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009608:	2a01      	cmp	r2, #1
 800960a:	dc01      	bgt.n	8009610 <_printf_float+0x3a4>
 800960c:	07db      	lsls	r3, r3, #31
 800960e:	d538      	bpl.n	8009682 <_printf_float+0x416>
 8009610:	2301      	movs	r3, #1
 8009612:	463a      	mov	r2, r7
 8009614:	4659      	mov	r1, fp
 8009616:	4628      	mov	r0, r5
 8009618:	47b0      	blx	r6
 800961a:	3001      	adds	r0, #1
 800961c:	f43f ae7d 	beq.w	800931a <_printf_float+0xae>
 8009620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009624:	4659      	mov	r1, fp
 8009626:	4628      	mov	r0, r5
 8009628:	47b0      	blx	r6
 800962a:	3001      	adds	r0, #1
 800962c:	f107 0701 	add.w	r7, r7, #1
 8009630:	f43f ae73 	beq.w	800931a <_printf_float+0xae>
 8009634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800963a:	2200      	movs	r2, #0
 800963c:	f103 38ff 	add.w	r8, r3, #4294967295
 8009640:	2300      	movs	r3, #0
 8009642:	f7f7 f9b1 	bl	80009a8 <__aeabi_dcmpeq>
 8009646:	b9c0      	cbnz	r0, 800967a <_printf_float+0x40e>
 8009648:	4643      	mov	r3, r8
 800964a:	463a      	mov	r2, r7
 800964c:	4659      	mov	r1, fp
 800964e:	4628      	mov	r0, r5
 8009650:	47b0      	blx	r6
 8009652:	3001      	adds	r0, #1
 8009654:	d10d      	bne.n	8009672 <_printf_float+0x406>
 8009656:	e660      	b.n	800931a <_printf_float+0xae>
 8009658:	2301      	movs	r3, #1
 800965a:	4642      	mov	r2, r8
 800965c:	4659      	mov	r1, fp
 800965e:	4628      	mov	r0, r5
 8009660:	47b0      	blx	r6
 8009662:	3001      	adds	r0, #1
 8009664:	f43f ae59 	beq.w	800931a <_printf_float+0xae>
 8009668:	3701      	adds	r7, #1
 800966a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800966c:	3b01      	subs	r3, #1
 800966e:	42bb      	cmp	r3, r7
 8009670:	dcf2      	bgt.n	8009658 <_printf_float+0x3ec>
 8009672:	464b      	mov	r3, r9
 8009674:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009678:	e6e4      	b.n	8009444 <_printf_float+0x1d8>
 800967a:	2700      	movs	r7, #0
 800967c:	f104 081a 	add.w	r8, r4, #26
 8009680:	e7f3      	b.n	800966a <_printf_float+0x3fe>
 8009682:	2301      	movs	r3, #1
 8009684:	e7e1      	b.n	800964a <_printf_float+0x3de>
 8009686:	2301      	movs	r3, #1
 8009688:	4642      	mov	r2, r8
 800968a:	4659      	mov	r1, fp
 800968c:	4628      	mov	r0, r5
 800968e:	47b0      	blx	r6
 8009690:	3001      	adds	r0, #1
 8009692:	f43f ae42 	beq.w	800931a <_printf_float+0xae>
 8009696:	3701      	adds	r7, #1
 8009698:	68e3      	ldr	r3, [r4, #12]
 800969a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800969c:	1a9b      	subs	r3, r3, r2
 800969e:	42bb      	cmp	r3, r7
 80096a0:	dcf1      	bgt.n	8009686 <_printf_float+0x41a>
 80096a2:	e702      	b.n	80094aa <_printf_float+0x23e>
 80096a4:	2700      	movs	r7, #0
 80096a6:	f104 0819 	add.w	r8, r4, #25
 80096aa:	e7f5      	b.n	8009698 <_printf_float+0x42c>
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f43f ae94 	beq.w	80093da <_printf_float+0x16e>
 80096b2:	f04f 0c00 	mov.w	ip, #0
 80096b6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80096ba:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80096be:	6022      	str	r2, [r4, #0]
 80096c0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80096c4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	463a      	mov	r2, r7
 80096cc:	464b      	mov	r3, r9
 80096ce:	4628      	mov	r0, r5
 80096d0:	f7ff fd3b 	bl	800914a <__cvt>
 80096d4:	4607      	mov	r7, r0
 80096d6:	e64f      	b.n	8009378 <_printf_float+0x10c>

080096d8 <_printf_common>:
 80096d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096dc:	4691      	mov	r9, r2
 80096de:	461f      	mov	r7, r3
 80096e0:	688a      	ldr	r2, [r1, #8]
 80096e2:	690b      	ldr	r3, [r1, #16]
 80096e4:	4606      	mov	r6, r0
 80096e6:	4293      	cmp	r3, r2
 80096e8:	bfb8      	it	lt
 80096ea:	4613      	movlt	r3, r2
 80096ec:	f8c9 3000 	str.w	r3, [r9]
 80096f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096f4:	460c      	mov	r4, r1
 80096f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096fa:	b112      	cbz	r2, 8009702 <_printf_common+0x2a>
 80096fc:	3301      	adds	r3, #1
 80096fe:	f8c9 3000 	str.w	r3, [r9]
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	0699      	lsls	r1, r3, #26
 8009706:	bf42      	ittt	mi
 8009708:	f8d9 3000 	ldrmi.w	r3, [r9]
 800970c:	3302      	addmi	r3, #2
 800970e:	f8c9 3000 	strmi.w	r3, [r9]
 8009712:	6825      	ldr	r5, [r4, #0]
 8009714:	f015 0506 	ands.w	r5, r5, #6
 8009718:	d107      	bne.n	800972a <_printf_common+0x52>
 800971a:	f104 0a19 	add.w	sl, r4, #25
 800971e:	68e3      	ldr	r3, [r4, #12]
 8009720:	f8d9 2000 	ldr.w	r2, [r9]
 8009724:	1a9b      	subs	r3, r3, r2
 8009726:	42ab      	cmp	r3, r5
 8009728:	dc29      	bgt.n	800977e <_printf_common+0xa6>
 800972a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800972e:	6822      	ldr	r2, [r4, #0]
 8009730:	3300      	adds	r3, #0
 8009732:	bf18      	it	ne
 8009734:	2301      	movne	r3, #1
 8009736:	0692      	lsls	r2, r2, #26
 8009738:	d42e      	bmi.n	8009798 <_printf_common+0xc0>
 800973a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800973e:	4639      	mov	r1, r7
 8009740:	4630      	mov	r0, r6
 8009742:	47c0      	blx	r8
 8009744:	3001      	adds	r0, #1
 8009746:	d021      	beq.n	800978c <_printf_common+0xb4>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	68e5      	ldr	r5, [r4, #12]
 800974c:	f003 0306 	and.w	r3, r3, #6
 8009750:	2b04      	cmp	r3, #4
 8009752:	bf18      	it	ne
 8009754:	2500      	movne	r5, #0
 8009756:	f8d9 2000 	ldr.w	r2, [r9]
 800975a:	f04f 0900 	mov.w	r9, #0
 800975e:	bf08      	it	eq
 8009760:	1aad      	subeq	r5, r5, r2
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	6922      	ldr	r2, [r4, #16]
 8009766:	bf08      	it	eq
 8009768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800976c:	4293      	cmp	r3, r2
 800976e:	bfc4      	itt	gt
 8009770:	1a9b      	subgt	r3, r3, r2
 8009772:	18ed      	addgt	r5, r5, r3
 8009774:	341a      	adds	r4, #26
 8009776:	454d      	cmp	r5, r9
 8009778:	d11a      	bne.n	80097b0 <_printf_common+0xd8>
 800977a:	2000      	movs	r0, #0
 800977c:	e008      	b.n	8009790 <_printf_common+0xb8>
 800977e:	2301      	movs	r3, #1
 8009780:	4652      	mov	r2, sl
 8009782:	4639      	mov	r1, r7
 8009784:	4630      	mov	r0, r6
 8009786:	47c0      	blx	r8
 8009788:	3001      	adds	r0, #1
 800978a:	d103      	bne.n	8009794 <_printf_common+0xbc>
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009794:	3501      	adds	r5, #1
 8009796:	e7c2      	b.n	800971e <_printf_common+0x46>
 8009798:	2030      	movs	r0, #48	; 0x30
 800979a:	18e1      	adds	r1, r4, r3
 800979c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097a6:	4422      	add	r2, r4
 80097a8:	3302      	adds	r3, #2
 80097aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097ae:	e7c4      	b.n	800973a <_printf_common+0x62>
 80097b0:	2301      	movs	r3, #1
 80097b2:	4622      	mov	r2, r4
 80097b4:	4639      	mov	r1, r7
 80097b6:	4630      	mov	r0, r6
 80097b8:	47c0      	blx	r8
 80097ba:	3001      	adds	r0, #1
 80097bc:	d0e6      	beq.n	800978c <_printf_common+0xb4>
 80097be:	f109 0901 	add.w	r9, r9, #1
 80097c2:	e7d8      	b.n	8009776 <_printf_common+0x9e>

080097c4 <quorem>:
 80097c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	6903      	ldr	r3, [r0, #16]
 80097ca:	690c      	ldr	r4, [r1, #16]
 80097cc:	4680      	mov	r8, r0
 80097ce:	42a3      	cmp	r3, r4
 80097d0:	f2c0 8084 	blt.w	80098dc <quorem+0x118>
 80097d4:	3c01      	subs	r4, #1
 80097d6:	f101 0714 	add.w	r7, r1, #20
 80097da:	f100 0614 	add.w	r6, r0, #20
 80097de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80097e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80097e6:	3501      	adds	r5, #1
 80097e8:	fbb0 f5f5 	udiv	r5, r0, r5
 80097ec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80097f0:	eb06 030c 	add.w	r3, r6, ip
 80097f4:	eb07 090c 	add.w	r9, r7, ip
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	b39d      	cbz	r5, 8009864 <quorem+0xa0>
 80097fc:	f04f 0a00 	mov.w	sl, #0
 8009800:	4638      	mov	r0, r7
 8009802:	46b6      	mov	lr, r6
 8009804:	46d3      	mov	fp, sl
 8009806:	f850 2b04 	ldr.w	r2, [r0], #4
 800980a:	b293      	uxth	r3, r2
 800980c:	fb05 a303 	mla	r3, r5, r3, sl
 8009810:	0c12      	lsrs	r2, r2, #16
 8009812:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009816:	fb05 a202 	mla	r2, r5, r2, sl
 800981a:	b29b      	uxth	r3, r3
 800981c:	ebab 0303 	sub.w	r3, fp, r3
 8009820:	f8de b000 	ldr.w	fp, [lr]
 8009824:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009828:	fa1f fb8b 	uxth.w	fp, fp
 800982c:	445b      	add	r3, fp
 800982e:	fa1f fb82 	uxth.w	fp, r2
 8009832:	f8de 2000 	ldr.w	r2, [lr]
 8009836:	4581      	cmp	r9, r0
 8009838:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800983c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009840:	b29b      	uxth	r3, r3
 8009842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009846:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800984a:	f84e 3b04 	str.w	r3, [lr], #4
 800984e:	d2da      	bcs.n	8009806 <quorem+0x42>
 8009850:	f856 300c 	ldr.w	r3, [r6, ip]
 8009854:	b933      	cbnz	r3, 8009864 <quorem+0xa0>
 8009856:	9b01      	ldr	r3, [sp, #4]
 8009858:	3b04      	subs	r3, #4
 800985a:	429e      	cmp	r6, r3
 800985c:	461a      	mov	r2, r3
 800985e:	d331      	bcc.n	80098c4 <quorem+0x100>
 8009860:	f8c8 4010 	str.w	r4, [r8, #16]
 8009864:	4640      	mov	r0, r8
 8009866:	f001 f819 	bl	800a89c <__mcmp>
 800986a:	2800      	cmp	r0, #0
 800986c:	db26      	blt.n	80098bc <quorem+0xf8>
 800986e:	4630      	mov	r0, r6
 8009870:	f04f 0c00 	mov.w	ip, #0
 8009874:	3501      	adds	r5, #1
 8009876:	f857 1b04 	ldr.w	r1, [r7], #4
 800987a:	f8d0 e000 	ldr.w	lr, [r0]
 800987e:	b28b      	uxth	r3, r1
 8009880:	ebac 0303 	sub.w	r3, ip, r3
 8009884:	fa1f f28e 	uxth.w	r2, lr
 8009888:	4413      	add	r3, r2
 800988a:	0c0a      	lsrs	r2, r1, #16
 800988c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009894:	b29b      	uxth	r3, r3
 8009896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800989a:	45b9      	cmp	r9, r7
 800989c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098a0:	f840 3b04 	str.w	r3, [r0], #4
 80098a4:	d2e7      	bcs.n	8009876 <quorem+0xb2>
 80098a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80098aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80098ae:	b92a      	cbnz	r2, 80098bc <quorem+0xf8>
 80098b0:	3b04      	subs	r3, #4
 80098b2:	429e      	cmp	r6, r3
 80098b4:	461a      	mov	r2, r3
 80098b6:	d30b      	bcc.n	80098d0 <quorem+0x10c>
 80098b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80098bc:	4628      	mov	r0, r5
 80098be:	b003      	add	sp, #12
 80098c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c4:	6812      	ldr	r2, [r2, #0]
 80098c6:	3b04      	subs	r3, #4
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	d1c9      	bne.n	8009860 <quorem+0x9c>
 80098cc:	3c01      	subs	r4, #1
 80098ce:	e7c4      	b.n	800985a <quorem+0x96>
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	3b04      	subs	r3, #4
 80098d4:	2a00      	cmp	r2, #0
 80098d6:	d1ef      	bne.n	80098b8 <quorem+0xf4>
 80098d8:	3c01      	subs	r4, #1
 80098da:	e7ea      	b.n	80098b2 <quorem+0xee>
 80098dc:	2000      	movs	r0, #0
 80098de:	e7ee      	b.n	80098be <quorem+0xfa>

080098e0 <_dtoa_r>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	4616      	mov	r6, r2
 80098e6:	461f      	mov	r7, r3
 80098e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098ea:	b095      	sub	sp, #84	; 0x54
 80098ec:	4604      	mov	r4, r0
 80098ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80098f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80098f6:	b93d      	cbnz	r5, 8009908 <_dtoa_r+0x28>
 80098f8:	2010      	movs	r0, #16
 80098fa:	f000 fdb3 	bl	800a464 <malloc>
 80098fe:	6260      	str	r0, [r4, #36]	; 0x24
 8009900:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009904:	6005      	str	r5, [r0, #0]
 8009906:	60c5      	str	r5, [r0, #12]
 8009908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800990a:	6819      	ldr	r1, [r3, #0]
 800990c:	b151      	cbz	r1, 8009924 <_dtoa_r+0x44>
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	2301      	movs	r3, #1
 8009912:	4093      	lsls	r3, r2
 8009914:	604a      	str	r2, [r1, #4]
 8009916:	608b      	str	r3, [r1, #8]
 8009918:	4620      	mov	r0, r4
 800991a:	f000 fddf 	bl	800a4dc <_Bfree>
 800991e:	2200      	movs	r2, #0
 8009920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	1e3b      	subs	r3, r7, #0
 8009926:	bfaf      	iteee	ge
 8009928:	2300      	movge	r3, #0
 800992a:	2201      	movlt	r2, #1
 800992c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009930:	9303      	strlt	r3, [sp, #12]
 8009932:	bfac      	ite	ge
 8009934:	f8c8 3000 	strge.w	r3, [r8]
 8009938:	f8c8 2000 	strlt.w	r2, [r8]
 800993c:	4bae      	ldr	r3, [pc, #696]	; (8009bf8 <_dtoa_r+0x318>)
 800993e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009942:	ea33 0308 	bics.w	r3, r3, r8
 8009946:	d11b      	bne.n	8009980 <_dtoa_r+0xa0>
 8009948:	f242 730f 	movw	r3, #9999	; 0x270f
 800994c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	9b02      	ldr	r3, [sp, #8]
 8009952:	b923      	cbnz	r3, 800995e <_dtoa_r+0x7e>
 8009954:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009958:	2800      	cmp	r0, #0
 800995a:	f000 8545 	beq.w	800a3e8 <_dtoa_r+0xb08>
 800995e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009960:	b953      	cbnz	r3, 8009978 <_dtoa_r+0x98>
 8009962:	4ba6      	ldr	r3, [pc, #664]	; (8009bfc <_dtoa_r+0x31c>)
 8009964:	e021      	b.n	80099aa <_dtoa_r+0xca>
 8009966:	4ba6      	ldr	r3, [pc, #664]	; (8009c00 <_dtoa_r+0x320>)
 8009968:	9306      	str	r3, [sp, #24]
 800996a:	3308      	adds	r3, #8
 800996c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	9806      	ldr	r0, [sp, #24]
 8009972:	b015      	add	sp, #84	; 0x54
 8009974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009978:	4ba0      	ldr	r3, [pc, #640]	; (8009bfc <_dtoa_r+0x31c>)
 800997a:	9306      	str	r3, [sp, #24]
 800997c:	3303      	adds	r3, #3
 800997e:	e7f5      	b.n	800996c <_dtoa_r+0x8c>
 8009980:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009984:	2200      	movs	r2, #0
 8009986:	2300      	movs	r3, #0
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f80c 	bl	80009a8 <__aeabi_dcmpeq>
 8009990:	4682      	mov	sl, r0
 8009992:	b160      	cbz	r0, 80099ae <_dtoa_r+0xce>
 8009994:	2301      	movs	r3, #1
 8009996:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 8520 	beq.w	800a3e2 <_dtoa_r+0xb02>
 80099a2:	4b98      	ldr	r3, [pc, #608]	; (8009c04 <_dtoa_r+0x324>)
 80099a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	3b01      	subs	r3, #1
 80099aa:	9306      	str	r3, [sp, #24]
 80099ac:	e7e0      	b.n	8009970 <_dtoa_r+0x90>
 80099ae:	ab12      	add	r3, sp, #72	; 0x48
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	ab13      	add	r3, sp, #76	; 0x4c
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	4632      	mov	r2, r6
 80099b8:	463b      	mov	r3, r7
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 ffe6 	bl	800a98c <__d2b>
 80099c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80099c4:	4683      	mov	fp, r0
 80099c6:	2d00      	cmp	r5, #0
 80099c8:	d07d      	beq.n	8009ac6 <_dtoa_r+0x1e6>
 80099ca:	46b0      	mov	r8, r6
 80099cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80099d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80099d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80099e0:	2200      	movs	r2, #0
 80099e2:	4b89      	ldr	r3, [pc, #548]	; (8009c08 <_dtoa_r+0x328>)
 80099e4:	4640      	mov	r0, r8
 80099e6:	4649      	mov	r1, r9
 80099e8:	f7f6 fbbe 	bl	8000168 <__aeabi_dsub>
 80099ec:	a37c      	add	r3, pc, #496	; (adr r3, 8009be0 <_dtoa_r+0x300>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	f7f6 fd71 	bl	80004d8 <__aeabi_dmul>
 80099f6:	a37c      	add	r3, pc, #496	; (adr r3, 8009be8 <_dtoa_r+0x308>)
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	f7f6 fbb6 	bl	800016c <__adddf3>
 8009a00:	4606      	mov	r6, r0
 8009a02:	4628      	mov	r0, r5
 8009a04:	460f      	mov	r7, r1
 8009a06:	f7f6 fcfd 	bl	8000404 <__aeabi_i2d>
 8009a0a:	a379      	add	r3, pc, #484	; (adr r3, 8009bf0 <_dtoa_r+0x310>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f7f6 fd62 	bl	80004d8 <__aeabi_dmul>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4630      	mov	r0, r6
 8009a1a:	4639      	mov	r1, r7
 8009a1c:	f7f6 fba6 	bl	800016c <__adddf3>
 8009a20:	4606      	mov	r6, r0
 8009a22:	460f      	mov	r7, r1
 8009a24:	f7f7 f808 	bl	8000a38 <__aeabi_d2iz>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4682      	mov	sl, r0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f6 ffc3 	bl	80009bc <__aeabi_dcmplt>
 8009a36:	b148      	cbz	r0, 8009a4c <_dtoa_r+0x16c>
 8009a38:	4650      	mov	r0, sl
 8009a3a:	f7f6 fce3 	bl	8000404 <__aeabi_i2d>
 8009a3e:	4632      	mov	r2, r6
 8009a40:	463b      	mov	r3, r7
 8009a42:	f7f6 ffb1 	bl	80009a8 <__aeabi_dcmpeq>
 8009a46:	b908      	cbnz	r0, 8009a4c <_dtoa_r+0x16c>
 8009a48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a4c:	f1ba 0f16 	cmp.w	sl, #22
 8009a50:	d85a      	bhi.n	8009b08 <_dtoa_r+0x228>
 8009a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a56:	496d      	ldr	r1, [pc, #436]	; (8009c0c <_dtoa_r+0x32c>)
 8009a58:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a60:	f7f6 ffca 	bl	80009f8 <__aeabi_dcmpgt>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d051      	beq.n	8009b0c <_dtoa_r+0x22c>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8009a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a72:	1b5d      	subs	r5, r3, r5
 8009a74:	1e6b      	subs	r3, r5, #1
 8009a76:	9307      	str	r3, [sp, #28]
 8009a78:	bf43      	ittte	mi
 8009a7a:	2300      	movmi	r3, #0
 8009a7c:	f1c5 0901 	rsbmi	r9, r5, #1
 8009a80:	9307      	strmi	r3, [sp, #28]
 8009a82:	f04f 0900 	movpl.w	r9, #0
 8009a86:	f1ba 0f00 	cmp.w	sl, #0
 8009a8a:	db41      	blt.n	8009b10 <_dtoa_r+0x230>
 8009a8c:	9b07      	ldr	r3, [sp, #28]
 8009a8e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009a92:	4453      	add	r3, sl
 8009a94:	9307      	str	r3, [sp, #28]
 8009a96:	2300      	movs	r3, #0
 8009a98:	9308      	str	r3, [sp, #32]
 8009a9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a9c:	2b09      	cmp	r3, #9
 8009a9e:	f200 808f 	bhi.w	8009bc0 <_dtoa_r+0x2e0>
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	bfc4      	itt	gt
 8009aa6:	3b04      	subgt	r3, #4
 8009aa8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009aaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009aac:	bfc8      	it	gt
 8009aae:	2500      	movgt	r5, #0
 8009ab0:	f1a3 0302 	sub.w	r3, r3, #2
 8009ab4:	bfd8      	it	le
 8009ab6:	2501      	movle	r5, #1
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	f200 808d 	bhi.w	8009bd8 <_dtoa_r+0x2f8>
 8009abe:	e8df f003 	tbb	[pc, r3]
 8009ac2:	7d7b      	.short	0x7d7b
 8009ac4:	6f2f      	.short	0x6f2f
 8009ac6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009aca:	441d      	add	r5, r3
 8009acc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009ad0:	2820      	cmp	r0, #32
 8009ad2:	dd13      	ble.n	8009afc <_dtoa_r+0x21c>
 8009ad4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009ad8:	9b02      	ldr	r3, [sp, #8]
 8009ada:	fa08 f800 	lsl.w	r8, r8, r0
 8009ade:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009ae2:	fa23 f000 	lsr.w	r0, r3, r0
 8009ae6:	ea48 0000 	orr.w	r0, r8, r0
 8009aea:	f7f6 fc7b 	bl	80003e4 <__aeabi_ui2d>
 8009aee:	2301      	movs	r3, #1
 8009af0:	4680      	mov	r8, r0
 8009af2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009af6:	3d01      	subs	r5, #1
 8009af8:	9310      	str	r3, [sp, #64]	; 0x40
 8009afa:	e771      	b.n	80099e0 <_dtoa_r+0x100>
 8009afc:	9b02      	ldr	r3, [sp, #8]
 8009afe:	f1c0 0020 	rsb	r0, r0, #32
 8009b02:	fa03 f000 	lsl.w	r0, r3, r0
 8009b06:	e7f0      	b.n	8009aea <_dtoa_r+0x20a>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e7b0      	b.n	8009a6e <_dtoa_r+0x18e>
 8009b0c:	900d      	str	r0, [sp, #52]	; 0x34
 8009b0e:	e7af      	b.n	8009a70 <_dtoa_r+0x190>
 8009b10:	f1ca 0300 	rsb	r3, sl, #0
 8009b14:	9308      	str	r3, [sp, #32]
 8009b16:	2300      	movs	r3, #0
 8009b18:	eba9 090a 	sub.w	r9, r9, sl
 8009b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b1e:	e7bc      	b.n	8009a9a <_dtoa_r+0x1ba>
 8009b20:	2301      	movs	r3, #1
 8009b22:	9309      	str	r3, [sp, #36]	; 0x24
 8009b24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dd74      	ble.n	8009c14 <_dtoa_r+0x334>
 8009b2a:	4698      	mov	r8, r3
 8009b2c:	9304      	str	r3, [sp, #16]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b32:	6072      	str	r2, [r6, #4]
 8009b34:	2204      	movs	r2, #4
 8009b36:	f102 0014 	add.w	r0, r2, #20
 8009b3a:	4298      	cmp	r0, r3
 8009b3c:	6871      	ldr	r1, [r6, #4]
 8009b3e:	d96e      	bls.n	8009c1e <_dtoa_r+0x33e>
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 fc97 	bl	800a474 <_Balloc>
 8009b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b48:	6030      	str	r0, [r6, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f1b8 0f0e 	cmp.w	r8, #14
 8009b50:	9306      	str	r3, [sp, #24]
 8009b52:	f200 80ed 	bhi.w	8009d30 <_dtoa_r+0x450>
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	f000 80ea 	beq.w	8009d30 <_dtoa_r+0x450>
 8009b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b60:	f1ba 0f00 	cmp.w	sl, #0
 8009b64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009b68:	dd77      	ble.n	8009c5a <_dtoa_r+0x37a>
 8009b6a:	4a28      	ldr	r2, [pc, #160]	; (8009c0c <_dtoa_r+0x32c>)
 8009b6c:	f00a 030f 	and.w	r3, sl, #15
 8009b70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009b74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b78:	06f0      	lsls	r0, r6, #27
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009b82:	d568      	bpl.n	8009c56 <_dtoa_r+0x376>
 8009b84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009b88:	4b21      	ldr	r3, [pc, #132]	; (8009c10 <_dtoa_r+0x330>)
 8009b8a:	2503      	movs	r5, #3
 8009b8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b90:	f7f6 fdcc 	bl	800072c <__aeabi_ddiv>
 8009b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b98:	f006 060f 	and.w	r6, r6, #15
 8009b9c:	4f1c      	ldr	r7, [pc, #112]	; (8009c10 <_dtoa_r+0x330>)
 8009b9e:	e04f      	b.n	8009c40 <_dtoa_r+0x360>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ba6:	4453      	add	r3, sl
 8009ba8:	f103 0801 	add.w	r8, r3, #1
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	4643      	mov	r3, r8
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	bfb8      	it	lt
 8009bb4:	2301      	movlt	r3, #1
 8009bb6:	e7ba      	b.n	8009b2e <_dtoa_r+0x24e>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	e7b2      	b.n	8009b22 <_dtoa_r+0x242>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e7f0      	b.n	8009ba2 <_dtoa_r+0x2c2>
 8009bc0:	2501      	movs	r5, #1
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9509      	str	r5, [sp, #36]	; 0x24
 8009bc6:	931e      	str	r3, [sp, #120]	; 0x78
 8009bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bcc:	2200      	movs	r2, #0
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	4698      	mov	r8, r3
 8009bd2:	2312      	movs	r3, #18
 8009bd4:	921f      	str	r2, [sp, #124]	; 0x7c
 8009bd6:	e7aa      	b.n	8009b2e <_dtoa_r+0x24e>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	9309      	str	r3, [sp, #36]	; 0x24
 8009bdc:	e7f4      	b.n	8009bc8 <_dtoa_r+0x2e8>
 8009bde:	bf00      	nop
 8009be0:	636f4361 	.word	0x636f4361
 8009be4:	3fd287a7 	.word	0x3fd287a7
 8009be8:	8b60c8b3 	.word	0x8b60c8b3
 8009bec:	3fc68a28 	.word	0x3fc68a28
 8009bf0:	509f79fb 	.word	0x509f79fb
 8009bf4:	3fd34413 	.word	0x3fd34413
 8009bf8:	7ff00000 	.word	0x7ff00000
 8009bfc:	0800ac57 	.word	0x0800ac57
 8009c00:	0800ac4e 	.word	0x0800ac4e
 8009c04:	0800ac4d 	.word	0x0800ac4d
 8009c08:	3ff80000 	.word	0x3ff80000
 8009c0c:	0800ac88 	.word	0x0800ac88
 8009c10:	0800ac60 	.word	0x0800ac60
 8009c14:	2301      	movs	r3, #1
 8009c16:	9304      	str	r3, [sp, #16]
 8009c18:	4698      	mov	r8, r3
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	e7da      	b.n	8009bd4 <_dtoa_r+0x2f4>
 8009c1e:	3101      	adds	r1, #1
 8009c20:	6071      	str	r1, [r6, #4]
 8009c22:	0052      	lsls	r2, r2, #1
 8009c24:	e787      	b.n	8009b36 <_dtoa_r+0x256>
 8009c26:	07f1      	lsls	r1, r6, #31
 8009c28:	d508      	bpl.n	8009c3c <_dtoa_r+0x35c>
 8009c2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c32:	f7f6 fc51 	bl	80004d8 <__aeabi_dmul>
 8009c36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c3a:	3501      	adds	r5, #1
 8009c3c:	1076      	asrs	r6, r6, #1
 8009c3e:	3708      	adds	r7, #8
 8009c40:	2e00      	cmp	r6, #0
 8009c42:	d1f0      	bne.n	8009c26 <_dtoa_r+0x346>
 8009c44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c4c:	f7f6 fd6e 	bl	800072c <__aeabi_ddiv>
 8009c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c54:	e01b      	b.n	8009c8e <_dtoa_r+0x3ae>
 8009c56:	2502      	movs	r5, #2
 8009c58:	e7a0      	b.n	8009b9c <_dtoa_r+0x2bc>
 8009c5a:	f000 80a4 	beq.w	8009da6 <_dtoa_r+0x4c6>
 8009c5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009c62:	f1ca 0600 	rsb	r6, sl, #0
 8009c66:	4ba0      	ldr	r3, [pc, #640]	; (8009ee8 <_dtoa_r+0x608>)
 8009c68:	f006 020f 	and.w	r2, r6, #15
 8009c6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f7f6 fc30 	bl	80004d8 <__aeabi_dmul>
 8009c78:	2502      	movs	r5, #2
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c80:	4f9a      	ldr	r7, [pc, #616]	; (8009eec <_dtoa_r+0x60c>)
 8009c82:	1136      	asrs	r6, r6, #4
 8009c84:	2e00      	cmp	r6, #0
 8009c86:	f040 8083 	bne.w	8009d90 <_dtoa_r+0x4b0>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e0      	bne.n	8009c50 <_dtoa_r+0x370>
 8009c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 808a 	beq.w	8009daa <_dtoa_r+0x4ca>
 8009c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	4b92      	ldr	r3, [pc, #584]	; (8009ef0 <_dtoa_r+0x610>)
 8009ca6:	f7f6 fe89 	bl	80009bc <__aeabi_dcmplt>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d07d      	beq.n	8009daa <_dtoa_r+0x4ca>
 8009cae:	f1b8 0f00 	cmp.w	r8, #0
 8009cb2:	d07a      	beq.n	8009daa <_dtoa_r+0x4ca>
 8009cb4:	9b04      	ldr	r3, [sp, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dd36      	ble.n	8009d28 <_dtoa_r+0x448>
 8009cba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4b8c      	ldr	r3, [pc, #560]	; (8009ef4 <_dtoa_r+0x614>)
 8009cc2:	f7f6 fc09 	bl	80004d8 <__aeabi_dmul>
 8009cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cca:	9e04      	ldr	r6, [sp, #16]
 8009ccc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009cd0:	3501      	adds	r5, #1
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f7f6 fb96 	bl	8000404 <__aeabi_i2d>
 8009cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cdc:	f7f6 fbfc 	bl	80004d8 <__aeabi_dmul>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4b85      	ldr	r3, [pc, #532]	; (8009ef8 <_dtoa_r+0x618>)
 8009ce4:	f7f6 fa42 	bl	800016c <__adddf3>
 8009ce8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009cec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009cf0:	950b      	str	r5, [sp, #44]	; 0x2c
 8009cf2:	2e00      	cmp	r6, #0
 8009cf4:	d15c      	bne.n	8009db0 <_dtoa_r+0x4d0>
 8009cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4b7f      	ldr	r3, [pc, #508]	; (8009efc <_dtoa_r+0x61c>)
 8009cfe:	f7f6 fa33 	bl	8000168 <__aeabi_dsub>
 8009d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d04:	462b      	mov	r3, r5
 8009d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d0a:	f7f6 fe75 	bl	80009f8 <__aeabi_dcmpgt>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f040 8281 	bne.w	800a216 <_dtoa_r+0x936>
 8009d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d1a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009d1e:	f7f6 fe4d 	bl	80009bc <__aeabi_dcmplt>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	f040 8275 	bne.w	800a212 <_dtoa_r+0x932>
 8009d28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f2c0 814b 	blt.w	8009fce <_dtoa_r+0x6ee>
 8009d38:	f1ba 0f0e 	cmp.w	sl, #14
 8009d3c:	f300 8147 	bgt.w	8009fce <_dtoa_r+0x6ee>
 8009d40:	4b69      	ldr	r3, [pc, #420]	; (8009ee8 <_dtoa_r+0x608>)
 8009d42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f280 80d7 	bge.w	8009f04 <_dtoa_r+0x624>
 8009d56:	f1b8 0f00 	cmp.w	r8, #0
 8009d5a:	f300 80d3 	bgt.w	8009f04 <_dtoa_r+0x624>
 8009d5e:	f040 8257 	bne.w	800a210 <_dtoa_r+0x930>
 8009d62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d66:	2200      	movs	r2, #0
 8009d68:	4b64      	ldr	r3, [pc, #400]	; (8009efc <_dtoa_r+0x61c>)
 8009d6a:	f7f6 fbb5 	bl	80004d8 <__aeabi_dmul>
 8009d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d72:	f7f6 fe37 	bl	80009e4 <__aeabi_dcmpge>
 8009d76:	4646      	mov	r6, r8
 8009d78:	4647      	mov	r7, r8
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f040 822d 	bne.w	800a1da <_dtoa_r+0x8fa>
 8009d80:	9b06      	ldr	r3, [sp, #24]
 8009d82:	9a06      	ldr	r2, [sp, #24]
 8009d84:	1c5d      	adds	r5, r3, #1
 8009d86:	2331      	movs	r3, #49	; 0x31
 8009d88:	f10a 0a01 	add.w	sl, sl, #1
 8009d8c:	7013      	strb	r3, [r2, #0]
 8009d8e:	e228      	b.n	800a1e2 <_dtoa_r+0x902>
 8009d90:	07f2      	lsls	r2, r6, #31
 8009d92:	d505      	bpl.n	8009da0 <_dtoa_r+0x4c0>
 8009d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d98:	f7f6 fb9e 	bl	80004d8 <__aeabi_dmul>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	3501      	adds	r5, #1
 8009da0:	1076      	asrs	r6, r6, #1
 8009da2:	3708      	adds	r7, #8
 8009da4:	e76e      	b.n	8009c84 <_dtoa_r+0x3a4>
 8009da6:	2502      	movs	r5, #2
 8009da8:	e771      	b.n	8009c8e <_dtoa_r+0x3ae>
 8009daa:	4657      	mov	r7, sl
 8009dac:	4646      	mov	r6, r8
 8009dae:	e790      	b.n	8009cd2 <_dtoa_r+0x3f2>
 8009db0:	4b4d      	ldr	r3, [pc, #308]	; (8009ee8 <_dtoa_r+0x608>)
 8009db2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009db6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d048      	beq.n	8009e52 <_dtoa_r+0x572>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	494e      	ldr	r1, [pc, #312]	; (8009f00 <_dtoa_r+0x620>)
 8009dc8:	f7f6 fcb0 	bl	800072c <__aeabi_ddiv>
 8009dcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009dd0:	f7f6 f9ca 	bl	8000168 <__aeabi_dsub>
 8009dd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009dd8:	9d06      	ldr	r5, [sp, #24]
 8009dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dde:	f7f6 fe2b 	bl	8000a38 <__aeabi_d2iz>
 8009de2:	9011      	str	r0, [sp, #68]	; 0x44
 8009de4:	f7f6 fb0e 	bl	8000404 <__aeabi_i2d>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009df0:	f7f6 f9ba 	bl	8000168 <__aeabi_dsub>
 8009df4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009df6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dfa:	3330      	adds	r3, #48	; 0x30
 8009dfc:	f805 3b01 	strb.w	r3, [r5], #1
 8009e00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e04:	f7f6 fdda 	bl	80009bc <__aeabi_dcmplt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d163      	bne.n	8009ed4 <_dtoa_r+0x5f4>
 8009e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e10:	2000      	movs	r0, #0
 8009e12:	4937      	ldr	r1, [pc, #220]	; (8009ef0 <_dtoa_r+0x610>)
 8009e14:	f7f6 f9a8 	bl	8000168 <__aeabi_dsub>
 8009e18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e1c:	f7f6 fdce 	bl	80009bc <__aeabi_dcmplt>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	f040 80b5 	bne.w	8009f90 <_dtoa_r+0x6b0>
 8009e26:	9b06      	ldr	r3, [sp, #24]
 8009e28:	1aeb      	subs	r3, r5, r3
 8009e2a:	429e      	cmp	r6, r3
 8009e2c:	f77f af7c 	ble.w	8009d28 <_dtoa_r+0x448>
 8009e30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e34:	2200      	movs	r2, #0
 8009e36:	4b2f      	ldr	r3, [pc, #188]	; (8009ef4 <_dtoa_r+0x614>)
 8009e38:	f7f6 fb4e 	bl	80004d8 <__aeabi_dmul>
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e46:	4b2b      	ldr	r3, [pc, #172]	; (8009ef4 <_dtoa_r+0x614>)
 8009e48:	f7f6 fb46 	bl	80004d8 <__aeabi_dmul>
 8009e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e50:	e7c3      	b.n	8009dda <_dtoa_r+0x4fa>
 8009e52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e56:	f7f6 fb3f 	bl	80004d8 <__aeabi_dmul>
 8009e5a:	9b06      	ldr	r3, [sp, #24]
 8009e5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e60:	199d      	adds	r5, r3, r6
 8009e62:	461e      	mov	r6, r3
 8009e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e68:	f7f6 fde6 	bl	8000a38 <__aeabi_d2iz>
 8009e6c:	9011      	str	r0, [sp, #68]	; 0x44
 8009e6e:	f7f6 fac9 	bl	8000404 <__aeabi_i2d>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e7a:	f7f6 f975 	bl	8000168 <__aeabi_dsub>
 8009e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e84:	3330      	adds	r3, #48	; 0x30
 8009e86:	f806 3b01 	strb.w	r3, [r6], #1
 8009e8a:	42ae      	cmp	r6, r5
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	d124      	bne.n	8009edc <_dtoa_r+0x5fc>
 8009e92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e96:	4b1a      	ldr	r3, [pc, #104]	; (8009f00 <_dtoa_r+0x620>)
 8009e98:	f7f6 f968 	bl	800016c <__adddf3>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea4:	f7f6 fda8 	bl	80009f8 <__aeabi_dcmpgt>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d171      	bne.n	8009f90 <_dtoa_r+0x6b0>
 8009eac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	4913      	ldr	r1, [pc, #76]	; (8009f00 <_dtoa_r+0x620>)
 8009eb4:	f7f6 f958 	bl	8000168 <__aeabi_dsub>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ec0:	f7f6 fd7c 	bl	80009bc <__aeabi_dcmplt>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f43f af2f 	beq.w	8009d28 <_dtoa_r+0x448>
 8009eca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ece:	1e6a      	subs	r2, r5, #1
 8009ed0:	2b30      	cmp	r3, #48	; 0x30
 8009ed2:	d001      	beq.n	8009ed8 <_dtoa_r+0x5f8>
 8009ed4:	46ba      	mov	sl, r7
 8009ed6:	e04a      	b.n	8009f6e <_dtoa_r+0x68e>
 8009ed8:	4615      	mov	r5, r2
 8009eda:	e7f6      	b.n	8009eca <_dtoa_r+0x5ea>
 8009edc:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <_dtoa_r+0x614>)
 8009ede:	f7f6 fafb 	bl	80004d8 <__aeabi_dmul>
 8009ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ee6:	e7bd      	b.n	8009e64 <_dtoa_r+0x584>
 8009ee8:	0800ac88 	.word	0x0800ac88
 8009eec:	0800ac60 	.word	0x0800ac60
 8009ef0:	3ff00000 	.word	0x3ff00000
 8009ef4:	40240000 	.word	0x40240000
 8009ef8:	401c0000 	.word	0x401c0000
 8009efc:	40140000 	.word	0x40140000
 8009f00:	3fe00000 	.word	0x3fe00000
 8009f04:	9d06      	ldr	r5, [sp, #24]
 8009f06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f0e:	4630      	mov	r0, r6
 8009f10:	4639      	mov	r1, r7
 8009f12:	f7f6 fc0b 	bl	800072c <__aeabi_ddiv>
 8009f16:	f7f6 fd8f 	bl	8000a38 <__aeabi_d2iz>
 8009f1a:	4681      	mov	r9, r0
 8009f1c:	f7f6 fa72 	bl	8000404 <__aeabi_i2d>
 8009f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f24:	f7f6 fad8 	bl	80004d8 <__aeabi_dmul>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	4639      	mov	r1, r7
 8009f30:	f7f6 f91a 	bl	8000168 <__aeabi_dsub>
 8009f34:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009f38:	f805 6b01 	strb.w	r6, [r5], #1
 8009f3c:	9e06      	ldr	r6, [sp, #24]
 8009f3e:	4602      	mov	r2, r0
 8009f40:	1bae      	subs	r6, r5, r6
 8009f42:	45b0      	cmp	r8, r6
 8009f44:	460b      	mov	r3, r1
 8009f46:	d135      	bne.n	8009fb4 <_dtoa_r+0x6d4>
 8009f48:	f7f6 f910 	bl	800016c <__adddf3>
 8009f4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f50:	4606      	mov	r6, r0
 8009f52:	460f      	mov	r7, r1
 8009f54:	f7f6 fd50 	bl	80009f8 <__aeabi_dcmpgt>
 8009f58:	b9c8      	cbnz	r0, 8009f8e <_dtoa_r+0x6ae>
 8009f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f5e:	4630      	mov	r0, r6
 8009f60:	4639      	mov	r1, r7
 8009f62:	f7f6 fd21 	bl	80009a8 <__aeabi_dcmpeq>
 8009f66:	b110      	cbz	r0, 8009f6e <_dtoa_r+0x68e>
 8009f68:	f019 0f01 	tst.w	r9, #1
 8009f6c:	d10f      	bne.n	8009f8e <_dtoa_r+0x6ae>
 8009f6e:	4659      	mov	r1, fp
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 fab3 	bl	800a4dc <_Bfree>
 8009f76:	2300      	movs	r3, #0
 8009f78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f7a:	702b      	strb	r3, [r5, #0]
 8009f7c:	f10a 0301 	add.w	r3, sl, #1
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f43f acf3 	beq.w	8009970 <_dtoa_r+0x90>
 8009f8a:	601d      	str	r5, [r3, #0]
 8009f8c:	e4f0      	b.n	8009970 <_dtoa_r+0x90>
 8009f8e:	4657      	mov	r7, sl
 8009f90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f94:	1e6b      	subs	r3, r5, #1
 8009f96:	2a39      	cmp	r2, #57	; 0x39
 8009f98:	d106      	bne.n	8009fa8 <_dtoa_r+0x6c8>
 8009f9a:	9a06      	ldr	r2, [sp, #24]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d107      	bne.n	8009fb0 <_dtoa_r+0x6d0>
 8009fa0:	2330      	movs	r3, #48	; 0x30
 8009fa2:	7013      	strb	r3, [r2, #0]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	3701      	adds	r7, #1
 8009fa8:	781a      	ldrb	r2, [r3, #0]
 8009faa:	3201      	adds	r2, #1
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	e791      	b.n	8009ed4 <_dtoa_r+0x5f4>
 8009fb0:	461d      	mov	r5, r3
 8009fb2:	e7ed      	b.n	8009f90 <_dtoa_r+0x6b0>
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4b99      	ldr	r3, [pc, #612]	; (800a21c <_dtoa_r+0x93c>)
 8009fb8:	f7f6 fa8e 	bl	80004d8 <__aeabi_dmul>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	460f      	mov	r7, r1
 8009fc4:	f7f6 fcf0 	bl	80009a8 <__aeabi_dcmpeq>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d09e      	beq.n	8009f0a <_dtoa_r+0x62a>
 8009fcc:	e7cf      	b.n	8009f6e <_dtoa_r+0x68e>
 8009fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd0:	2a00      	cmp	r2, #0
 8009fd2:	f000 8088 	beq.w	800a0e6 <_dtoa_r+0x806>
 8009fd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009fd8:	2a01      	cmp	r2, #1
 8009fda:	dc6d      	bgt.n	800a0b8 <_dtoa_r+0x7d8>
 8009fdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009fde:	2a00      	cmp	r2, #0
 8009fe0:	d066      	beq.n	800a0b0 <_dtoa_r+0x7d0>
 8009fe2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fe6:	464d      	mov	r5, r9
 8009fe8:	9e08      	ldr	r6, [sp, #32]
 8009fea:	9a07      	ldr	r2, [sp, #28]
 8009fec:	2101      	movs	r1, #1
 8009fee:	441a      	add	r2, r3
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4499      	add	r9, r3
 8009ff4:	9207      	str	r2, [sp, #28]
 8009ff6:	f000 fb11 	bl	800a61c <__i2b>
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	dd0b      	ble.n	800a018 <_dtoa_r+0x738>
 800a000:	9b07      	ldr	r3, [sp, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	dd08      	ble.n	800a018 <_dtoa_r+0x738>
 800a006:	42ab      	cmp	r3, r5
 800a008:	bfa8      	it	ge
 800a00a:	462b      	movge	r3, r5
 800a00c:	9a07      	ldr	r2, [sp, #28]
 800a00e:	eba9 0903 	sub.w	r9, r9, r3
 800a012:	1aed      	subs	r5, r5, r3
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	9307      	str	r3, [sp, #28]
 800a018:	9b08      	ldr	r3, [sp, #32]
 800a01a:	b1eb      	cbz	r3, 800a058 <_dtoa_r+0x778>
 800a01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d065      	beq.n	800a0ee <_dtoa_r+0x80e>
 800a022:	b18e      	cbz	r6, 800a048 <_dtoa_r+0x768>
 800a024:	4639      	mov	r1, r7
 800a026:	4632      	mov	r2, r6
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 fb95 	bl	800a758 <__pow5mult>
 800a02e:	465a      	mov	r2, fp
 800a030:	4601      	mov	r1, r0
 800a032:	4607      	mov	r7, r0
 800a034:	4620      	mov	r0, r4
 800a036:	f000 fafa 	bl	800a62e <__multiply>
 800a03a:	4659      	mov	r1, fp
 800a03c:	900a      	str	r0, [sp, #40]	; 0x28
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 fa4c 	bl	800a4dc <_Bfree>
 800a044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a046:	469b      	mov	fp, r3
 800a048:	9b08      	ldr	r3, [sp, #32]
 800a04a:	1b9a      	subs	r2, r3, r6
 800a04c:	d004      	beq.n	800a058 <_dtoa_r+0x778>
 800a04e:	4659      	mov	r1, fp
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fb81 	bl	800a758 <__pow5mult>
 800a056:	4683      	mov	fp, r0
 800a058:	2101      	movs	r1, #1
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fade 	bl	800a61c <__i2b>
 800a060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a062:	4606      	mov	r6, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 81c6 	beq.w	800a3f6 <_dtoa_r+0xb16>
 800a06a:	461a      	mov	r2, r3
 800a06c:	4601      	mov	r1, r0
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 fb72 	bl	800a758 <__pow5mult>
 800a074:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a076:	4606      	mov	r6, r0
 800a078:	2b01      	cmp	r3, #1
 800a07a:	dc3e      	bgt.n	800a0fa <_dtoa_r+0x81a>
 800a07c:	9b02      	ldr	r3, [sp, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d137      	bne.n	800a0f2 <_dtoa_r+0x812>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d134      	bne.n	800a0f6 <_dtoa_r+0x816>
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a092:	0d1b      	lsrs	r3, r3, #20
 800a094:	051b      	lsls	r3, r3, #20
 800a096:	b12b      	cbz	r3, 800a0a4 <_dtoa_r+0x7c4>
 800a098:	9b07      	ldr	r3, [sp, #28]
 800a09a:	f109 0901 	add.w	r9, r9, #1
 800a09e:	3301      	adds	r3, #1
 800a0a0:	9307      	str	r3, [sp, #28]
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	9308      	str	r3, [sp, #32]
 800a0a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d128      	bne.n	800a0fe <_dtoa_r+0x81e>
 800a0ac:	2001      	movs	r0, #1
 800a0ae:	e02e      	b.n	800a10e <_dtoa_r+0x82e>
 800a0b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0b6:	e796      	b.n	8009fe6 <_dtoa_r+0x706>
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	f108 36ff 	add.w	r6, r8, #4294967295
 800a0be:	42b3      	cmp	r3, r6
 800a0c0:	bfb7      	itett	lt
 800a0c2:	9b08      	ldrlt	r3, [sp, #32]
 800a0c4:	1b9e      	subge	r6, r3, r6
 800a0c6:	1af2      	sublt	r2, r6, r3
 800a0c8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a0ca:	bfbf      	itttt	lt
 800a0cc:	9608      	strlt	r6, [sp, #32]
 800a0ce:	189b      	addlt	r3, r3, r2
 800a0d0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a0d2:	2600      	movlt	r6, #0
 800a0d4:	f1b8 0f00 	cmp.w	r8, #0
 800a0d8:	bfb9      	ittee	lt
 800a0da:	eba9 0508 	sublt.w	r5, r9, r8
 800a0de:	2300      	movlt	r3, #0
 800a0e0:	464d      	movge	r5, r9
 800a0e2:	4643      	movge	r3, r8
 800a0e4:	e781      	b.n	8009fea <_dtoa_r+0x70a>
 800a0e6:	9e08      	ldr	r6, [sp, #32]
 800a0e8:	464d      	mov	r5, r9
 800a0ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a0ec:	e786      	b.n	8009ffc <_dtoa_r+0x71c>
 800a0ee:	9a08      	ldr	r2, [sp, #32]
 800a0f0:	e7ad      	b.n	800a04e <_dtoa_r+0x76e>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e7d6      	b.n	800a0a4 <_dtoa_r+0x7c4>
 800a0f6:	9b02      	ldr	r3, [sp, #8]
 800a0f8:	e7d4      	b.n	800a0a4 <_dtoa_r+0x7c4>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	9308      	str	r3, [sp, #32]
 800a0fe:	6933      	ldr	r3, [r6, #16]
 800a100:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a104:	6918      	ldr	r0, [r3, #16]
 800a106:	f000 fa3b 	bl	800a580 <__hi0bits>
 800a10a:	f1c0 0020 	rsb	r0, r0, #32
 800a10e:	9b07      	ldr	r3, [sp, #28]
 800a110:	4418      	add	r0, r3
 800a112:	f010 001f 	ands.w	r0, r0, #31
 800a116:	d047      	beq.n	800a1a8 <_dtoa_r+0x8c8>
 800a118:	f1c0 0320 	rsb	r3, r0, #32
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	dd3b      	ble.n	800a198 <_dtoa_r+0x8b8>
 800a120:	9b07      	ldr	r3, [sp, #28]
 800a122:	f1c0 001c 	rsb	r0, r0, #28
 800a126:	4481      	add	r9, r0
 800a128:	4405      	add	r5, r0
 800a12a:	4403      	add	r3, r0
 800a12c:	9307      	str	r3, [sp, #28]
 800a12e:	f1b9 0f00 	cmp.w	r9, #0
 800a132:	dd05      	ble.n	800a140 <_dtoa_r+0x860>
 800a134:	4659      	mov	r1, fp
 800a136:	464a      	mov	r2, r9
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fb5b 	bl	800a7f4 <__lshift>
 800a13e:	4683      	mov	fp, r0
 800a140:	9b07      	ldr	r3, [sp, #28]
 800a142:	2b00      	cmp	r3, #0
 800a144:	dd05      	ble.n	800a152 <_dtoa_r+0x872>
 800a146:	4631      	mov	r1, r6
 800a148:	461a      	mov	r2, r3
 800a14a:	4620      	mov	r0, r4
 800a14c:	f000 fb52 	bl	800a7f4 <__lshift>
 800a150:	4606      	mov	r6, r0
 800a152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a154:	b353      	cbz	r3, 800a1ac <_dtoa_r+0x8cc>
 800a156:	4631      	mov	r1, r6
 800a158:	4658      	mov	r0, fp
 800a15a:	f000 fb9f 	bl	800a89c <__mcmp>
 800a15e:	2800      	cmp	r0, #0
 800a160:	da24      	bge.n	800a1ac <_dtoa_r+0x8cc>
 800a162:	2300      	movs	r3, #0
 800a164:	4659      	mov	r1, fp
 800a166:	220a      	movs	r2, #10
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 f9ce 	bl	800a50a <__multadd>
 800a16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a170:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a174:	4683      	mov	fp, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 8144 	beq.w	800a404 <_dtoa_r+0xb24>
 800a17c:	2300      	movs	r3, #0
 800a17e:	4639      	mov	r1, r7
 800a180:	220a      	movs	r2, #10
 800a182:	4620      	mov	r0, r4
 800a184:	f000 f9c1 	bl	800a50a <__multadd>
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	4607      	mov	r7, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dc4d      	bgt.n	800a22c <_dtoa_r+0x94c>
 800a190:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a192:	2b02      	cmp	r3, #2
 800a194:	dd4a      	ble.n	800a22c <_dtoa_r+0x94c>
 800a196:	e011      	b.n	800a1bc <_dtoa_r+0x8dc>
 800a198:	d0c9      	beq.n	800a12e <_dtoa_r+0x84e>
 800a19a:	9a07      	ldr	r2, [sp, #28]
 800a19c:	331c      	adds	r3, #28
 800a19e:	441a      	add	r2, r3
 800a1a0:	4499      	add	r9, r3
 800a1a2:	441d      	add	r5, r3
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	e7c1      	b.n	800a12c <_dtoa_r+0x84c>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	e7f6      	b.n	800a19a <_dtoa_r+0x8ba>
 800a1ac:	f1b8 0f00 	cmp.w	r8, #0
 800a1b0:	dc36      	bgt.n	800a220 <_dtoa_r+0x940>
 800a1b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	dd33      	ble.n	800a220 <_dtoa_r+0x940>
 800a1b8:	f8cd 8010 	str.w	r8, [sp, #16]
 800a1bc:	9b04      	ldr	r3, [sp, #16]
 800a1be:	b963      	cbnz	r3, 800a1da <_dtoa_r+0x8fa>
 800a1c0:	4631      	mov	r1, r6
 800a1c2:	2205      	movs	r2, #5
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 f9a0 	bl	800a50a <__multadd>
 800a1ca:	4601      	mov	r1, r0
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	4658      	mov	r0, fp
 800a1d0:	f000 fb64 	bl	800a89c <__mcmp>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	f73f add3 	bgt.w	8009d80 <_dtoa_r+0x4a0>
 800a1da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a1dc:	9d06      	ldr	r5, [sp, #24]
 800a1de:	ea6f 0a03 	mvn.w	sl, r3
 800a1e2:	f04f 0900 	mov.w	r9, #0
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 f977 	bl	800a4dc <_Bfree>
 800a1ee:	2f00      	cmp	r7, #0
 800a1f0:	f43f aebd 	beq.w	8009f6e <_dtoa_r+0x68e>
 800a1f4:	f1b9 0f00 	cmp.w	r9, #0
 800a1f8:	d005      	beq.n	800a206 <_dtoa_r+0x926>
 800a1fa:	45b9      	cmp	r9, r7
 800a1fc:	d003      	beq.n	800a206 <_dtoa_r+0x926>
 800a1fe:	4649      	mov	r1, r9
 800a200:	4620      	mov	r0, r4
 800a202:	f000 f96b 	bl	800a4dc <_Bfree>
 800a206:	4639      	mov	r1, r7
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 f967 	bl	800a4dc <_Bfree>
 800a20e:	e6ae      	b.n	8009f6e <_dtoa_r+0x68e>
 800a210:	2600      	movs	r6, #0
 800a212:	4637      	mov	r7, r6
 800a214:	e7e1      	b.n	800a1da <_dtoa_r+0x8fa>
 800a216:	46ba      	mov	sl, r7
 800a218:	4637      	mov	r7, r6
 800a21a:	e5b1      	b.n	8009d80 <_dtoa_r+0x4a0>
 800a21c:	40240000 	.word	0x40240000
 800a220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a222:	f8cd 8010 	str.w	r8, [sp, #16]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 80f3 	beq.w	800a412 <_dtoa_r+0xb32>
 800a22c:	2d00      	cmp	r5, #0
 800a22e:	dd05      	ble.n	800a23c <_dtoa_r+0x95c>
 800a230:	4639      	mov	r1, r7
 800a232:	462a      	mov	r2, r5
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fadd 	bl	800a7f4 <__lshift>
 800a23a:	4607      	mov	r7, r0
 800a23c:	9b08      	ldr	r3, [sp, #32]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d04c      	beq.n	800a2dc <_dtoa_r+0x9fc>
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	4620      	mov	r0, r4
 800a246:	f000 f915 	bl	800a474 <_Balloc>
 800a24a:	4605      	mov	r5, r0
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	f107 010c 	add.w	r1, r7, #12
 800a252:	3202      	adds	r2, #2
 800a254:	0092      	lsls	r2, r2, #2
 800a256:	300c      	adds	r0, #12
 800a258:	f7fe ff64 	bl	8009124 <memcpy>
 800a25c:	2201      	movs	r2, #1
 800a25e:	4629      	mov	r1, r5
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fac7 	bl	800a7f4 <__lshift>
 800a266:	46b9      	mov	r9, r7
 800a268:	4607      	mov	r7, r0
 800a26a:	9b06      	ldr	r3, [sp, #24]
 800a26c:	9307      	str	r3, [sp, #28]
 800a26e:	9b02      	ldr	r3, [sp, #8]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	9308      	str	r3, [sp, #32]
 800a276:	4631      	mov	r1, r6
 800a278:	4658      	mov	r0, fp
 800a27a:	f7ff faa3 	bl	80097c4 <quorem>
 800a27e:	4649      	mov	r1, r9
 800a280:	4605      	mov	r5, r0
 800a282:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a286:	4658      	mov	r0, fp
 800a288:	f000 fb08 	bl	800a89c <__mcmp>
 800a28c:	463a      	mov	r2, r7
 800a28e:	9002      	str	r0, [sp, #8]
 800a290:	4631      	mov	r1, r6
 800a292:	4620      	mov	r0, r4
 800a294:	f000 fb1c 	bl	800a8d0 <__mdiff>
 800a298:	68c3      	ldr	r3, [r0, #12]
 800a29a:	4602      	mov	r2, r0
 800a29c:	bb03      	cbnz	r3, 800a2e0 <_dtoa_r+0xa00>
 800a29e:	4601      	mov	r1, r0
 800a2a0:	9009      	str	r0, [sp, #36]	; 0x24
 800a2a2:	4658      	mov	r0, fp
 800a2a4:	f000 fafa 	bl	800a89c <__mcmp>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b2:	f000 f913 	bl	800a4dc <_Bfree>
 800a2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b8:	b9a3      	cbnz	r3, 800a2e4 <_dtoa_r+0xa04>
 800a2ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2bc:	b992      	cbnz	r2, 800a2e4 <_dtoa_r+0xa04>
 800a2be:	9a08      	ldr	r2, [sp, #32]
 800a2c0:	b982      	cbnz	r2, 800a2e4 <_dtoa_r+0xa04>
 800a2c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2c6:	d029      	beq.n	800a31c <_dtoa_r+0xa3c>
 800a2c8:	9b02      	ldr	r3, [sp, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	dd01      	ble.n	800a2d2 <_dtoa_r+0x9f2>
 800a2ce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a2d2:	9b07      	ldr	r3, [sp, #28]
 800a2d4:	1c5d      	adds	r5, r3, #1
 800a2d6:	f883 8000 	strb.w	r8, [r3]
 800a2da:	e784      	b.n	800a1e6 <_dtoa_r+0x906>
 800a2dc:	4638      	mov	r0, r7
 800a2de:	e7c2      	b.n	800a266 <_dtoa_r+0x986>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e7e3      	b.n	800a2ac <_dtoa_r+0x9cc>
 800a2e4:	9a02      	ldr	r2, [sp, #8]
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	db04      	blt.n	800a2f4 <_dtoa_r+0xa14>
 800a2ea:	d123      	bne.n	800a334 <_dtoa_r+0xa54>
 800a2ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2ee:	bb0a      	cbnz	r2, 800a334 <_dtoa_r+0xa54>
 800a2f0:	9a08      	ldr	r2, [sp, #32]
 800a2f2:	b9fa      	cbnz	r2, 800a334 <_dtoa_r+0xa54>
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	ddec      	ble.n	800a2d2 <_dtoa_r+0x9f2>
 800a2f8:	4659      	mov	r1, fp
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f000 fa79 	bl	800a7f4 <__lshift>
 800a302:	4631      	mov	r1, r6
 800a304:	4683      	mov	fp, r0
 800a306:	f000 fac9 	bl	800a89c <__mcmp>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	dc03      	bgt.n	800a316 <_dtoa_r+0xa36>
 800a30e:	d1e0      	bne.n	800a2d2 <_dtoa_r+0x9f2>
 800a310:	f018 0f01 	tst.w	r8, #1
 800a314:	d0dd      	beq.n	800a2d2 <_dtoa_r+0x9f2>
 800a316:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a31a:	d1d8      	bne.n	800a2ce <_dtoa_r+0x9ee>
 800a31c:	9b07      	ldr	r3, [sp, #28]
 800a31e:	9a07      	ldr	r2, [sp, #28]
 800a320:	1c5d      	adds	r5, r3, #1
 800a322:	2339      	movs	r3, #57	; 0x39
 800a324:	7013      	strb	r3, [r2, #0]
 800a326:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a32a:	1e6a      	subs	r2, r5, #1
 800a32c:	2b39      	cmp	r3, #57	; 0x39
 800a32e:	d04d      	beq.n	800a3cc <_dtoa_r+0xaec>
 800a330:	3301      	adds	r3, #1
 800a332:	e052      	b.n	800a3da <_dtoa_r+0xafa>
 800a334:	9a07      	ldr	r2, [sp, #28]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f102 0501 	add.w	r5, r2, #1
 800a33c:	dd06      	ble.n	800a34c <_dtoa_r+0xa6c>
 800a33e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a342:	d0eb      	beq.n	800a31c <_dtoa_r+0xa3c>
 800a344:	f108 0801 	add.w	r8, r8, #1
 800a348:	9b07      	ldr	r3, [sp, #28]
 800a34a:	e7c4      	b.n	800a2d6 <_dtoa_r+0x9f6>
 800a34c:	9b06      	ldr	r3, [sp, #24]
 800a34e:	9a04      	ldr	r2, [sp, #16]
 800a350:	1aeb      	subs	r3, r5, r3
 800a352:	4293      	cmp	r3, r2
 800a354:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a358:	d021      	beq.n	800a39e <_dtoa_r+0xabe>
 800a35a:	4659      	mov	r1, fp
 800a35c:	2300      	movs	r3, #0
 800a35e:	220a      	movs	r2, #10
 800a360:	4620      	mov	r0, r4
 800a362:	f000 f8d2 	bl	800a50a <__multadd>
 800a366:	45b9      	cmp	r9, r7
 800a368:	4683      	mov	fp, r0
 800a36a:	f04f 0300 	mov.w	r3, #0
 800a36e:	f04f 020a 	mov.w	r2, #10
 800a372:	4649      	mov	r1, r9
 800a374:	4620      	mov	r0, r4
 800a376:	d105      	bne.n	800a384 <_dtoa_r+0xaa4>
 800a378:	f000 f8c7 	bl	800a50a <__multadd>
 800a37c:	4681      	mov	r9, r0
 800a37e:	4607      	mov	r7, r0
 800a380:	9507      	str	r5, [sp, #28]
 800a382:	e778      	b.n	800a276 <_dtoa_r+0x996>
 800a384:	f000 f8c1 	bl	800a50a <__multadd>
 800a388:	4639      	mov	r1, r7
 800a38a:	4681      	mov	r9, r0
 800a38c:	2300      	movs	r3, #0
 800a38e:	220a      	movs	r2, #10
 800a390:	4620      	mov	r0, r4
 800a392:	f000 f8ba 	bl	800a50a <__multadd>
 800a396:	4607      	mov	r7, r0
 800a398:	e7f2      	b.n	800a380 <_dtoa_r+0xaa0>
 800a39a:	f04f 0900 	mov.w	r9, #0
 800a39e:	4659      	mov	r1, fp
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 fa26 	bl	800a7f4 <__lshift>
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	4683      	mov	fp, r0
 800a3ac:	f000 fa76 	bl	800a89c <__mcmp>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	dcb8      	bgt.n	800a326 <_dtoa_r+0xa46>
 800a3b4:	d102      	bne.n	800a3bc <_dtoa_r+0xadc>
 800a3b6:	f018 0f01 	tst.w	r8, #1
 800a3ba:	d1b4      	bne.n	800a326 <_dtoa_r+0xa46>
 800a3bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3c0:	1e6a      	subs	r2, r5, #1
 800a3c2:	2b30      	cmp	r3, #48	; 0x30
 800a3c4:	f47f af0f 	bne.w	800a1e6 <_dtoa_r+0x906>
 800a3c8:	4615      	mov	r5, r2
 800a3ca:	e7f7      	b.n	800a3bc <_dtoa_r+0xadc>
 800a3cc:	9b06      	ldr	r3, [sp, #24]
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d105      	bne.n	800a3de <_dtoa_r+0xafe>
 800a3d2:	2331      	movs	r3, #49	; 0x31
 800a3d4:	9a06      	ldr	r2, [sp, #24]
 800a3d6:	f10a 0a01 	add.w	sl, sl, #1
 800a3da:	7013      	strb	r3, [r2, #0]
 800a3dc:	e703      	b.n	800a1e6 <_dtoa_r+0x906>
 800a3de:	4615      	mov	r5, r2
 800a3e0:	e7a1      	b.n	800a326 <_dtoa_r+0xa46>
 800a3e2:	4b17      	ldr	r3, [pc, #92]	; (800a440 <_dtoa_r+0xb60>)
 800a3e4:	f7ff bae1 	b.w	80099aa <_dtoa_r+0xca>
 800a3e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f47f aabb 	bne.w	8009966 <_dtoa_r+0x86>
 800a3f0:	4b14      	ldr	r3, [pc, #80]	; (800a444 <_dtoa_r+0xb64>)
 800a3f2:	f7ff bada 	b.w	80099aa <_dtoa_r+0xca>
 800a3f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	f77f ae3f 	ble.w	800a07c <_dtoa_r+0x79c>
 800a3fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a400:	9308      	str	r3, [sp, #32]
 800a402:	e653      	b.n	800a0ac <_dtoa_r+0x7cc>
 800a404:	9b04      	ldr	r3, [sp, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	dc03      	bgt.n	800a412 <_dtoa_r+0xb32>
 800a40a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	f73f aed5 	bgt.w	800a1bc <_dtoa_r+0x8dc>
 800a412:	9d06      	ldr	r5, [sp, #24]
 800a414:	4631      	mov	r1, r6
 800a416:	4658      	mov	r0, fp
 800a418:	f7ff f9d4 	bl	80097c4 <quorem>
 800a41c:	9b06      	ldr	r3, [sp, #24]
 800a41e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a422:	f805 8b01 	strb.w	r8, [r5], #1
 800a426:	9a04      	ldr	r2, [sp, #16]
 800a428:	1aeb      	subs	r3, r5, r3
 800a42a:	429a      	cmp	r2, r3
 800a42c:	ddb5      	ble.n	800a39a <_dtoa_r+0xaba>
 800a42e:	4659      	mov	r1, fp
 800a430:	2300      	movs	r3, #0
 800a432:	220a      	movs	r2, #10
 800a434:	4620      	mov	r0, r4
 800a436:	f000 f868 	bl	800a50a <__multadd>
 800a43a:	4683      	mov	fp, r0
 800a43c:	e7ea      	b.n	800a414 <_dtoa_r+0xb34>
 800a43e:	bf00      	nop
 800a440:	0800ac4c 	.word	0x0800ac4c
 800a444:	0800ac4e 	.word	0x0800ac4e

0800a448 <_localeconv_r>:
 800a448:	4b04      	ldr	r3, [pc, #16]	; (800a45c <_localeconv_r+0x14>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6a18      	ldr	r0, [r3, #32]
 800a44e:	4b04      	ldr	r3, [pc, #16]	; (800a460 <_localeconv_r+0x18>)
 800a450:	2800      	cmp	r0, #0
 800a452:	bf08      	it	eq
 800a454:	4618      	moveq	r0, r3
 800a456:	30f0      	adds	r0, #240	; 0xf0
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	20000180 	.word	0x20000180
 800a460:	200001e4 	.word	0x200001e4

0800a464 <malloc>:
 800a464:	4b02      	ldr	r3, [pc, #8]	; (800a470 <malloc+0xc>)
 800a466:	4601      	mov	r1, r0
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	f000 baed 	b.w	800aa48 <_malloc_r>
 800a46e:	bf00      	nop
 800a470:	20000180 	.word	0x20000180

0800a474 <_Balloc>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a478:	4604      	mov	r4, r0
 800a47a:	460e      	mov	r6, r1
 800a47c:	b93d      	cbnz	r5, 800a48e <_Balloc+0x1a>
 800a47e:	2010      	movs	r0, #16
 800a480:	f7ff fff0 	bl	800a464 <malloc>
 800a484:	6260      	str	r0, [r4, #36]	; 0x24
 800a486:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a48a:	6005      	str	r5, [r0, #0]
 800a48c:	60c5      	str	r5, [r0, #12]
 800a48e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a490:	68eb      	ldr	r3, [r5, #12]
 800a492:	b183      	cbz	r3, 800a4b6 <_Balloc+0x42>
 800a494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a49c:	b9b8      	cbnz	r0, 800a4ce <_Balloc+0x5a>
 800a49e:	2101      	movs	r1, #1
 800a4a0:	fa01 f506 	lsl.w	r5, r1, r6
 800a4a4:	1d6a      	adds	r2, r5, #5
 800a4a6:	0092      	lsls	r2, r2, #2
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f000 fabe 	bl	800aa2a <_calloc_r>
 800a4ae:	b160      	cbz	r0, 800a4ca <_Balloc+0x56>
 800a4b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a4b4:	e00e      	b.n	800a4d4 <_Balloc+0x60>
 800a4b6:	2221      	movs	r2, #33	; 0x21
 800a4b8:	2104      	movs	r1, #4
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 fab5 	bl	800aa2a <_calloc_r>
 800a4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4c2:	60e8      	str	r0, [r5, #12]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1e4      	bne.n	800a494 <_Balloc+0x20>
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	bd70      	pop	{r4, r5, r6, pc}
 800a4ce:	6802      	ldr	r2, [r0, #0]
 800a4d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4da:	e7f7      	b.n	800a4cc <_Balloc+0x58>

0800a4dc <_Bfree>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	460d      	mov	r5, r1
 800a4e4:	b93c      	cbnz	r4, 800a4f6 <_Bfree+0x1a>
 800a4e6:	2010      	movs	r0, #16
 800a4e8:	f7ff ffbc 	bl	800a464 <malloc>
 800a4ec:	6270      	str	r0, [r6, #36]	; 0x24
 800a4ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4f2:	6004      	str	r4, [r0, #0]
 800a4f4:	60c4      	str	r4, [r0, #12]
 800a4f6:	b13d      	cbz	r5, 800a508 <_Bfree+0x2c>
 800a4f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4fa:	686a      	ldr	r2, [r5, #4]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a502:	6029      	str	r1, [r5, #0]
 800a504:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a508:	bd70      	pop	{r4, r5, r6, pc}

0800a50a <__multadd>:
 800a50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	461f      	mov	r7, r3
 800a510:	4606      	mov	r6, r0
 800a512:	460c      	mov	r4, r1
 800a514:	2300      	movs	r3, #0
 800a516:	690d      	ldr	r5, [r1, #16]
 800a518:	f101 0c14 	add.w	ip, r1, #20
 800a51c:	f8dc 0000 	ldr.w	r0, [ip]
 800a520:	3301      	adds	r3, #1
 800a522:	b281      	uxth	r1, r0
 800a524:	fb02 7101 	mla	r1, r2, r1, r7
 800a528:	0c00      	lsrs	r0, r0, #16
 800a52a:	0c0f      	lsrs	r7, r1, #16
 800a52c:	fb02 7000 	mla	r0, r2, r0, r7
 800a530:	b289      	uxth	r1, r1
 800a532:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a536:	429d      	cmp	r5, r3
 800a538:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a53c:	f84c 1b04 	str.w	r1, [ip], #4
 800a540:	dcec      	bgt.n	800a51c <__multadd+0x12>
 800a542:	b1d7      	cbz	r7, 800a57a <__multadd+0x70>
 800a544:	68a3      	ldr	r3, [r4, #8]
 800a546:	42ab      	cmp	r3, r5
 800a548:	dc12      	bgt.n	800a570 <__multadd+0x66>
 800a54a:	6861      	ldr	r1, [r4, #4]
 800a54c:	4630      	mov	r0, r6
 800a54e:	3101      	adds	r1, #1
 800a550:	f7ff ff90 	bl	800a474 <_Balloc>
 800a554:	4680      	mov	r8, r0
 800a556:	6922      	ldr	r2, [r4, #16]
 800a558:	f104 010c 	add.w	r1, r4, #12
 800a55c:	3202      	adds	r2, #2
 800a55e:	0092      	lsls	r2, r2, #2
 800a560:	300c      	adds	r0, #12
 800a562:	f7fe fddf 	bl	8009124 <memcpy>
 800a566:	4621      	mov	r1, r4
 800a568:	4630      	mov	r0, r6
 800a56a:	f7ff ffb7 	bl	800a4dc <_Bfree>
 800a56e:	4644      	mov	r4, r8
 800a570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a574:	3501      	adds	r5, #1
 800a576:	615f      	str	r7, [r3, #20]
 800a578:	6125      	str	r5, [r4, #16]
 800a57a:	4620      	mov	r0, r4
 800a57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a580 <__hi0bits>:
 800a580:	0c02      	lsrs	r2, r0, #16
 800a582:	0412      	lsls	r2, r2, #16
 800a584:	4603      	mov	r3, r0
 800a586:	b9b2      	cbnz	r2, 800a5b6 <__hi0bits+0x36>
 800a588:	0403      	lsls	r3, r0, #16
 800a58a:	2010      	movs	r0, #16
 800a58c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a590:	bf04      	itt	eq
 800a592:	021b      	lsleq	r3, r3, #8
 800a594:	3008      	addeq	r0, #8
 800a596:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a59a:	bf04      	itt	eq
 800a59c:	011b      	lsleq	r3, r3, #4
 800a59e:	3004      	addeq	r0, #4
 800a5a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a5a4:	bf04      	itt	eq
 800a5a6:	009b      	lsleq	r3, r3, #2
 800a5a8:	3002      	addeq	r0, #2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	db06      	blt.n	800a5bc <__hi0bits+0x3c>
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	d503      	bpl.n	800a5ba <__hi0bits+0x3a>
 800a5b2:	3001      	adds	r0, #1
 800a5b4:	4770      	bx	lr
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	e7e8      	b.n	800a58c <__hi0bits+0xc>
 800a5ba:	2020      	movs	r0, #32
 800a5bc:	4770      	bx	lr

0800a5be <__lo0bits>:
 800a5be:	6803      	ldr	r3, [r0, #0]
 800a5c0:	4601      	mov	r1, r0
 800a5c2:	f013 0207 	ands.w	r2, r3, #7
 800a5c6:	d00b      	beq.n	800a5e0 <__lo0bits+0x22>
 800a5c8:	07da      	lsls	r2, r3, #31
 800a5ca:	d423      	bmi.n	800a614 <__lo0bits+0x56>
 800a5cc:	0798      	lsls	r0, r3, #30
 800a5ce:	bf49      	itett	mi
 800a5d0:	085b      	lsrmi	r3, r3, #1
 800a5d2:	089b      	lsrpl	r3, r3, #2
 800a5d4:	2001      	movmi	r0, #1
 800a5d6:	600b      	strmi	r3, [r1, #0]
 800a5d8:	bf5c      	itt	pl
 800a5da:	600b      	strpl	r3, [r1, #0]
 800a5dc:	2002      	movpl	r0, #2
 800a5de:	4770      	bx	lr
 800a5e0:	b298      	uxth	r0, r3
 800a5e2:	b9a8      	cbnz	r0, 800a610 <__lo0bits+0x52>
 800a5e4:	2010      	movs	r0, #16
 800a5e6:	0c1b      	lsrs	r3, r3, #16
 800a5e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a5ec:	bf04      	itt	eq
 800a5ee:	0a1b      	lsreq	r3, r3, #8
 800a5f0:	3008      	addeq	r0, #8
 800a5f2:	071a      	lsls	r2, r3, #28
 800a5f4:	bf04      	itt	eq
 800a5f6:	091b      	lsreq	r3, r3, #4
 800a5f8:	3004      	addeq	r0, #4
 800a5fa:	079a      	lsls	r2, r3, #30
 800a5fc:	bf04      	itt	eq
 800a5fe:	089b      	lsreq	r3, r3, #2
 800a600:	3002      	addeq	r0, #2
 800a602:	07da      	lsls	r2, r3, #31
 800a604:	d402      	bmi.n	800a60c <__lo0bits+0x4e>
 800a606:	085b      	lsrs	r3, r3, #1
 800a608:	d006      	beq.n	800a618 <__lo0bits+0x5a>
 800a60a:	3001      	adds	r0, #1
 800a60c:	600b      	str	r3, [r1, #0]
 800a60e:	4770      	bx	lr
 800a610:	4610      	mov	r0, r2
 800a612:	e7e9      	b.n	800a5e8 <__lo0bits+0x2a>
 800a614:	2000      	movs	r0, #0
 800a616:	4770      	bx	lr
 800a618:	2020      	movs	r0, #32
 800a61a:	4770      	bx	lr

0800a61c <__i2b>:
 800a61c:	b510      	push	{r4, lr}
 800a61e:	460c      	mov	r4, r1
 800a620:	2101      	movs	r1, #1
 800a622:	f7ff ff27 	bl	800a474 <_Balloc>
 800a626:	2201      	movs	r2, #1
 800a628:	6144      	str	r4, [r0, #20]
 800a62a:	6102      	str	r2, [r0, #16]
 800a62c:	bd10      	pop	{r4, pc}

0800a62e <__multiply>:
 800a62e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a632:	4614      	mov	r4, r2
 800a634:	690a      	ldr	r2, [r1, #16]
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	4688      	mov	r8, r1
 800a63a:	429a      	cmp	r2, r3
 800a63c:	bfbe      	ittt	lt
 800a63e:	460b      	movlt	r3, r1
 800a640:	46a0      	movlt	r8, r4
 800a642:	461c      	movlt	r4, r3
 800a644:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a648:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a64c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a650:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a654:	eb07 0609 	add.w	r6, r7, r9
 800a658:	42b3      	cmp	r3, r6
 800a65a:	bfb8      	it	lt
 800a65c:	3101      	addlt	r1, #1
 800a65e:	f7ff ff09 	bl	800a474 <_Balloc>
 800a662:	f100 0514 	add.w	r5, r0, #20
 800a666:	462b      	mov	r3, r5
 800a668:	2200      	movs	r2, #0
 800a66a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a66e:	4573      	cmp	r3, lr
 800a670:	d316      	bcc.n	800a6a0 <__multiply+0x72>
 800a672:	f104 0214 	add.w	r2, r4, #20
 800a676:	f108 0114 	add.w	r1, r8, #20
 800a67a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a67e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	9b00      	ldr	r3, [sp, #0]
 800a686:	9201      	str	r2, [sp, #4]
 800a688:	4293      	cmp	r3, r2
 800a68a:	d80c      	bhi.n	800a6a6 <__multiply+0x78>
 800a68c:	2e00      	cmp	r6, #0
 800a68e:	dd03      	ble.n	800a698 <__multiply+0x6a>
 800a690:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a694:	2b00      	cmp	r3, #0
 800a696:	d05d      	beq.n	800a754 <__multiply+0x126>
 800a698:	6106      	str	r6, [r0, #16]
 800a69a:	b003      	add	sp, #12
 800a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a0:	f843 2b04 	str.w	r2, [r3], #4
 800a6a4:	e7e3      	b.n	800a66e <__multiply+0x40>
 800a6a6:	f8b2 b000 	ldrh.w	fp, [r2]
 800a6aa:	f1bb 0f00 	cmp.w	fp, #0
 800a6ae:	d023      	beq.n	800a6f8 <__multiply+0xca>
 800a6b0:	4689      	mov	r9, r1
 800a6b2:	46ac      	mov	ip, r5
 800a6b4:	f04f 0800 	mov.w	r8, #0
 800a6b8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a6bc:	f8dc a000 	ldr.w	sl, [ip]
 800a6c0:	b2a3      	uxth	r3, r4
 800a6c2:	fa1f fa8a 	uxth.w	sl, sl
 800a6c6:	fb0b a303 	mla	r3, fp, r3, sl
 800a6ca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a6ce:	f8dc 4000 	ldr.w	r4, [ip]
 800a6d2:	4443      	add	r3, r8
 800a6d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a6d8:	fb0b 840a 	mla	r4, fp, sl, r8
 800a6dc:	46e2      	mov	sl, ip
 800a6de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a6e8:	454f      	cmp	r7, r9
 800a6ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a6ee:	f84a 3b04 	str.w	r3, [sl], #4
 800a6f2:	d82b      	bhi.n	800a74c <__multiply+0x11e>
 800a6f4:	f8cc 8004 	str.w	r8, [ip, #4]
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	3204      	adds	r2, #4
 800a6fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a700:	f1ba 0f00 	cmp.w	sl, #0
 800a704:	d020      	beq.n	800a748 <__multiply+0x11a>
 800a706:	4689      	mov	r9, r1
 800a708:	46a8      	mov	r8, r5
 800a70a:	f04f 0b00 	mov.w	fp, #0
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	f8b9 c000 	ldrh.w	ip, [r9]
 800a714:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	fb0a 440c 	mla	r4, sl, ip, r4
 800a71e:	46c4      	mov	ip, r8
 800a720:	445c      	add	r4, fp
 800a722:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a726:	f84c 3b04 	str.w	r3, [ip], #4
 800a72a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a72e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a732:	0c1b      	lsrs	r3, r3, #16
 800a734:	fb0a b303 	mla	r3, sl, r3, fp
 800a738:	454f      	cmp	r7, r9
 800a73a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a73e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a742:	d805      	bhi.n	800a750 <__multiply+0x122>
 800a744:	f8c8 3004 	str.w	r3, [r8, #4]
 800a748:	3504      	adds	r5, #4
 800a74a:	e79b      	b.n	800a684 <__multiply+0x56>
 800a74c:	46d4      	mov	ip, sl
 800a74e:	e7b3      	b.n	800a6b8 <__multiply+0x8a>
 800a750:	46e0      	mov	r8, ip
 800a752:	e7dd      	b.n	800a710 <__multiply+0xe2>
 800a754:	3e01      	subs	r6, #1
 800a756:	e799      	b.n	800a68c <__multiply+0x5e>

0800a758 <__pow5mult>:
 800a758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a75c:	4615      	mov	r5, r2
 800a75e:	f012 0203 	ands.w	r2, r2, #3
 800a762:	4606      	mov	r6, r0
 800a764:	460f      	mov	r7, r1
 800a766:	d007      	beq.n	800a778 <__pow5mult+0x20>
 800a768:	4c21      	ldr	r4, [pc, #132]	; (800a7f0 <__pow5mult+0x98>)
 800a76a:	3a01      	subs	r2, #1
 800a76c:	2300      	movs	r3, #0
 800a76e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a772:	f7ff feca 	bl	800a50a <__multadd>
 800a776:	4607      	mov	r7, r0
 800a778:	10ad      	asrs	r5, r5, #2
 800a77a:	d035      	beq.n	800a7e8 <__pow5mult+0x90>
 800a77c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a77e:	b93c      	cbnz	r4, 800a790 <__pow5mult+0x38>
 800a780:	2010      	movs	r0, #16
 800a782:	f7ff fe6f 	bl	800a464 <malloc>
 800a786:	6270      	str	r0, [r6, #36]	; 0x24
 800a788:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a78c:	6004      	str	r4, [r0, #0]
 800a78e:	60c4      	str	r4, [r0, #12]
 800a790:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a794:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a798:	b94c      	cbnz	r4, 800a7ae <__pow5mult+0x56>
 800a79a:	f240 2171 	movw	r1, #625	; 0x271
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f7ff ff3c 	bl	800a61c <__i2b>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7ac:	6003      	str	r3, [r0, #0]
 800a7ae:	f04f 0800 	mov.w	r8, #0
 800a7b2:	07eb      	lsls	r3, r5, #31
 800a7b4:	d50a      	bpl.n	800a7cc <__pow5mult+0x74>
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ff37 	bl	800a62e <__multiply>
 800a7c0:	4681      	mov	r9, r0
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7ff fe89 	bl	800a4dc <_Bfree>
 800a7ca:	464f      	mov	r7, r9
 800a7cc:	106d      	asrs	r5, r5, #1
 800a7ce:	d00b      	beq.n	800a7e8 <__pow5mult+0x90>
 800a7d0:	6820      	ldr	r0, [r4, #0]
 800a7d2:	b938      	cbnz	r0, 800a7e4 <__pow5mult+0x8c>
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff ff28 	bl	800a62e <__multiply>
 800a7de:	6020      	str	r0, [r4, #0]
 800a7e0:	f8c0 8000 	str.w	r8, [r0]
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	e7e4      	b.n	800a7b2 <__pow5mult+0x5a>
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ee:	bf00      	nop
 800a7f0:	0800ad50 	.word	0x0800ad50

0800a7f4 <__lshift>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	4607      	mov	r7, r0
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	6923      	ldr	r3, [r4, #16]
 800a800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a804:	eb0a 0903 	add.w	r9, sl, r3
 800a808:	6849      	ldr	r1, [r1, #4]
 800a80a:	68a3      	ldr	r3, [r4, #8]
 800a80c:	f109 0501 	add.w	r5, r9, #1
 800a810:	42ab      	cmp	r3, r5
 800a812:	db32      	blt.n	800a87a <__lshift+0x86>
 800a814:	4638      	mov	r0, r7
 800a816:	f7ff fe2d 	bl	800a474 <_Balloc>
 800a81a:	2300      	movs	r3, #0
 800a81c:	4680      	mov	r8, r0
 800a81e:	461a      	mov	r2, r3
 800a820:	f100 0114 	add.w	r1, r0, #20
 800a824:	4553      	cmp	r3, sl
 800a826:	db2b      	blt.n	800a880 <__lshift+0x8c>
 800a828:	6920      	ldr	r0, [r4, #16]
 800a82a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a82e:	f104 0314 	add.w	r3, r4, #20
 800a832:	f016 021f 	ands.w	r2, r6, #31
 800a836:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a83a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a83e:	d025      	beq.n	800a88c <__lshift+0x98>
 800a840:	2000      	movs	r0, #0
 800a842:	f1c2 0e20 	rsb	lr, r2, #32
 800a846:	468a      	mov	sl, r1
 800a848:	681e      	ldr	r6, [r3, #0]
 800a84a:	4096      	lsls	r6, r2
 800a84c:	4330      	orrs	r0, r6
 800a84e:	f84a 0b04 	str.w	r0, [sl], #4
 800a852:	f853 0b04 	ldr.w	r0, [r3], #4
 800a856:	459c      	cmp	ip, r3
 800a858:	fa20 f00e 	lsr.w	r0, r0, lr
 800a85c:	d814      	bhi.n	800a888 <__lshift+0x94>
 800a85e:	6048      	str	r0, [r1, #4]
 800a860:	b108      	cbz	r0, 800a866 <__lshift+0x72>
 800a862:	f109 0502 	add.w	r5, r9, #2
 800a866:	3d01      	subs	r5, #1
 800a868:	4638      	mov	r0, r7
 800a86a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a86e:	4621      	mov	r1, r4
 800a870:	f7ff fe34 	bl	800a4dc <_Bfree>
 800a874:	4640      	mov	r0, r8
 800a876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87a:	3101      	adds	r1, #1
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	e7c7      	b.n	800a810 <__lshift+0x1c>
 800a880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a884:	3301      	adds	r3, #1
 800a886:	e7cd      	b.n	800a824 <__lshift+0x30>
 800a888:	4651      	mov	r1, sl
 800a88a:	e7dc      	b.n	800a846 <__lshift+0x52>
 800a88c:	3904      	subs	r1, #4
 800a88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a892:	459c      	cmp	ip, r3
 800a894:	f841 2f04 	str.w	r2, [r1, #4]!
 800a898:	d8f9      	bhi.n	800a88e <__lshift+0x9a>
 800a89a:	e7e4      	b.n	800a866 <__lshift+0x72>

0800a89c <__mcmp>:
 800a89c:	6903      	ldr	r3, [r0, #16]
 800a89e:	690a      	ldr	r2, [r1, #16]
 800a8a0:	b530      	push	{r4, r5, lr}
 800a8a2:	1a9b      	subs	r3, r3, r2
 800a8a4:	d10c      	bne.n	800a8c0 <__mcmp+0x24>
 800a8a6:	0092      	lsls	r2, r2, #2
 800a8a8:	3014      	adds	r0, #20
 800a8aa:	3114      	adds	r1, #20
 800a8ac:	1884      	adds	r4, r0, r2
 800a8ae:	4411      	add	r1, r2
 800a8b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8b8:	4295      	cmp	r5, r2
 800a8ba:	d003      	beq.n	800a8c4 <__mcmp+0x28>
 800a8bc:	d305      	bcc.n	800a8ca <__mcmp+0x2e>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	bd30      	pop	{r4, r5, pc}
 800a8c4:	42a0      	cmp	r0, r4
 800a8c6:	d3f3      	bcc.n	800a8b0 <__mcmp+0x14>
 800a8c8:	e7fa      	b.n	800a8c0 <__mcmp+0x24>
 800a8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ce:	e7f7      	b.n	800a8c0 <__mcmp+0x24>

0800a8d0 <__mdiff>:
 800a8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	460d      	mov	r5, r1
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4628      	mov	r0, r5
 800a8dc:	4614      	mov	r4, r2
 800a8de:	f7ff ffdd 	bl	800a89c <__mcmp>
 800a8e2:	1e06      	subs	r6, r0, #0
 800a8e4:	d108      	bne.n	800a8f8 <__mdiff+0x28>
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	f7ff fdc3 	bl	800a474 <_Balloc>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f8:	bfa4      	itt	ge
 800a8fa:	4623      	movge	r3, r4
 800a8fc:	462c      	movge	r4, r5
 800a8fe:	4638      	mov	r0, r7
 800a900:	6861      	ldr	r1, [r4, #4]
 800a902:	bfa6      	itte	ge
 800a904:	461d      	movge	r5, r3
 800a906:	2600      	movge	r6, #0
 800a908:	2601      	movlt	r6, #1
 800a90a:	f7ff fdb3 	bl	800a474 <_Balloc>
 800a90e:	f04f 0e00 	mov.w	lr, #0
 800a912:	60c6      	str	r6, [r0, #12]
 800a914:	692b      	ldr	r3, [r5, #16]
 800a916:	6926      	ldr	r6, [r4, #16]
 800a918:	f104 0214 	add.w	r2, r4, #20
 800a91c:	f105 0914 	add.w	r9, r5, #20
 800a920:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a924:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a928:	f100 0114 	add.w	r1, r0, #20
 800a92c:	f852 ab04 	ldr.w	sl, [r2], #4
 800a930:	f859 5b04 	ldr.w	r5, [r9], #4
 800a934:	fa1f f38a 	uxth.w	r3, sl
 800a938:	4473      	add	r3, lr
 800a93a:	b2ac      	uxth	r4, r5
 800a93c:	1b1b      	subs	r3, r3, r4
 800a93e:	0c2c      	lsrs	r4, r5, #16
 800a940:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a944:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a948:	b29b      	uxth	r3, r3
 800a94a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a94e:	45c8      	cmp	r8, r9
 800a950:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a954:	4694      	mov	ip, r2
 800a956:	f841 4b04 	str.w	r4, [r1], #4
 800a95a:	d8e7      	bhi.n	800a92c <__mdiff+0x5c>
 800a95c:	45bc      	cmp	ip, r7
 800a95e:	d304      	bcc.n	800a96a <__mdiff+0x9a>
 800a960:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a964:	b183      	cbz	r3, 800a988 <__mdiff+0xb8>
 800a966:	6106      	str	r6, [r0, #16]
 800a968:	e7c4      	b.n	800a8f4 <__mdiff+0x24>
 800a96a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a96e:	b2a2      	uxth	r2, r4
 800a970:	4472      	add	r2, lr
 800a972:	1413      	asrs	r3, r2, #16
 800a974:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a978:	b292      	uxth	r2, r2
 800a97a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a97e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a982:	f841 2b04 	str.w	r2, [r1], #4
 800a986:	e7e9      	b.n	800a95c <__mdiff+0x8c>
 800a988:	3e01      	subs	r6, #1
 800a98a:	e7e9      	b.n	800a960 <__mdiff+0x90>

0800a98c <__d2b>:
 800a98c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a990:	461c      	mov	r4, r3
 800a992:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a996:	2101      	movs	r1, #1
 800a998:	4690      	mov	r8, r2
 800a99a:	f7ff fd6b 	bl	800a474 <_Balloc>
 800a99e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a9a2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	bb34      	cbnz	r4, 800a9f8 <__d2b+0x6c>
 800a9aa:	9201      	str	r2, [sp, #4]
 800a9ac:	f1b8 0200 	subs.w	r2, r8, #0
 800a9b0:	d027      	beq.n	800aa02 <__d2b+0x76>
 800a9b2:	a802      	add	r0, sp, #8
 800a9b4:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a9b8:	f7ff fe01 	bl	800a5be <__lo0bits>
 800a9bc:	9900      	ldr	r1, [sp, #0]
 800a9be:	b1f0      	cbz	r0, 800a9fe <__d2b+0x72>
 800a9c0:	9a01      	ldr	r2, [sp, #4]
 800a9c2:	f1c0 0320 	rsb	r3, r0, #32
 800a9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	40c2      	lsrs	r2, r0
 800a9ce:	617b      	str	r3, [r7, #20]
 800a9d0:	9201      	str	r2, [sp, #4]
 800a9d2:	9b01      	ldr	r3, [sp, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bf14      	ite	ne
 800a9d8:	2102      	movne	r1, #2
 800a9da:	2101      	moveq	r1, #1
 800a9dc:	61bb      	str	r3, [r7, #24]
 800a9de:	6139      	str	r1, [r7, #16]
 800a9e0:	b1c4      	cbz	r4, 800aa14 <__d2b+0x88>
 800a9e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a9e6:	4404      	add	r4, r0
 800a9e8:	6034      	str	r4, [r6, #0]
 800a9ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9ee:	6028      	str	r0, [r5, #0]
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	b002      	add	sp, #8
 800a9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a9fc:	e7d5      	b.n	800a9aa <__d2b+0x1e>
 800a9fe:	6179      	str	r1, [r7, #20]
 800aa00:	e7e7      	b.n	800a9d2 <__d2b+0x46>
 800aa02:	a801      	add	r0, sp, #4
 800aa04:	f7ff fddb 	bl	800a5be <__lo0bits>
 800aa08:	2101      	movs	r1, #1
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	6139      	str	r1, [r7, #16]
 800aa0e:	617b      	str	r3, [r7, #20]
 800aa10:	3020      	adds	r0, #32
 800aa12:	e7e5      	b.n	800a9e0 <__d2b+0x54>
 800aa14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa18:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800aa1c:	6030      	str	r0, [r6, #0]
 800aa1e:	6918      	ldr	r0, [r3, #16]
 800aa20:	f7ff fdae 	bl	800a580 <__hi0bits>
 800aa24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800aa28:	e7e1      	b.n	800a9ee <__d2b+0x62>

0800aa2a <_calloc_r>:
 800aa2a:	b538      	push	{r3, r4, r5, lr}
 800aa2c:	fb02 f401 	mul.w	r4, r2, r1
 800aa30:	4621      	mov	r1, r4
 800aa32:	f000 f809 	bl	800aa48 <_malloc_r>
 800aa36:	4605      	mov	r5, r0
 800aa38:	b118      	cbz	r0, 800aa42 <_calloc_r+0x18>
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	f7fe fb7c 	bl	800913a <memset>
 800aa42:	4628      	mov	r0, r5
 800aa44:	bd38      	pop	{r3, r4, r5, pc}
	...

0800aa48 <_malloc_r>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	1ccd      	adds	r5, r1, #3
 800aa4c:	f025 0503 	bic.w	r5, r5, #3
 800aa50:	3508      	adds	r5, #8
 800aa52:	2d0c      	cmp	r5, #12
 800aa54:	bf38      	it	cc
 800aa56:	250c      	movcc	r5, #12
 800aa58:	2d00      	cmp	r5, #0
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	db01      	blt.n	800aa62 <_malloc_r+0x1a>
 800aa5e:	42a9      	cmp	r1, r5
 800aa60:	d903      	bls.n	800aa6a <_malloc_r+0x22>
 800aa62:	230c      	movs	r3, #12
 800aa64:	6033      	str	r3, [r6, #0]
 800aa66:	2000      	movs	r0, #0
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
 800aa6a:	f000 f869 	bl	800ab40 <__malloc_lock>
 800aa6e:	4a21      	ldr	r2, [pc, #132]	; (800aaf4 <_malloc_r+0xac>)
 800aa70:	6814      	ldr	r4, [r2, #0]
 800aa72:	4621      	mov	r1, r4
 800aa74:	b991      	cbnz	r1, 800aa9c <_malloc_r+0x54>
 800aa76:	4c20      	ldr	r4, [pc, #128]	; (800aaf8 <_malloc_r+0xb0>)
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	b91b      	cbnz	r3, 800aa84 <_malloc_r+0x3c>
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	f000 f83d 	bl	800aafc <_sbrk_r>
 800aa82:	6020      	str	r0, [r4, #0]
 800aa84:	4629      	mov	r1, r5
 800aa86:	4630      	mov	r0, r6
 800aa88:	f000 f838 	bl	800aafc <_sbrk_r>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d124      	bne.n	800aada <_malloc_r+0x92>
 800aa90:	230c      	movs	r3, #12
 800aa92:	4630      	mov	r0, r6
 800aa94:	6033      	str	r3, [r6, #0]
 800aa96:	f000 f854 	bl	800ab42 <__malloc_unlock>
 800aa9a:	e7e4      	b.n	800aa66 <_malloc_r+0x1e>
 800aa9c:	680b      	ldr	r3, [r1, #0]
 800aa9e:	1b5b      	subs	r3, r3, r5
 800aaa0:	d418      	bmi.n	800aad4 <_malloc_r+0x8c>
 800aaa2:	2b0b      	cmp	r3, #11
 800aaa4:	d90f      	bls.n	800aac6 <_malloc_r+0x7e>
 800aaa6:	600b      	str	r3, [r1, #0]
 800aaa8:	18cc      	adds	r4, r1, r3
 800aaaa:	50cd      	str	r5, [r1, r3]
 800aaac:	4630      	mov	r0, r6
 800aaae:	f000 f848 	bl	800ab42 <__malloc_unlock>
 800aab2:	f104 000b 	add.w	r0, r4, #11
 800aab6:	1d23      	adds	r3, r4, #4
 800aab8:	f020 0007 	bic.w	r0, r0, #7
 800aabc:	1ac3      	subs	r3, r0, r3
 800aabe:	d0d3      	beq.n	800aa68 <_malloc_r+0x20>
 800aac0:	425a      	negs	r2, r3
 800aac2:	50e2      	str	r2, [r4, r3]
 800aac4:	e7d0      	b.n	800aa68 <_malloc_r+0x20>
 800aac6:	684b      	ldr	r3, [r1, #4]
 800aac8:	428c      	cmp	r4, r1
 800aaca:	bf16      	itet	ne
 800aacc:	6063      	strne	r3, [r4, #4]
 800aace:	6013      	streq	r3, [r2, #0]
 800aad0:	460c      	movne	r4, r1
 800aad2:	e7eb      	b.n	800aaac <_malloc_r+0x64>
 800aad4:	460c      	mov	r4, r1
 800aad6:	6849      	ldr	r1, [r1, #4]
 800aad8:	e7cc      	b.n	800aa74 <_malloc_r+0x2c>
 800aada:	1cc4      	adds	r4, r0, #3
 800aadc:	f024 0403 	bic.w	r4, r4, #3
 800aae0:	42a0      	cmp	r0, r4
 800aae2:	d005      	beq.n	800aaf0 <_malloc_r+0xa8>
 800aae4:	1a21      	subs	r1, r4, r0
 800aae6:	4630      	mov	r0, r6
 800aae8:	f000 f808 	bl	800aafc <_sbrk_r>
 800aaec:	3001      	adds	r0, #1
 800aaee:	d0cf      	beq.n	800aa90 <_malloc_r+0x48>
 800aaf0:	6025      	str	r5, [r4, #0]
 800aaf2:	e7db      	b.n	800aaac <_malloc_r+0x64>
 800aaf4:	20000598 	.word	0x20000598
 800aaf8:	2000059c 	.word	0x2000059c

0800aafc <_sbrk_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	2300      	movs	r3, #0
 800ab00:	4c05      	ldr	r4, [pc, #20]	; (800ab18 <_sbrk_r+0x1c>)
 800ab02:	4605      	mov	r5, r0
 800ab04:	4608      	mov	r0, r1
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	f7f6 fcaa 	bl	8001460 <_sbrk>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_sbrk_r+0x1a>
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_sbrk_r+0x1a>
 800ab14:	602b      	str	r3, [r5, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	20001710 	.word	0x20001710

0800ab1c <__ascii_mbtowc>:
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	b901      	cbnz	r1, 800ab22 <__ascii_mbtowc+0x6>
 800ab20:	a901      	add	r1, sp, #4
 800ab22:	b142      	cbz	r2, 800ab36 <__ascii_mbtowc+0x1a>
 800ab24:	b14b      	cbz	r3, 800ab3a <__ascii_mbtowc+0x1e>
 800ab26:	7813      	ldrb	r3, [r2, #0]
 800ab28:	600b      	str	r3, [r1, #0]
 800ab2a:	7812      	ldrb	r2, [r2, #0]
 800ab2c:	1c10      	adds	r0, r2, #0
 800ab2e:	bf18      	it	ne
 800ab30:	2001      	movne	r0, #1
 800ab32:	b002      	add	sp, #8
 800ab34:	4770      	bx	lr
 800ab36:	4610      	mov	r0, r2
 800ab38:	e7fb      	b.n	800ab32 <__ascii_mbtowc+0x16>
 800ab3a:	f06f 0001 	mvn.w	r0, #1
 800ab3e:	e7f8      	b.n	800ab32 <__ascii_mbtowc+0x16>

0800ab40 <__malloc_lock>:
 800ab40:	4770      	bx	lr

0800ab42 <__malloc_unlock>:
 800ab42:	4770      	bx	lr

0800ab44 <__ascii_wctomb>:
 800ab44:	b149      	cbz	r1, 800ab5a <__ascii_wctomb+0x16>
 800ab46:	2aff      	cmp	r2, #255	; 0xff
 800ab48:	bf8b      	itete	hi
 800ab4a:	238a      	movhi	r3, #138	; 0x8a
 800ab4c:	700a      	strbls	r2, [r1, #0]
 800ab4e:	6003      	strhi	r3, [r0, #0]
 800ab50:	2001      	movls	r0, #1
 800ab52:	bf88      	it	hi
 800ab54:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab58:	4770      	bx	lr
 800ab5a:	4608      	mov	r0, r1
 800ab5c:	4770      	bx	lr
	...

0800ab60 <_init>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	bf00      	nop
 800ab64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab66:	bc08      	pop	{r3}
 800ab68:	469e      	mov	lr, r3
 800ab6a:	4770      	bx	lr

0800ab6c <_fini>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	bf00      	nop
 800ab70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab72:	bc08      	pop	{r3}
 800ab74:	469e      	mov	lr, r3
 800ab76:	4770      	bx	lr
